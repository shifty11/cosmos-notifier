// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: tracker_service.proto

package tracker_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrackerService_IsAddressValid_FullMethodName = "/cosmos_notifier_grpc.TrackerService/IsAddressValid"
	TrackerService_AddTracker_FullMethodName     = "/cosmos_notifier_grpc.TrackerService/AddTracker"
	TrackerService_UpdateTracker_FullMethodName  = "/cosmos_notifier_grpc.TrackerService/UpdateTracker"
	TrackerService_DeleteTracker_FullMethodName  = "/cosmos_notifier_grpc.TrackerService/DeleteTracker"
)

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerServiceClient interface {
	IsAddressValid(ctx context.Context, in *IsAddressValidRequest, opts ...grpc.CallOption) (*IsAddressValidResponse, error)
	AddTracker(ctx context.Context, in *AddTrackerRequest, opts ...grpc.CallOption) (*AddTrackerResponse, error)
	UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error)
	DeleteTracker(ctx context.Context, in *DeleteTrackerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) IsAddressValid(ctx context.Context, in *IsAddressValidRequest, opts ...grpc.CallOption) (*IsAddressValidResponse, error) {
	out := new(IsAddressValidResponse)
	err := c.cc.Invoke(ctx, TrackerService_IsAddressValid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) AddTracker(ctx context.Context, in *AddTrackerRequest, opts ...grpc.CallOption) (*AddTrackerResponse, error) {
	out := new(AddTrackerResponse)
	err := c.cc.Invoke(ctx, TrackerService_AddTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error) {
	out := new(UpdateTrackerResponse)
	err := c.cc.Invoke(ctx, TrackerService_UpdateTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) DeleteTracker(ctx context.Context, in *DeleteTrackerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TrackerService_DeleteTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility
type TrackerServiceServer interface {
	IsAddressValid(context.Context, *IsAddressValidRequest) (*IsAddressValidResponse, error)
	AddTracker(context.Context, *AddTrackerRequest) (*AddTrackerResponse, error)
	UpdateTracker(context.Context, *UpdateTrackerRequest) (*UpdateTrackerResponse, error)
	DeleteTracker(context.Context, *DeleteTrackerRequest) (*empty.Empty, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServiceServer struct {
}

func (UnimplementedTrackerServiceServer) IsAddressValid(context.Context, *IsAddressValidRequest) (*IsAddressValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAddressValid not implemented")
}
func (UnimplementedTrackerServiceServer) AddTracker(context.Context, *AddTrackerRequest) (*AddTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTracker not implemented")
}
func (UnimplementedTrackerServiceServer) UpdateTracker(context.Context, *UpdateTrackerRequest) (*UpdateTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTracker not implemented")
}
func (UnimplementedTrackerServiceServer) DeleteTracker(context.Context, *DeleteTrackerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracker not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_IsAddressValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAddressValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).IsAddressValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_IsAddressValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).IsAddressValid(ctx, req.(*IsAddressValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_AddTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).AddTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_AddTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).AddTracker(ctx, req.(*AddTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_UpdateTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).UpdateTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_UpdateTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).UpdateTracker(ctx, req.(*UpdateTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_DeleteTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).DeleteTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_DeleteTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).DeleteTracker(ctx, req.(*DeleteTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos_notifier_grpc.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAddressValid",
			Handler:    _TrackerService_IsAddressValid_Handler,
		},
		{
			MethodName: "AddTracker",
			Handler:    _TrackerService_AddTracker_Handler,
		},
		{
			MethodName: "UpdateTracker",
			Handler:    _TrackerService_UpdateTracker_Handler,
		},
		{
			MethodName: "DeleteTracker",
			Handler:    _TrackerService_DeleteTracker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracker_service.proto",
}
