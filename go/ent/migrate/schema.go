// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ContractsColumns holds the columns for the "contracts" table.
	ContractsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "address", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "image_url", Type: field.TypeString},
		{Name: "thumbnail_url", Type: field.TypeString, Default: ""},
	}
	// ContractsTable holds the schema information for the "contracts" table.
	ContractsTable = &schema.Table{
		Name:       "contracts",
		Columns:    ContractsColumns,
		PrimaryKey: []*schema.Column{ContractsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "contract_address",
				Unique:  true,
				Columns: []*schema.Column{ContractsColumns[3]},
			},
		},
	}
	// DiscordChannelsColumns holds the columns for the "discord_channels" table.
	DiscordChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "channel_id", Type: field.TypeInt64, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "is_group", Type: field.TypeBool},
	}
	// DiscordChannelsTable holds the schema information for the "discord_channels" table.
	DiscordChannelsTable = &schema.Table{
		Name:       "discord_channels",
		Columns:    DiscordChannelsColumns,
		PrimaryKey: []*schema.Column{DiscordChannelsColumns[0]},
	}
	// ProposalsColumns holds the columns for the "proposals" table.
	ProposalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "proposal_id", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"open", "rejected", "passed", "executed", "closed", "execution_failed"}},
		{Name: "contract_proposals", Type: field.TypeInt, Nullable: true},
	}
	// ProposalsTable holds the schema information for the "proposals" table.
	ProposalsTable = &schema.Table{
		Name:       "proposals",
		Columns:    ProposalsColumns,
		PrimaryKey: []*schema.Column{ProposalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "proposals_contracts_proposals",
				Columns:    []*schema.Column{ProposalsColumns[8]},
				RefColumns: []*schema.Column{ContractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TelegramChatsColumns holds the columns for the "telegram_chats" table.
	TelegramChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "chat_id", Type: field.TypeInt64, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "is_group", Type: field.TypeBool},
	}
	// TelegramChatsTable holds the schema information for the "telegram_chats" table.
	TelegramChatsTable = &schema.Table{
		Name:       "telegram_chats",
		Columns:    TelegramChatsColumns,
		PrimaryKey: []*schema.Column{TelegramChatsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt64},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"telegram", "discord"}},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin"}, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// DiscordChannelUsersColumns holds the columns for the "discord_channel_users" table.
	DiscordChannelUsersColumns = []*schema.Column{
		{Name: "discord_channel_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// DiscordChannelUsersTable holds the schema information for the "discord_channel_users" table.
	DiscordChannelUsersTable = &schema.Table{
		Name:       "discord_channel_users",
		Columns:    DiscordChannelUsersColumns,
		PrimaryKey: []*schema.Column{DiscordChannelUsersColumns[0], DiscordChannelUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_channel_users_discord_channel_id",
				Columns:    []*schema.Column{DiscordChannelUsersColumns[0]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_channel_users_user_id",
				Columns:    []*schema.Column{DiscordChannelUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordChannelContractsColumns holds the columns for the "discord_channel_contracts" table.
	DiscordChannelContractsColumns = []*schema.Column{
		{Name: "discord_channel_id", Type: field.TypeInt},
		{Name: "contract_id", Type: field.TypeInt},
	}
	// DiscordChannelContractsTable holds the schema information for the "discord_channel_contracts" table.
	DiscordChannelContractsTable = &schema.Table{
		Name:       "discord_channel_contracts",
		Columns:    DiscordChannelContractsColumns,
		PrimaryKey: []*schema.Column{DiscordChannelContractsColumns[0], DiscordChannelContractsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_channel_contracts_discord_channel_id",
				Columns:    []*schema.Column{DiscordChannelContractsColumns[0]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_channel_contracts_contract_id",
				Columns:    []*schema.Column{DiscordChannelContractsColumns[1]},
				RefColumns: []*schema.Column{ContractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TelegramChatUsersColumns holds the columns for the "telegram_chat_users" table.
	TelegramChatUsersColumns = []*schema.Column{
		{Name: "telegram_chat_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TelegramChatUsersTable holds the schema information for the "telegram_chat_users" table.
	TelegramChatUsersTable = &schema.Table{
		Name:       "telegram_chat_users",
		Columns:    TelegramChatUsersColumns,
		PrimaryKey: []*schema.Column{TelegramChatUsersColumns[0], TelegramChatUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "telegram_chat_users_telegram_chat_id",
				Columns:    []*schema.Column{TelegramChatUsersColumns[0]},
				RefColumns: []*schema.Column{TelegramChatsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "telegram_chat_users_user_id",
				Columns:    []*schema.Column{TelegramChatUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TelegramChatContractsColumns holds the columns for the "telegram_chat_contracts" table.
	TelegramChatContractsColumns = []*schema.Column{
		{Name: "telegram_chat_id", Type: field.TypeInt},
		{Name: "contract_id", Type: field.TypeInt},
	}
	// TelegramChatContractsTable holds the schema information for the "telegram_chat_contracts" table.
	TelegramChatContractsTable = &schema.Table{
		Name:       "telegram_chat_contracts",
		Columns:    TelegramChatContractsColumns,
		PrimaryKey: []*schema.Column{TelegramChatContractsColumns[0], TelegramChatContractsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "telegram_chat_contracts_telegram_chat_id",
				Columns:    []*schema.Column{TelegramChatContractsColumns[0]},
				RefColumns: []*schema.Column{TelegramChatsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "telegram_chat_contracts_contract_id",
				Columns:    []*schema.Column{TelegramChatContractsColumns[1]},
				RefColumns: []*schema.Column{ContractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ContractsTable,
		DiscordChannelsTable,
		ProposalsTable,
		TelegramChatsTable,
		UsersTable,
		DiscordChannelUsersTable,
		DiscordChannelContractsTable,
		TelegramChatUsersTable,
		TelegramChatContractsTable,
	}
)

func init() {
	ProposalsTable.ForeignKeys[0].RefTable = ContractsTable
	DiscordChannelUsersTable.ForeignKeys[0].RefTable = DiscordChannelsTable
	DiscordChannelUsersTable.ForeignKeys[1].RefTable = UsersTable
	DiscordChannelContractsTable.ForeignKeys[0].RefTable = DiscordChannelsTable
	DiscordChannelContractsTable.ForeignKeys[1].RefTable = ContractsTable
	TelegramChatUsersTable.ForeignKeys[0].RefTable = TelegramChatsTable
	TelegramChatUsersTable.ForeignKeys[1].RefTable = UsersTable
	TelegramChatContractsTable.ForeignKeys[0].RefTable = TelegramChatsTable
	TelegramChatContractsTable.ForeignKeys[1].RefTable = ContractsTable
}
