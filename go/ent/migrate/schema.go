// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressTrackersColumns holds the columns for the "address_trackers" table.
	AddressTrackersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "address", Type: field.TypeString},
		{Name: "notification_interval", Type: field.TypeUint64},
		{Name: "chain_address_trackers", Type: field.TypeInt},
		{Name: "discord_channel_address_trackers", Type: field.TypeInt, Nullable: true},
		{Name: "telegram_chat_address_trackers", Type: field.TypeInt, Nullable: true},
	}
	// AddressTrackersTable holds the schema information for the "address_trackers" table.
	AddressTrackersTable = &schema.Table{
		Name:       "address_trackers",
		Columns:    AddressTrackersColumns,
		PrimaryKey: []*schema.Column{AddressTrackersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "address_trackers_chains_address_trackers",
				Columns:    []*schema.Column{AddressTrackersColumns[5]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "address_trackers_discord_channels_address_trackers",
				Columns:    []*schema.Column{AddressTrackersColumns[6]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "address_trackers_telegram_chats_address_trackers",
				Columns:    []*schema.Column{AddressTrackersColumns[7]},
				RefColumns: []*schema.Column{TelegramChatsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "addresstracker_address_chain_address_trackers_discord_channel_address_trackers_telegram_chat_address_trackers",
				Unique:  true,
				Columns: []*schema.Column{AddressTrackersColumns[3], AddressTrackersColumns[5], AddressTrackersColumns[6], AddressTrackersColumns[7]},
			},
		},
	}
	// ChainsColumns holds the columns for the "chains" table.
	ChainsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "chain_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "pretty_name", Type: field.TypeString, Unique: true},
		{Name: "path", Type: field.TypeString, Default: ""},
		{Name: "display", Type: field.TypeString, Default: ""},
		{Name: "is_enabled", Type: field.TypeBool, Default: true},
		{Name: "image_url", Type: field.TypeString},
		{Name: "thumbnail_url", Type: field.TypeString, Default: ""},
		{Name: "bech32_prefix", Type: field.TypeString, Default: ""},
	}
	// ChainsTable holds the schema information for the "chains" table.
	ChainsTable = &schema.Table{
		Name:       "chains",
		Columns:    ChainsColumns,
		PrimaryKey: []*schema.Column{ChainsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "chain_name",
				Unique:  true,
				Columns: []*schema.Column{ChainsColumns[4]},
			},
		},
	}
	// ChainProposalsColumns holds the columns for the "chain_proposals" table.
	ChainProposalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "proposal_id", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "voting_start_time", Type: field.TypeTime},
		{Name: "voting_end_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PROPOSAL_STATUS_UNSPECIFIED", "PROPOSAL_STATUS_DEPOSIT_PERIOD", "PROPOSAL_STATUS_VOTING_PERIOD", "PROPOSAL_STATUS_PASSED", "PROPOSAL_STATUS_REJECTED", "PROPOSAL_STATUS_FAILED"}},
		{Name: "chain_chain_proposals", Type: field.TypeInt, Nullable: true},
	}
	// ChainProposalsTable holds the schema information for the "chain_proposals" table.
	ChainProposalsTable = &schema.Table{
		Name:       "chain_proposals",
		Columns:    ChainProposalsColumns,
		PrimaryKey: []*schema.Column{ChainProposalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chain_proposals_chains_chain_proposals",
				Columns:    []*schema.Column{ChainProposalsColumns[9]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ContractsColumns holds the columns for the "contracts" table.
	ContractsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "address", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "image_url", Type: field.TypeString},
		{Name: "thumbnail_url", Type: field.TypeString, Default: ""},
		{Name: "rpc_endpoint", Type: field.TypeString, Default: "https://rpc.cosmos.directory/juno"},
		{Name: "config_version", Type: field.TypeEnum, Enums: []string{"unknown", "v1", "v2"}, Default: "unknown"},
		{Name: "get_proposals_query", Type: field.TypeString, Default: "{\"list_proposals\":{}}"},
	}
	// ContractsTable holds the schema information for the "contracts" table.
	ContractsTable = &schema.Table{
		Name:       "contracts",
		Columns:    ContractsColumns,
		PrimaryKey: []*schema.Column{ContractsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "contract_address",
				Unique:  true,
				Columns: []*schema.Column{ContractsColumns[3]},
			},
		},
	}
	// ContractProposalsColumns holds the columns for the "contract_proposals" table.
	ContractProposalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "proposal_id", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"open", "rejected", "passed", "executed", "closed", "execution_failed"}},
		{Name: "contract_proposals", Type: field.TypeInt, Nullable: true},
	}
	// ContractProposalsTable holds the schema information for the "contract_proposals" table.
	ContractProposalsTable = &schema.Table{
		Name:       "contract_proposals",
		Columns:    ContractProposalsColumns,
		PrimaryKey: []*schema.Column{ContractProposalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contract_proposals_contracts_proposals",
				Columns:    []*schema.Column{ContractProposalsColumns[8]},
				RefColumns: []*schema.Column{ContractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordChannelsColumns holds the columns for the "discord_channels" table.
	DiscordChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "channel_id", Type: field.TypeInt64, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "is_group", Type: field.TypeBool},
	}
	// DiscordChannelsTable holds the schema information for the "discord_channels" table.
	DiscordChannelsTable = &schema.Table{
		Name:       "discord_channels",
		Columns:    DiscordChannelsColumns,
		PrimaryKey: []*schema.Column{DiscordChannelsColumns[0]},
	}
	// TelegramChatsColumns holds the columns for the "telegram_chats" table.
	TelegramChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "chat_id", Type: field.TypeInt64, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "is_group", Type: field.TypeBool},
	}
	// TelegramChatsTable holds the schema information for the "telegram_chats" table.
	TelegramChatsTable = &schema.Table{
		Name:       "telegram_chats",
		Columns:    TelegramChatsColumns,
		PrimaryKey: []*schema.Column{TelegramChatsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt64},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"telegram", "discord"}},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin"}, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// AddressTrackerChainProposalsColumns holds the columns for the "address_tracker_chain_proposals" table.
	AddressTrackerChainProposalsColumns = []*schema.Column{
		{Name: "address_tracker_id", Type: field.TypeInt},
		{Name: "chain_proposal_id", Type: field.TypeInt},
	}
	// AddressTrackerChainProposalsTable holds the schema information for the "address_tracker_chain_proposals" table.
	AddressTrackerChainProposalsTable = &schema.Table{
		Name:       "address_tracker_chain_proposals",
		Columns:    AddressTrackerChainProposalsColumns,
		PrimaryKey: []*schema.Column{AddressTrackerChainProposalsColumns[0], AddressTrackerChainProposalsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "address_tracker_chain_proposals_address_tracker_id",
				Columns:    []*schema.Column{AddressTrackerChainProposalsColumns[0]},
				RefColumns: []*schema.Column{AddressTrackersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "address_tracker_chain_proposals_chain_proposal_id",
				Columns:    []*schema.Column{AddressTrackerChainProposalsColumns[1]},
				RefColumns: []*schema.Column{ChainProposalsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordChannelUsersColumns holds the columns for the "discord_channel_users" table.
	DiscordChannelUsersColumns = []*schema.Column{
		{Name: "discord_channel_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// DiscordChannelUsersTable holds the schema information for the "discord_channel_users" table.
	DiscordChannelUsersTable = &schema.Table{
		Name:       "discord_channel_users",
		Columns:    DiscordChannelUsersColumns,
		PrimaryKey: []*schema.Column{DiscordChannelUsersColumns[0], DiscordChannelUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_channel_users_discord_channel_id",
				Columns:    []*schema.Column{DiscordChannelUsersColumns[0]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_channel_users_user_id",
				Columns:    []*schema.Column{DiscordChannelUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordChannelContractsColumns holds the columns for the "discord_channel_contracts" table.
	DiscordChannelContractsColumns = []*schema.Column{
		{Name: "discord_channel_id", Type: field.TypeInt},
		{Name: "contract_id", Type: field.TypeInt},
	}
	// DiscordChannelContractsTable holds the schema information for the "discord_channel_contracts" table.
	DiscordChannelContractsTable = &schema.Table{
		Name:       "discord_channel_contracts",
		Columns:    DiscordChannelContractsColumns,
		PrimaryKey: []*schema.Column{DiscordChannelContractsColumns[0], DiscordChannelContractsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_channel_contracts_discord_channel_id",
				Columns:    []*schema.Column{DiscordChannelContractsColumns[0]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_channel_contracts_contract_id",
				Columns:    []*schema.Column{DiscordChannelContractsColumns[1]},
				RefColumns: []*schema.Column{ContractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DiscordChannelChainsColumns holds the columns for the "discord_channel_chains" table.
	DiscordChannelChainsColumns = []*schema.Column{
		{Name: "discord_channel_id", Type: field.TypeInt},
		{Name: "chain_id", Type: field.TypeInt},
	}
	// DiscordChannelChainsTable holds the schema information for the "discord_channel_chains" table.
	DiscordChannelChainsTable = &schema.Table{
		Name:       "discord_channel_chains",
		Columns:    DiscordChannelChainsColumns,
		PrimaryKey: []*schema.Column{DiscordChannelChainsColumns[0], DiscordChannelChainsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "discord_channel_chains_discord_channel_id",
				Columns:    []*schema.Column{DiscordChannelChainsColumns[0]},
				RefColumns: []*schema.Column{DiscordChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "discord_channel_chains_chain_id",
				Columns:    []*schema.Column{DiscordChannelChainsColumns[1]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TelegramChatUsersColumns holds the columns for the "telegram_chat_users" table.
	TelegramChatUsersColumns = []*schema.Column{
		{Name: "telegram_chat_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TelegramChatUsersTable holds the schema information for the "telegram_chat_users" table.
	TelegramChatUsersTable = &schema.Table{
		Name:       "telegram_chat_users",
		Columns:    TelegramChatUsersColumns,
		PrimaryKey: []*schema.Column{TelegramChatUsersColumns[0], TelegramChatUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "telegram_chat_users_telegram_chat_id",
				Columns:    []*schema.Column{TelegramChatUsersColumns[0]},
				RefColumns: []*schema.Column{TelegramChatsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "telegram_chat_users_user_id",
				Columns:    []*schema.Column{TelegramChatUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TelegramChatContractsColumns holds the columns for the "telegram_chat_contracts" table.
	TelegramChatContractsColumns = []*schema.Column{
		{Name: "telegram_chat_id", Type: field.TypeInt},
		{Name: "contract_id", Type: field.TypeInt},
	}
	// TelegramChatContractsTable holds the schema information for the "telegram_chat_contracts" table.
	TelegramChatContractsTable = &schema.Table{
		Name:       "telegram_chat_contracts",
		Columns:    TelegramChatContractsColumns,
		PrimaryKey: []*schema.Column{TelegramChatContractsColumns[0], TelegramChatContractsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "telegram_chat_contracts_telegram_chat_id",
				Columns:    []*schema.Column{TelegramChatContractsColumns[0]},
				RefColumns: []*schema.Column{TelegramChatsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "telegram_chat_contracts_contract_id",
				Columns:    []*schema.Column{TelegramChatContractsColumns[1]},
				RefColumns: []*schema.Column{ContractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TelegramChatChainsColumns holds the columns for the "telegram_chat_chains" table.
	TelegramChatChainsColumns = []*schema.Column{
		{Name: "telegram_chat_id", Type: field.TypeInt},
		{Name: "chain_id", Type: field.TypeInt},
	}
	// TelegramChatChainsTable holds the schema information for the "telegram_chat_chains" table.
	TelegramChatChainsTable = &schema.Table{
		Name:       "telegram_chat_chains",
		Columns:    TelegramChatChainsColumns,
		PrimaryKey: []*schema.Column{TelegramChatChainsColumns[0], TelegramChatChainsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "telegram_chat_chains_telegram_chat_id",
				Columns:    []*schema.Column{TelegramChatChainsColumns[0]},
				RefColumns: []*schema.Column{TelegramChatsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "telegram_chat_chains_chain_id",
				Columns:    []*schema.Column{TelegramChatChainsColumns[1]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressTrackersTable,
		ChainsTable,
		ChainProposalsTable,
		ContractsTable,
		ContractProposalsTable,
		DiscordChannelsTable,
		TelegramChatsTable,
		UsersTable,
		AddressTrackerChainProposalsTable,
		DiscordChannelUsersTable,
		DiscordChannelContractsTable,
		DiscordChannelChainsTable,
		TelegramChatUsersTable,
		TelegramChatContractsTable,
		TelegramChatChainsTable,
	}
)

func init() {
	AddressTrackersTable.ForeignKeys[0].RefTable = ChainsTable
	AddressTrackersTable.ForeignKeys[1].RefTable = DiscordChannelsTable
	AddressTrackersTable.ForeignKeys[2].RefTable = TelegramChatsTable
	ChainProposalsTable.ForeignKeys[0].RefTable = ChainsTable
	ContractProposalsTable.ForeignKeys[0].RefTable = ContractsTable
	AddressTrackerChainProposalsTable.ForeignKeys[0].RefTable = AddressTrackersTable
	AddressTrackerChainProposalsTable.ForeignKeys[1].RefTable = ChainProposalsTable
	DiscordChannelUsersTable.ForeignKeys[0].RefTable = DiscordChannelsTable
	DiscordChannelUsersTable.ForeignKeys[1].RefTable = UsersTable
	DiscordChannelContractsTable.ForeignKeys[0].RefTable = DiscordChannelsTable
	DiscordChannelContractsTable.ForeignKeys[1].RefTable = ContractsTable
	DiscordChannelChainsTable.ForeignKeys[0].RefTable = DiscordChannelsTable
	DiscordChannelChainsTable.ForeignKeys[1].RefTable = ChainsTable
	TelegramChatUsersTable.ForeignKeys[0].RefTable = TelegramChatsTable
	TelegramChatUsersTable.ForeignKeys[1].RefTable = UsersTable
	TelegramChatContractsTable.ForeignKeys[0].RefTable = TelegramChatsTable
	TelegramChatContractsTable.ForeignKeys[1].RefTable = ContractsTable
	TelegramChatChainsTable.ForeignKeys[0].RefTable = TelegramChatsTable
	TelegramChatChainsTable.ForeignKeys[1].RefTable = ChainsTable
}
