// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-notifier/ent/chain"
	"github.com/shifty11/cosmos-notifier/ent/chainproposal"
	"github.com/shifty11/cosmos-notifier/ent/predicate"
)

// ChainProposalQuery is the builder for querying ChainProposal entities.
type ChainProposalQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ChainProposal
	withChain  *ChainQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChainProposalQuery builder.
func (cpq *ChainProposalQuery) Where(ps ...predicate.ChainProposal) *ChainProposalQuery {
	cpq.predicates = append(cpq.predicates, ps...)
	return cpq
}

// Limit adds a limit step to the query.
func (cpq *ChainProposalQuery) Limit(limit int) *ChainProposalQuery {
	cpq.limit = &limit
	return cpq
}

// Offset adds an offset step to the query.
func (cpq *ChainProposalQuery) Offset(offset int) *ChainProposalQuery {
	cpq.offset = &offset
	return cpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cpq *ChainProposalQuery) Unique(unique bool) *ChainProposalQuery {
	cpq.unique = &unique
	return cpq
}

// Order adds an order step to the query.
func (cpq *ChainProposalQuery) Order(o ...OrderFunc) *ChainProposalQuery {
	cpq.order = append(cpq.order, o...)
	return cpq
}

// QueryChain chains the current query on the "chain" edge.
func (cpq *ChainProposalQuery) QueryChain() *ChainQuery {
	query := &ChainQuery{config: cpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chainproposal.Table, chainproposal.FieldID, selector),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chainproposal.ChainTable, chainproposal.ChainColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChainProposal entity from the query.
// Returns a *NotFoundError when no ChainProposal was found.
func (cpq *ChainProposalQuery) First(ctx context.Context) (*ChainProposal, error) {
	nodes, err := cpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{chainproposal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cpq *ChainProposalQuery) FirstX(ctx context.Context) *ChainProposal {
	node, err := cpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChainProposal ID from the query.
// Returns a *NotFoundError when no ChainProposal ID was found.
func (cpq *ChainProposalQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{chainproposal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cpq *ChainProposalQuery) FirstIDX(ctx context.Context) int {
	id, err := cpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChainProposal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChainProposal entity is found.
// Returns a *NotFoundError when no ChainProposal entities are found.
func (cpq *ChainProposalQuery) Only(ctx context.Context) (*ChainProposal, error) {
	nodes, err := cpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{chainproposal.Label}
	default:
		return nil, &NotSingularError{chainproposal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cpq *ChainProposalQuery) OnlyX(ctx context.Context) *ChainProposal {
	node, err := cpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChainProposal ID in the query.
// Returns a *NotSingularError when more than one ChainProposal ID is found.
// Returns a *NotFoundError when no entities are found.
func (cpq *ChainProposalQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{chainproposal.Label}
	default:
		err = &NotSingularError{chainproposal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cpq *ChainProposalQuery) OnlyIDX(ctx context.Context) int {
	id, err := cpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChainProposals.
func (cpq *ChainProposalQuery) All(ctx context.Context) ([]*ChainProposal, error) {
	if err := cpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cpq *ChainProposalQuery) AllX(ctx context.Context) []*ChainProposal {
	nodes, err := cpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChainProposal IDs.
func (cpq *ChainProposalQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cpq.Select(chainproposal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cpq *ChainProposalQuery) IDsX(ctx context.Context) []int {
	ids, err := cpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cpq *ChainProposalQuery) Count(ctx context.Context) (int, error) {
	if err := cpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cpq *ChainProposalQuery) CountX(ctx context.Context) int {
	count, err := cpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cpq *ChainProposalQuery) Exist(ctx context.Context) (bool, error) {
	if err := cpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cpq *ChainProposalQuery) ExistX(ctx context.Context) bool {
	exist, err := cpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChainProposalQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cpq *ChainProposalQuery) Clone() *ChainProposalQuery {
	if cpq == nil {
		return nil
	}
	return &ChainProposalQuery{
		config:     cpq.config,
		limit:      cpq.limit,
		offset:     cpq.offset,
		order:      append([]OrderFunc{}, cpq.order...),
		predicates: append([]predicate.ChainProposal{}, cpq.predicates...),
		withChain:  cpq.withChain.Clone(),
		// clone intermediate query.
		sql:    cpq.sql.Clone(),
		path:   cpq.path,
		unique: cpq.unique,
	}
}

// WithChain tells the query-builder to eager-load the nodes that are connected to
// the "chain" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *ChainProposalQuery) WithChain(opts ...func(*ChainQuery)) *ChainProposalQuery {
	query := &ChainQuery{config: cpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cpq.withChain = query
	return cpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChainProposal.Query().
//		GroupBy(chainproposal.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cpq *ChainProposalQuery) GroupBy(field string, fields ...string) *ChainProposalGroupBy {
	grbuild := &ChainProposalGroupBy{config: cpq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cpq.sqlQuery(ctx), nil
	}
	grbuild.label = chainproposal.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ChainProposal.Query().
//		Select(chainproposal.FieldCreateTime).
//		Scan(ctx, &v)
func (cpq *ChainProposalQuery) Select(fields ...string) *ChainProposalSelect {
	cpq.fields = append(cpq.fields, fields...)
	selbuild := &ChainProposalSelect{ChainProposalQuery: cpq}
	selbuild.label = chainproposal.Label
	selbuild.flds, selbuild.scan = &cpq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ChainProposalSelect configured with the given aggregations.
func (cpq *ChainProposalQuery) Aggregate(fns ...AggregateFunc) *ChainProposalSelect {
	return cpq.Select().Aggregate(fns...)
}

func (cpq *ChainProposalQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cpq.fields {
		if !chainproposal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cpq.path != nil {
		prev, err := cpq.path(ctx)
		if err != nil {
			return err
		}
		cpq.sql = prev
	}
	return nil
}

func (cpq *ChainProposalQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChainProposal, error) {
	var (
		nodes       = []*ChainProposal{}
		withFKs     = cpq.withFKs
		_spec       = cpq.querySpec()
		loadedTypes = [1]bool{
			cpq.withChain != nil,
		}
	)
	if cpq.withChain != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, chainproposal.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChainProposal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChainProposal{config: cpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cpq.withChain; query != nil {
		if err := cpq.loadChain(ctx, query, nodes, nil,
			func(n *ChainProposal, e *Chain) { n.Edges.Chain = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cpq *ChainProposalQuery) loadChain(ctx context.Context, query *ChainQuery, nodes []*ChainProposal, init func(*ChainProposal), assign func(*ChainProposal, *Chain)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ChainProposal)
	for i := range nodes {
		if nodes[i].chain_chain_proposals == nil {
			continue
		}
		fk := *nodes[i].chain_chain_proposals
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(chain.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "chain_chain_proposals" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cpq *ChainProposalQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cpq.querySpec()
	_spec.Node.Columns = cpq.fields
	if len(cpq.fields) > 0 {
		_spec.Unique = cpq.unique != nil && *cpq.unique
	}
	return sqlgraph.CountNodes(ctx, cpq.driver, _spec)
}

func (cpq *ChainProposalQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cpq *ChainProposalQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chainproposal.Table,
			Columns: chainproposal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chainproposal.FieldID,
			},
		},
		From:   cpq.sql,
		Unique: true,
	}
	if unique := cpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chainproposal.FieldID)
		for i := range fields {
			if fields[i] != chainproposal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cpq *ChainProposalQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cpq.driver.Dialect())
	t1 := builder.Table(chainproposal.Table)
	columns := cpq.fields
	if len(columns) == 0 {
		columns = chainproposal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cpq.sql != nil {
		selector = cpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cpq.unique != nil && *cpq.unique {
		selector.Distinct()
	}
	for _, p := range cpq.predicates {
		p(selector)
	}
	for _, p := range cpq.order {
		p(selector)
	}
	if offset := cpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ChainProposalGroupBy is the group-by builder for ChainProposal entities.
type ChainProposalGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cpgb *ChainProposalGroupBy) Aggregate(fns ...AggregateFunc) *ChainProposalGroupBy {
	cpgb.fns = append(cpgb.fns, fns...)
	return cpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cpgb *ChainProposalGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cpgb.path(ctx)
	if err != nil {
		return err
	}
	cpgb.sql = query
	return cpgb.sqlScan(ctx, v)
}

func (cpgb *ChainProposalGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cpgb.fields {
		if !chainproposal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cpgb *ChainProposalGroupBy) sqlQuery() *sql.Selector {
	selector := cpgb.sql.Select()
	aggregation := make([]string, 0, len(cpgb.fns))
	for _, fn := range cpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cpgb.fields)+len(cpgb.fns))
		for _, f := range cpgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cpgb.fields...)...)
}

// ChainProposalSelect is the builder for selecting fields of ChainProposal entities.
type ChainProposalSelect struct {
	*ChainProposalQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cps *ChainProposalSelect) Aggregate(fns ...AggregateFunc) *ChainProposalSelect {
	cps.fns = append(cps.fns, fns...)
	return cps
}

// Scan applies the selector query and scans the result into the given value.
func (cps *ChainProposalSelect) Scan(ctx context.Context, v any) error {
	if err := cps.prepareQuery(ctx); err != nil {
		return err
	}
	cps.sql = cps.ChainProposalQuery.sqlQuery(ctx)
	return cps.sqlScan(ctx, v)
}

func (cps *ChainProposalSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(cps.fns))
	for _, fn := range cps.fns {
		aggregation = append(aggregation, fn(cps.sql))
	}
	switch n := len(*cps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		cps.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		cps.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := cps.sql.Query()
	if err := cps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
