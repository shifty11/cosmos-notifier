// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/shifty11/cosmos-notifier/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shifty11/cosmos-notifier/ent/addresstracker"
	"github.com/shifty11/cosmos-notifier/ent/chain"
	"github.com/shifty11/cosmos-notifier/ent/chainproposal"
	"github.com/shifty11/cosmos-notifier/ent/contract"
	"github.com/shifty11/cosmos-notifier/ent/contractproposal"
	"github.com/shifty11/cosmos-notifier/ent/discordchannel"
	"github.com/shifty11/cosmos-notifier/ent/telegramchat"
	"github.com/shifty11/cosmos-notifier/ent/user"
	"github.com/shifty11/cosmos-notifier/ent/validator"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AddressTracker is the client for interacting with the AddressTracker builders.
	AddressTracker *AddressTrackerClient
	// Chain is the client for interacting with the Chain builders.
	Chain *ChainClient
	// ChainProposal is the client for interacting with the ChainProposal builders.
	ChainProposal *ChainProposalClient
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// ContractProposal is the client for interacting with the ContractProposal builders.
	ContractProposal *ContractProposalClient
	// DiscordChannel is the client for interacting with the DiscordChannel builders.
	DiscordChannel *DiscordChannelClient
	// TelegramChat is the client for interacting with the TelegramChat builders.
	TelegramChat *TelegramChatClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Validator is the client for interacting with the Validator builders.
	Validator *ValidatorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AddressTracker = NewAddressTrackerClient(c.config)
	c.Chain = NewChainClient(c.config)
	c.ChainProposal = NewChainProposalClient(c.config)
	c.Contract = NewContractClient(c.config)
	c.ContractProposal = NewContractProposalClient(c.config)
	c.DiscordChannel = NewDiscordChannelClient(c.config)
	c.TelegramChat = NewTelegramChatClient(c.config)
	c.User = NewUserClient(c.config)
	c.Validator = NewValidatorClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		AddressTracker:   NewAddressTrackerClient(cfg),
		Chain:            NewChainClient(cfg),
		ChainProposal:    NewChainProposalClient(cfg),
		Contract:         NewContractClient(cfg),
		ContractProposal: NewContractProposalClient(cfg),
		DiscordChannel:   NewDiscordChannelClient(cfg),
		TelegramChat:     NewTelegramChatClient(cfg),
		User:             NewUserClient(cfg),
		Validator:        NewValidatorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		AddressTracker:   NewAddressTrackerClient(cfg),
		Chain:            NewChainClient(cfg),
		ChainProposal:    NewChainProposalClient(cfg),
		Contract:         NewContractClient(cfg),
		ContractProposal: NewContractProposalClient(cfg),
		DiscordChannel:   NewDiscordChannelClient(cfg),
		TelegramChat:     NewTelegramChatClient(cfg),
		User:             NewUserClient(cfg),
		Validator:        NewValidatorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AddressTracker.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AddressTracker, c.Chain, c.ChainProposal, c.Contract, c.ContractProposal,
		c.DiscordChannel, c.TelegramChat, c.User, c.Validator,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AddressTracker, c.Chain, c.ChainProposal, c.Contract, c.ContractProposal,
		c.DiscordChannel, c.TelegramChat, c.User, c.Validator,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddressTrackerMutation:
		return c.AddressTracker.mutate(ctx, m)
	case *ChainMutation:
		return c.Chain.mutate(ctx, m)
	case *ChainProposalMutation:
		return c.ChainProposal.mutate(ctx, m)
	case *ContractMutation:
		return c.Contract.mutate(ctx, m)
	case *ContractProposalMutation:
		return c.ContractProposal.mutate(ctx, m)
	case *DiscordChannelMutation:
		return c.DiscordChannel.mutate(ctx, m)
	case *TelegramChatMutation:
		return c.TelegramChat.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *ValidatorMutation:
		return c.Validator.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AddressTrackerClient is a client for the AddressTracker schema.
type AddressTrackerClient struct {
	config
}

// NewAddressTrackerClient returns a client for the AddressTracker from the given config.
func NewAddressTrackerClient(c config) *AddressTrackerClient {
	return &AddressTrackerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `addresstracker.Hooks(f(g(h())))`.
func (c *AddressTrackerClient) Use(hooks ...Hook) {
	c.hooks.AddressTracker = append(c.hooks.AddressTracker, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `addresstracker.Intercept(f(g(h())))`.
func (c *AddressTrackerClient) Intercept(interceptors ...Interceptor) {
	c.inters.AddressTracker = append(c.inters.AddressTracker, interceptors...)
}

// Create returns a builder for creating a AddressTracker entity.
func (c *AddressTrackerClient) Create() *AddressTrackerCreate {
	mutation := newAddressTrackerMutation(c.config, OpCreate)
	return &AddressTrackerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AddressTracker entities.
func (c *AddressTrackerClient) CreateBulk(builders ...*AddressTrackerCreate) *AddressTrackerCreateBulk {
	return &AddressTrackerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AddressTracker.
func (c *AddressTrackerClient) Update() *AddressTrackerUpdate {
	mutation := newAddressTrackerMutation(c.config, OpUpdate)
	return &AddressTrackerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressTrackerClient) UpdateOne(at *AddressTracker) *AddressTrackerUpdateOne {
	mutation := newAddressTrackerMutation(c.config, OpUpdateOne, withAddressTracker(at))
	return &AddressTrackerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressTrackerClient) UpdateOneID(id int) *AddressTrackerUpdateOne {
	mutation := newAddressTrackerMutation(c.config, OpUpdateOne, withAddressTrackerID(id))
	return &AddressTrackerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AddressTracker.
func (c *AddressTrackerClient) Delete() *AddressTrackerDelete {
	mutation := newAddressTrackerMutation(c.config, OpDelete)
	return &AddressTrackerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressTrackerClient) DeleteOne(at *AddressTracker) *AddressTrackerDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressTrackerClient) DeleteOneID(id int) *AddressTrackerDeleteOne {
	builder := c.Delete().Where(addresstracker.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressTrackerDeleteOne{builder}
}

// Query returns a query builder for AddressTracker.
func (c *AddressTrackerClient) Query() *AddressTrackerQuery {
	return &AddressTrackerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddressTracker},
		inters: c.Interceptors(),
	}
}

// Get returns a AddressTracker entity by its id.
func (c *AddressTrackerClient) Get(ctx context.Context, id int) (*AddressTracker, error) {
	return c.Query().Where(addresstracker.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressTrackerClient) GetX(ctx context.Context, id int) *AddressTracker {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a AddressTracker.
func (c *AddressTrackerClient) QueryChain(at *AddressTracker) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addresstracker.Table, addresstracker.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addresstracker.ChainTable, addresstracker.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscordChannel queries the discord_channel edge of a AddressTracker.
func (c *AddressTrackerClient) QueryDiscordChannel(at *AddressTracker) *DiscordChannelQuery {
	query := (&DiscordChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addresstracker.Table, addresstracker.FieldID, id),
			sqlgraph.To(discordchannel.Table, discordchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addresstracker.DiscordChannelTable, addresstracker.DiscordChannelColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTelegramChat queries the telegram_chat edge of a AddressTracker.
func (c *AddressTrackerClient) QueryTelegramChat(at *AddressTracker) *TelegramChatQuery {
	query := (&TelegramChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addresstracker.Table, addresstracker.FieldID, id),
			sqlgraph.To(telegramchat.Table, telegramchat.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addresstracker.TelegramChatTable, addresstracker.TelegramChatColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChainProposals queries the chain_proposals edge of a AddressTracker.
func (c *AddressTrackerClient) QueryChainProposals(at *AddressTracker) *ChainProposalQuery {
	query := (&ChainProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addresstracker.Table, addresstracker.FieldID, id),
			sqlgraph.To(chainproposal.Table, chainproposal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, addresstracker.ChainProposalsTable, addresstracker.ChainProposalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidator queries the validator edge of a AddressTracker.
func (c *AddressTrackerClient) QueryValidator(at *AddressTracker) *ValidatorQuery {
	query := (&ValidatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addresstracker.Table, addresstracker.FieldID, id),
			sqlgraph.To(validator.Table, validator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addresstracker.ValidatorTable, addresstracker.ValidatorColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressTrackerClient) Hooks() []Hook {
	return c.hooks.AddressTracker
}

// Interceptors returns the client interceptors.
func (c *AddressTrackerClient) Interceptors() []Interceptor {
	return c.inters.AddressTracker
}

func (c *AddressTrackerClient) mutate(ctx context.Context, m *AddressTrackerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressTrackerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressTrackerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressTrackerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressTrackerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AddressTracker mutation op: %q", m.Op())
	}
}

// ChainClient is a client for the Chain schema.
type ChainClient struct {
	config
}

// NewChainClient returns a client for the Chain from the given config.
func NewChainClient(c config) *ChainClient {
	return &ChainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chain.Hooks(f(g(h())))`.
func (c *ChainClient) Use(hooks ...Hook) {
	c.hooks.Chain = append(c.hooks.Chain, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chain.Intercept(f(g(h())))`.
func (c *ChainClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chain = append(c.inters.Chain, interceptors...)
}

// Create returns a builder for creating a Chain entity.
func (c *ChainClient) Create() *ChainCreate {
	mutation := newChainMutation(c.config, OpCreate)
	return &ChainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chain entities.
func (c *ChainClient) CreateBulk(builders ...*ChainCreate) *ChainCreateBulk {
	return &ChainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chain.
func (c *ChainClient) Update() *ChainUpdate {
	mutation := newChainMutation(c.config, OpUpdate)
	return &ChainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChainClient) UpdateOne(ch *Chain) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChain(ch))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChainClient) UpdateOneID(id int) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChainID(id))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chain.
func (c *ChainClient) Delete() *ChainDelete {
	mutation := newChainMutation(c.config, OpDelete)
	return &ChainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChainClient) DeleteOne(ch *Chain) *ChainDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChainClient) DeleteOneID(id int) *ChainDeleteOne {
	builder := c.Delete().Where(chain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChainDeleteOne{builder}
}

// Query returns a query builder for Chain.
func (c *ChainClient) Query() *ChainQuery {
	return &ChainQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChain},
		inters: c.Interceptors(),
	}
}

// Get returns a Chain entity by its id.
func (c *ChainClient) Get(ctx context.Context, id int) (*Chain, error) {
	return c.Query().Where(chain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChainClient) GetX(ctx context.Context, id int) *Chain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChainProposals queries the chain_proposals edge of a Chain.
func (c *ChainClient) QueryChainProposals(ch *Chain) *ChainProposalQuery {
	query := (&ChainProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(chainproposal.Table, chainproposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ChainProposalsTable, chain.ChainProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTelegramChats queries the telegram_chats edge of a Chain.
func (c *ChainClient) QueryTelegramChats(ch *Chain) *TelegramChatQuery {
	query := (&TelegramChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(telegramchat.Table, telegramchat.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, chain.TelegramChatsTable, chain.TelegramChatsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscordChannels queries the discord_channels edge of a Chain.
func (c *ChainClient) QueryDiscordChannels(ch *Chain) *DiscordChannelQuery {
	query := (&DiscordChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(discordchannel.Table, discordchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, chain.DiscordChannelsTable, chain.DiscordChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressTrackers queries the address_trackers edge of a Chain.
func (c *ChainClient) QueryAddressTrackers(ch *Chain) *AddressTrackerQuery {
	query := (&AddressTrackerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(addresstracker.Table, addresstracker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.AddressTrackersTable, chain.AddressTrackersColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidators queries the validators edge of a Chain.
func (c *ChainClient) QueryValidators(ch *Chain) *ValidatorQuery {
	query := (&ValidatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(validator.Table, validator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ValidatorsTable, chain.ValidatorsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChainClient) Hooks() []Hook {
	return c.hooks.Chain
}

// Interceptors returns the client interceptors.
func (c *ChainClient) Interceptors() []Interceptor {
	return c.inters.Chain
}

func (c *ChainClient) mutate(ctx context.Context, m *ChainMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChainCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChainUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChainDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chain mutation op: %q", m.Op())
	}
}

// ChainProposalClient is a client for the ChainProposal schema.
type ChainProposalClient struct {
	config
}

// NewChainProposalClient returns a client for the ChainProposal from the given config.
func NewChainProposalClient(c config) *ChainProposalClient {
	return &ChainProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chainproposal.Hooks(f(g(h())))`.
func (c *ChainProposalClient) Use(hooks ...Hook) {
	c.hooks.ChainProposal = append(c.hooks.ChainProposal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chainproposal.Intercept(f(g(h())))`.
func (c *ChainProposalClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChainProposal = append(c.inters.ChainProposal, interceptors...)
}

// Create returns a builder for creating a ChainProposal entity.
func (c *ChainProposalClient) Create() *ChainProposalCreate {
	mutation := newChainProposalMutation(c.config, OpCreate)
	return &ChainProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChainProposal entities.
func (c *ChainProposalClient) CreateBulk(builders ...*ChainProposalCreate) *ChainProposalCreateBulk {
	return &ChainProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChainProposal.
func (c *ChainProposalClient) Update() *ChainProposalUpdate {
	mutation := newChainProposalMutation(c.config, OpUpdate)
	return &ChainProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChainProposalClient) UpdateOne(cp *ChainProposal) *ChainProposalUpdateOne {
	mutation := newChainProposalMutation(c.config, OpUpdateOne, withChainProposal(cp))
	return &ChainProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChainProposalClient) UpdateOneID(id int) *ChainProposalUpdateOne {
	mutation := newChainProposalMutation(c.config, OpUpdateOne, withChainProposalID(id))
	return &ChainProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChainProposal.
func (c *ChainProposalClient) Delete() *ChainProposalDelete {
	mutation := newChainProposalMutation(c.config, OpDelete)
	return &ChainProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChainProposalClient) DeleteOne(cp *ChainProposal) *ChainProposalDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChainProposalClient) DeleteOneID(id int) *ChainProposalDeleteOne {
	builder := c.Delete().Where(chainproposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChainProposalDeleteOne{builder}
}

// Query returns a query builder for ChainProposal.
func (c *ChainProposalClient) Query() *ChainProposalQuery {
	return &ChainProposalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChainProposal},
		inters: c.Interceptors(),
	}
}

// Get returns a ChainProposal entity by its id.
func (c *ChainProposalClient) Get(ctx context.Context, id int) (*ChainProposal, error) {
	return c.Query().Where(chainproposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChainProposalClient) GetX(ctx context.Context, id int) *ChainProposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a ChainProposal.
func (c *ChainProposalClient) QueryChain(cp *ChainProposal) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chainproposal.Table, chainproposal.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chainproposal.ChainTable, chainproposal.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressTracker queries the address_tracker edge of a ChainProposal.
func (c *ChainProposalClient) QueryAddressTracker(cp *ChainProposal) *AddressTrackerQuery {
	query := (&AddressTrackerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chainproposal.Table, chainproposal.FieldID, id),
			sqlgraph.To(addresstracker.Table, addresstracker.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, chainproposal.AddressTrackerTable, chainproposal.AddressTrackerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChainProposalClient) Hooks() []Hook {
	return c.hooks.ChainProposal
}

// Interceptors returns the client interceptors.
func (c *ChainProposalClient) Interceptors() []Interceptor {
	return c.inters.ChainProposal
}

func (c *ChainProposalClient) mutate(ctx context.Context, m *ChainProposalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChainProposalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChainProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChainProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChainProposalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChainProposal mutation op: %q", m.Op())
	}
}

// ContractClient is a client for the Contract schema.
type ContractClient struct {
	config
}

// NewContractClient returns a client for the Contract from the given config.
func NewContractClient(c config) *ContractClient {
	return &ContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contract.Hooks(f(g(h())))`.
func (c *ContractClient) Use(hooks ...Hook) {
	c.hooks.Contract = append(c.hooks.Contract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contract.Intercept(f(g(h())))`.
func (c *ContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contract = append(c.inters.Contract, interceptors...)
}

// Create returns a builder for creating a Contract entity.
func (c *ContractClient) Create() *ContractCreate {
	mutation := newContractMutation(c.config, OpCreate)
	return &ContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contract entities.
func (c *ContractClient) CreateBulk(builders ...*ContractCreate) *ContractCreateBulk {
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contract.
func (c *ContractClient) Update() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractClient) UpdateOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractClient) UpdateOneID(id int) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contract.
func (c *ContractClient) Delete() *ContractDelete {
	mutation := newContractMutation(c.config, OpDelete)
	return &ContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractClient) DeleteOne(co *Contract) *ContractDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractClient) DeleteOneID(id int) *ContractDeleteOne {
	builder := c.Delete().Where(contract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractDeleteOne{builder}
}

// Query returns a query builder for Contract.
func (c *ContractClient) Query() *ContractQuery {
	return &ContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContract},
		inters: c.Interceptors(),
	}
}

// Get returns a Contract entity by its id.
func (c *ContractClient) Get(ctx context.Context, id int) (*Contract, error) {
	return c.Query().Where(contract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractClient) GetX(ctx context.Context, id int) *Contract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProposals queries the proposals edge of a Contract.
func (c *ContractClient) QueryProposals(co *Contract) *ContractProposalQuery {
	query := (&ContractProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(contractproposal.Table, contractproposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contract.ProposalsTable, contract.ProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTelegramChats queries the telegram_chats edge of a Contract.
func (c *ContractClient) QueryTelegramChats(co *Contract) *TelegramChatQuery {
	query := (&TelegramChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(telegramchat.Table, telegramchat.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contract.TelegramChatsTable, contract.TelegramChatsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscordChannels queries the discord_channels edge of a Contract.
func (c *ContractClient) QueryDiscordChannels(co *Contract) *DiscordChannelQuery {
	query := (&DiscordChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(discordchannel.Table, discordchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contract.DiscordChannelsTable, contract.DiscordChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContractClient) Hooks() []Hook {
	return c.hooks.Contract
}

// Interceptors returns the client interceptors.
func (c *ContractClient) Interceptors() []Interceptor {
	return c.inters.Contract
}

func (c *ContractClient) mutate(ctx context.Context, m *ContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contract mutation op: %q", m.Op())
	}
}

// ContractProposalClient is a client for the ContractProposal schema.
type ContractProposalClient struct {
	config
}

// NewContractProposalClient returns a client for the ContractProposal from the given config.
func NewContractProposalClient(c config) *ContractProposalClient {
	return &ContractProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contractproposal.Hooks(f(g(h())))`.
func (c *ContractProposalClient) Use(hooks ...Hook) {
	c.hooks.ContractProposal = append(c.hooks.ContractProposal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contractproposal.Intercept(f(g(h())))`.
func (c *ContractProposalClient) Intercept(interceptors ...Interceptor) {
	c.inters.ContractProposal = append(c.inters.ContractProposal, interceptors...)
}

// Create returns a builder for creating a ContractProposal entity.
func (c *ContractProposalClient) Create() *ContractProposalCreate {
	mutation := newContractProposalMutation(c.config, OpCreate)
	return &ContractProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContractProposal entities.
func (c *ContractProposalClient) CreateBulk(builders ...*ContractProposalCreate) *ContractProposalCreateBulk {
	return &ContractProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContractProposal.
func (c *ContractProposalClient) Update() *ContractProposalUpdate {
	mutation := newContractProposalMutation(c.config, OpUpdate)
	return &ContractProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractProposalClient) UpdateOne(cp *ContractProposal) *ContractProposalUpdateOne {
	mutation := newContractProposalMutation(c.config, OpUpdateOne, withContractProposal(cp))
	return &ContractProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractProposalClient) UpdateOneID(id int) *ContractProposalUpdateOne {
	mutation := newContractProposalMutation(c.config, OpUpdateOne, withContractProposalID(id))
	return &ContractProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContractProposal.
func (c *ContractProposalClient) Delete() *ContractProposalDelete {
	mutation := newContractProposalMutation(c.config, OpDelete)
	return &ContractProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractProposalClient) DeleteOne(cp *ContractProposal) *ContractProposalDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractProposalClient) DeleteOneID(id int) *ContractProposalDeleteOne {
	builder := c.Delete().Where(contractproposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractProposalDeleteOne{builder}
}

// Query returns a query builder for ContractProposal.
func (c *ContractProposalClient) Query() *ContractProposalQuery {
	return &ContractProposalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContractProposal},
		inters: c.Interceptors(),
	}
}

// Get returns a ContractProposal entity by its id.
func (c *ContractProposalClient) Get(ctx context.Context, id int) (*ContractProposal, error) {
	return c.Query().Where(contractproposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractProposalClient) GetX(ctx context.Context, id int) *ContractProposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContract queries the contract edge of a ContractProposal.
func (c *ContractProposalClient) QueryContract(cp *ContractProposal) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contractproposal.Table, contractproposal.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contractproposal.ContractTable, contractproposal.ContractColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContractProposalClient) Hooks() []Hook {
	return c.hooks.ContractProposal
}

// Interceptors returns the client interceptors.
func (c *ContractProposalClient) Interceptors() []Interceptor {
	return c.inters.ContractProposal
}

func (c *ContractProposalClient) mutate(ctx context.Context, m *ContractProposalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractProposalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractProposalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ContractProposal mutation op: %q", m.Op())
	}
}

// DiscordChannelClient is a client for the DiscordChannel schema.
type DiscordChannelClient struct {
	config
}

// NewDiscordChannelClient returns a client for the DiscordChannel from the given config.
func NewDiscordChannelClient(c config) *DiscordChannelClient {
	return &DiscordChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discordchannel.Hooks(f(g(h())))`.
func (c *DiscordChannelClient) Use(hooks ...Hook) {
	c.hooks.DiscordChannel = append(c.hooks.DiscordChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `discordchannel.Intercept(f(g(h())))`.
func (c *DiscordChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.DiscordChannel = append(c.inters.DiscordChannel, interceptors...)
}

// Create returns a builder for creating a DiscordChannel entity.
func (c *DiscordChannelClient) Create() *DiscordChannelCreate {
	mutation := newDiscordChannelMutation(c.config, OpCreate)
	return &DiscordChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscordChannel entities.
func (c *DiscordChannelClient) CreateBulk(builders ...*DiscordChannelCreate) *DiscordChannelCreateBulk {
	return &DiscordChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscordChannel.
func (c *DiscordChannelClient) Update() *DiscordChannelUpdate {
	mutation := newDiscordChannelMutation(c.config, OpUpdate)
	return &DiscordChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscordChannelClient) UpdateOne(dc *DiscordChannel) *DiscordChannelUpdateOne {
	mutation := newDiscordChannelMutation(c.config, OpUpdateOne, withDiscordChannel(dc))
	return &DiscordChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscordChannelClient) UpdateOneID(id int) *DiscordChannelUpdateOne {
	mutation := newDiscordChannelMutation(c.config, OpUpdateOne, withDiscordChannelID(id))
	return &DiscordChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscordChannel.
func (c *DiscordChannelClient) Delete() *DiscordChannelDelete {
	mutation := newDiscordChannelMutation(c.config, OpDelete)
	return &DiscordChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscordChannelClient) DeleteOne(dc *DiscordChannel) *DiscordChannelDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DiscordChannelClient) DeleteOneID(id int) *DiscordChannelDeleteOne {
	builder := c.Delete().Where(discordchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscordChannelDeleteOne{builder}
}

// Query returns a query builder for DiscordChannel.
func (c *DiscordChannelClient) Query() *DiscordChannelQuery {
	return &DiscordChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDiscordChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a DiscordChannel entity by its id.
func (c *DiscordChannelClient) Get(ctx context.Context, id int) (*DiscordChannel, error) {
	return c.Query().Where(discordchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscordChannelClient) GetX(ctx context.Context, id int) *DiscordChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryUsers(dc *DiscordChannel) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, discordchannel.UsersTable, discordchannel.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryContracts(dc *DiscordChannel) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, discordchannel.ContractsTable, discordchannel.ContractsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChains queries the chains edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryChains(dc *DiscordChannel) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, discordchannel.ChainsTable, discordchannel.ChainsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressTrackers queries the address_trackers edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryAddressTrackers(dc *DiscordChannel) *AddressTrackerQuery {
	query := (&AddressTrackerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(addresstracker.Table, addresstracker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discordchannel.AddressTrackersTable, discordchannel.AddressTrackersColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidators queries the validators edge of a DiscordChannel.
func (c *DiscordChannelClient) QueryValidators(dc *DiscordChannel) *ValidatorQuery {
	query := (&ValidatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discordchannel.Table, discordchannel.FieldID, id),
			sqlgraph.To(validator.Table, validator.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, discordchannel.ValidatorsTable, discordchannel.ValidatorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscordChannelClient) Hooks() []Hook {
	return c.hooks.DiscordChannel
}

// Interceptors returns the client interceptors.
func (c *DiscordChannelClient) Interceptors() []Interceptor {
	return c.inters.DiscordChannel
}

func (c *DiscordChannelClient) mutate(ctx context.Context, m *DiscordChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DiscordChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DiscordChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DiscordChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DiscordChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DiscordChannel mutation op: %q", m.Op())
	}
}

// TelegramChatClient is a client for the TelegramChat schema.
type TelegramChatClient struct {
	config
}

// NewTelegramChatClient returns a client for the TelegramChat from the given config.
func NewTelegramChatClient(c config) *TelegramChatClient {
	return &TelegramChatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telegramchat.Hooks(f(g(h())))`.
func (c *TelegramChatClient) Use(hooks ...Hook) {
	c.hooks.TelegramChat = append(c.hooks.TelegramChat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telegramchat.Intercept(f(g(h())))`.
func (c *TelegramChatClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelegramChat = append(c.inters.TelegramChat, interceptors...)
}

// Create returns a builder for creating a TelegramChat entity.
func (c *TelegramChatClient) Create() *TelegramChatCreate {
	mutation := newTelegramChatMutation(c.config, OpCreate)
	return &TelegramChatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelegramChat entities.
func (c *TelegramChatClient) CreateBulk(builders ...*TelegramChatCreate) *TelegramChatCreateBulk {
	return &TelegramChatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelegramChat.
func (c *TelegramChatClient) Update() *TelegramChatUpdate {
	mutation := newTelegramChatMutation(c.config, OpUpdate)
	return &TelegramChatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelegramChatClient) UpdateOne(tc *TelegramChat) *TelegramChatUpdateOne {
	mutation := newTelegramChatMutation(c.config, OpUpdateOne, withTelegramChat(tc))
	return &TelegramChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelegramChatClient) UpdateOneID(id int) *TelegramChatUpdateOne {
	mutation := newTelegramChatMutation(c.config, OpUpdateOne, withTelegramChatID(id))
	return &TelegramChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelegramChat.
func (c *TelegramChatClient) Delete() *TelegramChatDelete {
	mutation := newTelegramChatMutation(c.config, OpDelete)
	return &TelegramChatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelegramChatClient) DeleteOne(tc *TelegramChat) *TelegramChatDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelegramChatClient) DeleteOneID(id int) *TelegramChatDeleteOne {
	builder := c.Delete().Where(telegramchat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelegramChatDeleteOne{builder}
}

// Query returns a query builder for TelegramChat.
func (c *TelegramChatClient) Query() *TelegramChatQuery {
	return &TelegramChatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelegramChat},
		inters: c.Interceptors(),
	}
}

// Get returns a TelegramChat entity by its id.
func (c *TelegramChatClient) Get(ctx context.Context, id int) (*TelegramChat, error) {
	return c.Query().Where(telegramchat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelegramChatClient) GetX(ctx context.Context, id int) *TelegramChat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a TelegramChat.
func (c *TelegramChatClient) QueryUsers(tc *TelegramChat) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, telegramchat.UsersTable, telegramchat.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a TelegramChat.
func (c *TelegramChatClient) QueryContracts(tc *TelegramChat) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, telegramchat.ContractsTable, telegramchat.ContractsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChains queries the chains edge of a TelegramChat.
func (c *TelegramChatClient) QueryChains(tc *TelegramChat) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, telegramchat.ChainsTable, telegramchat.ChainsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressTrackers queries the address_trackers edge of a TelegramChat.
func (c *TelegramChatClient) QueryAddressTrackers(tc *TelegramChat) *AddressTrackerQuery {
	query := (&AddressTrackerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(addresstracker.Table, addresstracker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, telegramchat.AddressTrackersTable, telegramchat.AddressTrackersColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidators queries the validators edge of a TelegramChat.
func (c *TelegramChatClient) QueryValidators(tc *TelegramChat) *ValidatorQuery {
	query := (&ValidatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telegramchat.Table, telegramchat.FieldID, id),
			sqlgraph.To(validator.Table, validator.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, telegramchat.ValidatorsTable, telegramchat.ValidatorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TelegramChatClient) Hooks() []Hook {
	return c.hooks.TelegramChat
}

// Interceptors returns the client interceptors.
func (c *TelegramChatClient) Interceptors() []Interceptor {
	return c.inters.TelegramChat
}

func (c *TelegramChatClient) mutate(ctx context.Context, m *TelegramChatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelegramChatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelegramChatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelegramChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelegramChatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelegramChat mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTelegramChats queries the telegram_chats edge of a User.
func (c *UserClient) QueryTelegramChats(u *User) *TelegramChatQuery {
	query := (&TelegramChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(telegramchat.Table, telegramchat.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.TelegramChatsTable, user.TelegramChatsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscordChannels queries the discord_channels edge of a User.
func (c *UserClient) QueryDiscordChannels(u *User) *DiscordChannelQuery {
	query := (&DiscordChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(discordchannel.Table, discordchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.DiscordChannelsTable, user.DiscordChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// ValidatorClient is a client for the Validator schema.
type ValidatorClient struct {
	config
}

// NewValidatorClient returns a client for the Validator from the given config.
func NewValidatorClient(c config) *ValidatorClient {
	return &ValidatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `validator.Hooks(f(g(h())))`.
func (c *ValidatorClient) Use(hooks ...Hook) {
	c.hooks.Validator = append(c.hooks.Validator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `validator.Intercept(f(g(h())))`.
func (c *ValidatorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Validator = append(c.inters.Validator, interceptors...)
}

// Create returns a builder for creating a Validator entity.
func (c *ValidatorClient) Create() *ValidatorCreate {
	mutation := newValidatorMutation(c.config, OpCreate)
	return &ValidatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Validator entities.
func (c *ValidatorClient) CreateBulk(builders ...*ValidatorCreate) *ValidatorCreateBulk {
	return &ValidatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Validator.
func (c *ValidatorClient) Update() *ValidatorUpdate {
	mutation := newValidatorMutation(c.config, OpUpdate)
	return &ValidatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ValidatorClient) UpdateOne(v *Validator) *ValidatorUpdateOne {
	mutation := newValidatorMutation(c.config, OpUpdateOne, withValidator(v))
	return &ValidatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ValidatorClient) UpdateOneID(id int) *ValidatorUpdateOne {
	mutation := newValidatorMutation(c.config, OpUpdateOne, withValidatorID(id))
	return &ValidatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Validator.
func (c *ValidatorClient) Delete() *ValidatorDelete {
	mutation := newValidatorMutation(c.config, OpDelete)
	return &ValidatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ValidatorClient) DeleteOne(v *Validator) *ValidatorDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ValidatorClient) DeleteOneID(id int) *ValidatorDeleteOne {
	builder := c.Delete().Where(validator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ValidatorDeleteOne{builder}
}

// Query returns a query builder for Validator.
func (c *ValidatorClient) Query() *ValidatorQuery {
	return &ValidatorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeValidator},
		inters: c.Interceptors(),
	}
}

// Get returns a Validator entity by its id.
func (c *ValidatorClient) Get(ctx context.Context, id int) (*Validator, error) {
	return c.Query().Where(validator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ValidatorClient) GetX(ctx context.Context, id int) *Validator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a Validator.
func (c *ValidatorClient) QueryChain(v *Validator) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(validator.Table, validator.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, validator.ChainTable, validator.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressTrackers queries the address_trackers edge of a Validator.
func (c *ValidatorClient) QueryAddressTrackers(v *Validator) *AddressTrackerQuery {
	query := (&AddressTrackerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(validator.Table, validator.FieldID, id),
			sqlgraph.To(addresstracker.Table, addresstracker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, validator.AddressTrackersTable, validator.AddressTrackersColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTelegramChats queries the telegram_chats edge of a Validator.
func (c *ValidatorClient) QueryTelegramChats(v *Validator) *TelegramChatQuery {
	query := (&TelegramChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(validator.Table, validator.FieldID, id),
			sqlgraph.To(telegramchat.Table, telegramchat.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, validator.TelegramChatsTable, validator.TelegramChatsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscordChannels queries the discord_channels edge of a Validator.
func (c *ValidatorClient) QueryDiscordChannels(v *Validator) *DiscordChannelQuery {
	query := (&DiscordChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(validator.Table, validator.FieldID, id),
			sqlgraph.To(discordchannel.Table, discordchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, validator.DiscordChannelsTable, validator.DiscordChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ValidatorClient) Hooks() []Hook {
	return c.hooks.Validator
}

// Interceptors returns the client interceptors.
func (c *ValidatorClient) Interceptors() []Interceptor {
	return c.inters.Validator
}

func (c *ValidatorClient) mutate(ctx context.Context, m *ValidatorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ValidatorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ValidatorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ValidatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ValidatorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Validator mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AddressTracker, Chain, ChainProposal, Contract, ContractProposal,
		DiscordChannel, TelegramChat, User, Validator []ent.Hook
	}
	inters struct {
		AddressTracker, Chain, ChainProposal, Contract, ContractProposal,
		DiscordChannel, TelegramChat, User, Validator []ent.Interceptor
	}
)
