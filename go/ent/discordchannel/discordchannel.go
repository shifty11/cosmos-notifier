// Code generated by ent, DO NOT EDIT.

package discordchannel

import (
	"time"
)

const (
	// Label holds the string label denoting the discordchannel type in the database.
	Label = "discord_channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIsGroup holds the string denoting the is_group field in the database.
	FieldIsGroup = "is_group"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeContracts holds the string denoting the contracts edge name in mutations.
	EdgeContracts = "contracts"
	// EdgeChains holds the string denoting the chains edge name in mutations.
	EdgeChains = "chains"
	// EdgeAddressTrackers holds the string denoting the address_trackers edge name in mutations.
	EdgeAddressTrackers = "address_trackers"
	// EdgeValidators holds the string denoting the validators edge name in mutations.
	EdgeValidators = "validators"
	// Table holds the table name of the discordchannel in the database.
	Table = "discord_channels"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "discord_channel_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// ContractsTable is the table that holds the contracts relation/edge. The primary key declared below.
	ContractsTable = "discord_channel_contracts"
	// ContractsInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractsInverseTable = "contracts"
	// ChainsTable is the table that holds the chains relation/edge. The primary key declared below.
	ChainsTable = "discord_channel_chains"
	// ChainsInverseTable is the table name for the Chain entity.
	// It exists in this package in order to avoid circular dependency with the "chain" package.
	ChainsInverseTable = "chains"
	// AddressTrackersTable is the table that holds the address_trackers relation/edge.
	AddressTrackersTable = "address_trackers"
	// AddressTrackersInverseTable is the table name for the AddressTracker entity.
	// It exists in this package in order to avoid circular dependency with the "addresstracker" package.
	AddressTrackersInverseTable = "address_trackers"
	// AddressTrackersColumn is the table column denoting the address_trackers relation/edge.
	AddressTrackersColumn = "discord_channel_address_trackers"
	// ValidatorsTable is the table that holds the validators relation/edge. The primary key declared below.
	ValidatorsTable = "validator_discord_channels"
	// ValidatorsInverseTable is the table name for the Validator entity.
	// It exists in this package in order to avoid circular dependency with the "validator" package.
	ValidatorsInverseTable = "validators"
)

// Columns holds all SQL columns for discordchannel fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldChannelID,
	FieldName,
	FieldIsGroup,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"discord_channel_id", "user_id"}
	// ContractsPrimaryKey and ContractsColumn2 are the table columns denoting the
	// primary key for the contracts relation (M2M).
	ContractsPrimaryKey = []string{"discord_channel_id", "contract_id"}
	// ChainsPrimaryKey and ChainsColumn2 are the table columns denoting the
	// primary key for the chains relation (M2M).
	ChainsPrimaryKey = []string{"discord_channel_id", "chain_id"}
	// ValidatorsPrimaryKey and ValidatorsColumn2 are the table columns denoting the
	// primary key for the validators relation (M2M).
	ValidatorsPrimaryKey = []string{"validator_id", "discord_channel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
