// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-notifier/ent/addresstracker"
	"github.com/shifty11/cosmos-notifier/ent/chain"
	"github.com/shifty11/cosmos-notifier/ent/discordchannel"
	"github.com/shifty11/cosmos-notifier/ent/telegramchat"
	"github.com/shifty11/cosmos-notifier/ent/validator"
)

// AddressTracker is the model entity for the AddressTracker schema.
type AddressTracker struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// NotificationInterval holds the value of the "notification_interval" field.
	NotificationInterval int64 `json:"notification_interval,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressTrackerQuery when eager-loading is set.
	Edges                            AddressTrackerEdges `json:"edges"`
	chain_address_trackers           *int
	discord_channel_address_trackers *int
	telegram_chat_address_trackers   *int
	validator_address_trackers       *int
}

// AddressTrackerEdges holds the relations/edges for other nodes in the graph.
type AddressTrackerEdges struct {
	// Chain holds the value of the chain edge.
	Chain *Chain `json:"chain,omitempty"`
	// DiscordChannel holds the value of the discord_channel edge.
	DiscordChannel *DiscordChannel `json:"discord_channel,omitempty"`
	// TelegramChat holds the value of the telegram_chat edge.
	TelegramChat *TelegramChat `json:"telegram_chat,omitempty"`
	// ChainProposals holds the value of the chain_proposals edge.
	ChainProposals []*ChainProposal `json:"chain_proposals,omitempty"`
	// Validator holds the value of the validator edge.
	Validator *Validator `json:"validator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ChainOrErr returns the Chain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressTrackerEdges) ChainOrErr() (*Chain, error) {
	if e.loadedTypes[0] {
		if e.Chain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chain.Label}
		}
		return e.Chain, nil
	}
	return nil, &NotLoadedError{edge: "chain"}
}

// DiscordChannelOrErr returns the DiscordChannel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressTrackerEdges) DiscordChannelOrErr() (*DiscordChannel, error) {
	if e.loadedTypes[1] {
		if e.DiscordChannel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: discordchannel.Label}
		}
		return e.DiscordChannel, nil
	}
	return nil, &NotLoadedError{edge: "discord_channel"}
}

// TelegramChatOrErr returns the TelegramChat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressTrackerEdges) TelegramChatOrErr() (*TelegramChat, error) {
	if e.loadedTypes[2] {
		if e.TelegramChat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: telegramchat.Label}
		}
		return e.TelegramChat, nil
	}
	return nil, &NotLoadedError{edge: "telegram_chat"}
}

// ChainProposalsOrErr returns the ChainProposals value or an error if the edge
// was not loaded in eager-loading.
func (e AddressTrackerEdges) ChainProposalsOrErr() ([]*ChainProposal, error) {
	if e.loadedTypes[3] {
		return e.ChainProposals, nil
	}
	return nil, &NotLoadedError{edge: "chain_proposals"}
}

// ValidatorOrErr returns the Validator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressTrackerEdges) ValidatorOrErr() (*Validator, error) {
	if e.loadedTypes[4] {
		if e.Validator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: validator.Label}
		}
		return e.Validator, nil
	}
	return nil, &NotLoadedError{edge: "validator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AddressTracker) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addresstracker.FieldID, addresstracker.FieldNotificationInterval:
			values[i] = new(sql.NullInt64)
		case addresstracker.FieldAddress:
			values[i] = new(sql.NullString)
		case addresstracker.FieldCreateTime, addresstracker.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case addresstracker.ForeignKeys[0]: // chain_address_trackers
			values[i] = new(sql.NullInt64)
		case addresstracker.ForeignKeys[1]: // discord_channel_address_trackers
			values[i] = new(sql.NullInt64)
		case addresstracker.ForeignKeys[2]: // telegram_chat_address_trackers
			values[i] = new(sql.NullInt64)
		case addresstracker.ForeignKeys[3]: // validator_address_trackers
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AddressTracker", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AddressTracker fields.
func (at *AddressTracker) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addresstracker.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int(value.Int64)
		case addresstracker.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				at.CreateTime = value.Time
			}
		case addresstracker.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				at.UpdateTime = value.Time
			}
		case addresstracker.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				at.Address = value.String
			}
		case addresstracker.FieldNotificationInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notification_interval", values[i])
			} else if value.Valid {
				at.NotificationInterval = value.Int64
			}
		case addresstracker.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chain_address_trackers", value)
			} else if value.Valid {
				at.chain_address_trackers = new(int)
				*at.chain_address_trackers = int(value.Int64)
			}
		case addresstracker.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field discord_channel_address_trackers", value)
			} else if value.Valid {
				at.discord_channel_address_trackers = new(int)
				*at.discord_channel_address_trackers = int(value.Int64)
			}
		case addresstracker.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field telegram_chat_address_trackers", value)
			} else if value.Valid {
				at.telegram_chat_address_trackers = new(int)
				*at.telegram_chat_address_trackers = int(value.Int64)
			}
		case addresstracker.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field validator_address_trackers", value)
			} else if value.Valid {
				at.validator_address_trackers = new(int)
				*at.validator_address_trackers = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChain queries the "chain" edge of the AddressTracker entity.
func (at *AddressTracker) QueryChain() *ChainQuery {
	return NewAddressTrackerClient(at.config).QueryChain(at)
}

// QueryDiscordChannel queries the "discord_channel" edge of the AddressTracker entity.
func (at *AddressTracker) QueryDiscordChannel() *DiscordChannelQuery {
	return NewAddressTrackerClient(at.config).QueryDiscordChannel(at)
}

// QueryTelegramChat queries the "telegram_chat" edge of the AddressTracker entity.
func (at *AddressTracker) QueryTelegramChat() *TelegramChatQuery {
	return NewAddressTrackerClient(at.config).QueryTelegramChat(at)
}

// QueryChainProposals queries the "chain_proposals" edge of the AddressTracker entity.
func (at *AddressTracker) QueryChainProposals() *ChainProposalQuery {
	return NewAddressTrackerClient(at.config).QueryChainProposals(at)
}

// QueryValidator queries the "validator" edge of the AddressTracker entity.
func (at *AddressTracker) QueryValidator() *ValidatorQuery {
	return NewAddressTrackerClient(at.config).QueryValidator(at)
}

// Update returns a builder for updating this AddressTracker.
// Note that you need to call AddressTracker.Unwrap() before calling this method if this AddressTracker
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AddressTracker) Update() *AddressTrackerUpdateOne {
	return NewAddressTrackerClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AddressTracker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AddressTracker) Unwrap() *AddressTracker {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AddressTracker is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AddressTracker) String() string {
	var builder strings.Builder
	builder.WriteString("AddressTracker(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("create_time=")
	builder.WriteString(at.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(at.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(at.Address)
	builder.WriteString(", ")
	builder.WriteString("notification_interval=")
	builder.WriteString(fmt.Sprintf("%v", at.NotificationInterval))
	builder.WriteByte(')')
	return builder.String()
}

// AddressTrackers is a parsable slice of AddressTracker.
type AddressTrackers []*AddressTracker
