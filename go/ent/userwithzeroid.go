// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/dao-dao-notifier/ent/userwithzeroid"
)

// UserWithZeroId is the model entity for the UserWithZeroId schema.
type UserWithZeroId struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type userwithzeroid.Type `json:"type,omitempty"`
	// ChatOrChannelID holds the value of the "chat_or_channel_id" field.
	ChatOrChannelID int64 `json:"chat_or_channel_id,omitempty"`
	// ChatOrChannelName holds the value of the "chat_or_channel_name" field.
	ChatOrChannelName string `json:"chat_or_channel_name,omitempty"`
	// IsGroup holds the value of the "is_group" field.
	IsGroup bool `json:"is_group,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID string `json:"chain_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserWithZeroId) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userwithzeroid.FieldIsGroup:
			values[i] = new(sql.NullBool)
		case userwithzeroid.FieldID, userwithzeroid.FieldChatOrChannelID:
			values[i] = new(sql.NullInt64)
		case userwithzeroid.FieldType, userwithzeroid.FieldChatOrChannelName, userwithzeroid.FieldChainID:
			values[i] = new(sql.NullString)
		case userwithzeroid.FieldCreateTime, userwithzeroid.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserWithZeroId", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserWithZeroId fields.
func (uwzi *UserWithZeroId) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userwithzeroid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uwzi.ID = int(value.Int64)
		case userwithzeroid.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				uwzi.CreateTime = value.Time
			}
		case userwithzeroid.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				uwzi.UpdateTime = value.Time
			}
		case userwithzeroid.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				uwzi.Type = userwithzeroid.Type(value.String)
			}
		case userwithzeroid.FieldChatOrChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_or_channel_id", values[i])
			} else if value.Valid {
				uwzi.ChatOrChannelID = value.Int64
			}
		case userwithzeroid.FieldChatOrChannelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_or_channel_name", values[i])
			} else if value.Valid {
				uwzi.ChatOrChannelName = value.String
			}
		case userwithzeroid.FieldIsGroup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_group", values[i])
			} else if value.Valid {
				uwzi.IsGroup = value.Bool
			}
		case userwithzeroid.FieldChainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				uwzi.ChainID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserWithZeroId.
// Note that you need to call UserWithZeroId.Unwrap() before calling this method if this UserWithZeroId
// was returned from a transaction, and the transaction was committed or rolled back.
func (uwzi *UserWithZeroId) Update() *UserWithZeroIdUpdateOne {
	return (&UserWithZeroIdClient{config: uwzi.config}).UpdateOne(uwzi)
}

// Unwrap unwraps the UserWithZeroId entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uwzi *UserWithZeroId) Unwrap() *UserWithZeroId {
	_tx, ok := uwzi.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserWithZeroId is not a transactional entity")
	}
	uwzi.config.driver = _tx.drv
	return uwzi
}

// String implements the fmt.Stringer.
func (uwzi *UserWithZeroId) String() string {
	var builder strings.Builder
	builder.WriteString("UserWithZeroId(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uwzi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(uwzi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(uwzi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", uwzi.Type))
	builder.WriteString(", ")
	builder.WriteString("chat_or_channel_id=")
	builder.WriteString(fmt.Sprintf("%v", uwzi.ChatOrChannelID))
	builder.WriteString(", ")
	builder.WriteString("chat_or_channel_name=")
	builder.WriteString(uwzi.ChatOrChannelName)
	builder.WriteString(", ")
	builder.WriteString("is_group=")
	builder.WriteString(fmt.Sprintf("%v", uwzi.IsGroup))
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(uwzi.ChainID)
	builder.WriteByte(')')
	return builder.String()
}

// UserWithZeroIds is a parsable slice of UserWithZeroId.
type UserWithZeroIds []*UserWithZeroId

func (uwzi UserWithZeroIds) config(cfg config) {
	for _i := range uwzi {
		uwzi[_i].config = cfg
	}
}
