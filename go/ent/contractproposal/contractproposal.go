// Code generated by ent, DO NOT EDIT.

package contractproposal

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the contractproposal type in the database.
	Label = "contract_proposal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldProposalID holds the string denoting the proposal_id field in the database.
	FieldProposalID = "proposal_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeContract holds the string denoting the contract edge name in mutations.
	EdgeContract = "contract"
	// Table holds the table name of the contractproposal in the database.
	Table = "contract_proposals"
	// ContractTable is the table that holds the contract relation/edge.
	ContractTable = "contract_proposals"
	// ContractInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractInverseTable = "contracts"
	// ContractColumn is the table column denoting the contract relation/edge.
	ContractColumn = "contract_proposals"
)

// Columns holds all SQL columns for contractproposal fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldProposalID,
	FieldTitle,
	FieldDescription,
	FieldExpiresAt,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "contract_proposals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"contract_proposals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusOpen            Status = "open"
	StatusRejected        Status = "rejected"
	StatusPassed          Status = "passed"
	StatusExecuted        Status = "executed"
	StatusClosed          Status = "closed"
	StatusExecutionFailed Status = "execution_failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOpen, StatusRejected, StatusPassed, StatusExecuted, StatusClosed, StatusExecutionFailed:
		return nil
	default:
		return fmt.Errorf("contractproposal: invalid enum value for status field: %q", s)
	}
}
