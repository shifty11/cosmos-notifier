// Code generated by ent, DO NOT EDIT.

package userwithzeroid

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/dao-dao-notifier/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// ChatOrChannelID applies equality check predicate on the "chat_or_channel_id" field. It's identical to ChatOrChannelIDEQ.
func ChatOrChannelID(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelName applies equality check predicate on the "chat_or_channel_name" field. It's identical to ChatOrChannelNameEQ.
func ChatOrChannelName(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatOrChannelName), v))
	})
}

// IsGroup applies equality check predicate on the "is_group" field. It's identical to IsGroupEQ.
func IsGroup(v bool) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGroup), v))
	})
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// ChatOrChannelIDEQ applies the EQ predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDEQ(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelIDNEQ applies the NEQ predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDNEQ(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelIDIn applies the In predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDIn(vs ...int64) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChatOrChannelID), v...))
	})
}

// ChatOrChannelIDNotIn applies the NotIn predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDNotIn(vs ...int64) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChatOrChannelID), v...))
	})
}

// ChatOrChannelIDGT applies the GT predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDGT(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelIDGTE applies the GTE predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDGTE(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelIDLT applies the LT predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDLT(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelIDLTE applies the LTE predicate on the "chat_or_channel_id" field.
func ChatOrChannelIDLTE(v int64) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChatOrChannelID), v))
	})
}

// ChatOrChannelNameEQ applies the EQ predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameEQ(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameNEQ applies the NEQ predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameNEQ(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameIn applies the In predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameIn(vs ...string) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChatOrChannelName), v...))
	})
}

// ChatOrChannelNameNotIn applies the NotIn predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameNotIn(vs ...string) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChatOrChannelName), v...))
	})
}

// ChatOrChannelNameGT applies the GT predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameGT(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameGTE applies the GTE predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameGTE(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameLT applies the LT predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameLT(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameLTE applies the LTE predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameLTE(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameContains applies the Contains predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameContains(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameHasPrefix applies the HasPrefix predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameHasPrefix(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameHasSuffix applies the HasSuffix predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameHasSuffix(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameEqualFold applies the EqualFold predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameEqualFold(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChatOrChannelName), v))
	})
}

// ChatOrChannelNameContainsFold applies the ContainsFold predicate on the "chat_or_channel_name" field.
func ChatOrChannelNameContainsFold(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChatOrChannelName), v))
	})
}

// IsGroupEQ applies the EQ predicate on the "is_group" field.
func IsGroupEQ(v bool) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGroup), v))
	})
}

// IsGroupNEQ applies the NEQ predicate on the "is_group" field.
func IsGroupNEQ(v bool) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsGroup), v))
	})
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainID), v))
	})
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...string) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainID), v...))
	})
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...string) predicate.UserWithZeroId {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainID), v...))
	})
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainID), v))
	})
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainID), v))
	})
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainID), v))
	})
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainID), v))
	})
}

// ChainIDContains applies the Contains predicate on the "chain_id" field.
func ChainIDContains(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainID), v))
	})
}

// ChainIDHasPrefix applies the HasPrefix predicate on the "chain_id" field.
func ChainIDHasPrefix(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainID), v))
	})
}

// ChainIDHasSuffix applies the HasSuffix predicate on the "chain_id" field.
func ChainIDHasSuffix(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainID), v))
	})
}

// ChainIDEqualFold applies the EqualFold predicate on the "chain_id" field.
func ChainIDEqualFold(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainID), v))
	})
}

// ChainIDContainsFold applies the ContainsFold predicate on the "chain_id" field.
func ChainIDContainsFold(v string) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserWithZeroId) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserWithZeroId) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserWithZeroId) predicate.UserWithZeroId {
	return predicate.UserWithZeroId(func(s *sql.Selector) {
		p(s.Not())
	})
}
