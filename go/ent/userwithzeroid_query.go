// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/dao-dao-notifier/ent/predicate"
	"github.com/shifty11/dao-dao-notifier/ent/userwithzeroid"
)

// UserWithZeroIdQuery is the builder for querying UserWithZeroId entities.
type UserWithZeroIdQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.UserWithZeroId
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserWithZeroIdQuery builder.
func (uwziq *UserWithZeroIdQuery) Where(ps ...predicate.UserWithZeroId) *UserWithZeroIdQuery {
	uwziq.predicates = append(uwziq.predicates, ps...)
	return uwziq
}

// Limit adds a limit step to the query.
func (uwziq *UserWithZeroIdQuery) Limit(limit int) *UserWithZeroIdQuery {
	uwziq.limit = &limit
	return uwziq
}

// Offset adds an offset step to the query.
func (uwziq *UserWithZeroIdQuery) Offset(offset int) *UserWithZeroIdQuery {
	uwziq.offset = &offset
	return uwziq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uwziq *UserWithZeroIdQuery) Unique(unique bool) *UserWithZeroIdQuery {
	uwziq.unique = &unique
	return uwziq
}

// Order adds an order step to the query.
func (uwziq *UserWithZeroIdQuery) Order(o ...OrderFunc) *UserWithZeroIdQuery {
	uwziq.order = append(uwziq.order, o...)
	return uwziq
}

// First returns the first UserWithZeroId entity from the query.
// Returns a *NotFoundError when no UserWithZeroId was found.
func (uwziq *UserWithZeroIdQuery) First(ctx context.Context) (*UserWithZeroId, error) {
	nodes, err := uwziq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userwithzeroid.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) FirstX(ctx context.Context) *UserWithZeroId {
	node, err := uwziq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserWithZeroId ID from the query.
// Returns a *NotFoundError when no UserWithZeroId ID was found.
func (uwziq *UserWithZeroIdQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uwziq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userwithzeroid.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) FirstIDX(ctx context.Context) int {
	id, err := uwziq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserWithZeroId entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserWithZeroId entity is found.
// Returns a *NotFoundError when no UserWithZeroId entities are found.
func (uwziq *UserWithZeroIdQuery) Only(ctx context.Context) (*UserWithZeroId, error) {
	nodes, err := uwziq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userwithzeroid.Label}
	default:
		return nil, &NotSingularError{userwithzeroid.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) OnlyX(ctx context.Context) *UserWithZeroId {
	node, err := uwziq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserWithZeroId ID in the query.
// Returns a *NotSingularError when more than one UserWithZeroId ID is found.
// Returns a *NotFoundError when no entities are found.
func (uwziq *UserWithZeroIdQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uwziq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userwithzeroid.Label}
	default:
		err = &NotSingularError{userwithzeroid.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) OnlyIDX(ctx context.Context) int {
	id, err := uwziq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserWithZeroIds.
func (uwziq *UserWithZeroIdQuery) All(ctx context.Context) ([]*UserWithZeroId, error) {
	if err := uwziq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uwziq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) AllX(ctx context.Context) []*UserWithZeroId {
	nodes, err := uwziq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserWithZeroId IDs.
func (uwziq *UserWithZeroIdQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := uwziq.Select(userwithzeroid.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) IDsX(ctx context.Context) []int {
	ids, err := uwziq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uwziq *UserWithZeroIdQuery) Count(ctx context.Context) (int, error) {
	if err := uwziq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uwziq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) CountX(ctx context.Context) int {
	count, err := uwziq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uwziq *UserWithZeroIdQuery) Exist(ctx context.Context) (bool, error) {
	if err := uwziq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uwziq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uwziq *UserWithZeroIdQuery) ExistX(ctx context.Context) bool {
	exist, err := uwziq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserWithZeroIdQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uwziq *UserWithZeroIdQuery) Clone() *UserWithZeroIdQuery {
	if uwziq == nil {
		return nil
	}
	return &UserWithZeroIdQuery{
		config:     uwziq.config,
		limit:      uwziq.limit,
		offset:     uwziq.offset,
		order:      append([]OrderFunc{}, uwziq.order...),
		predicates: append([]predicate.UserWithZeroId{}, uwziq.predicates...),
		// clone intermediate query.
		sql:    uwziq.sql.Clone(),
		path:   uwziq.path,
		unique: uwziq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserWithZeroId.Query().
//		GroupBy(userwithzeroid.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uwziq *UserWithZeroIdQuery) GroupBy(field string, fields ...string) *UserWithZeroIdGroupBy {
	grbuild := &UserWithZeroIdGroupBy{config: uwziq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uwziq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uwziq.sqlQuery(ctx), nil
	}
	grbuild.label = userwithzeroid.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.UserWithZeroId.Query().
//		Select(userwithzeroid.FieldCreateTime).
//		Scan(ctx, &v)
func (uwziq *UserWithZeroIdQuery) Select(fields ...string) *UserWithZeroIdSelect {
	uwziq.fields = append(uwziq.fields, fields...)
	selbuild := &UserWithZeroIdSelect{UserWithZeroIdQuery: uwziq}
	selbuild.label = userwithzeroid.Label
	selbuild.flds, selbuild.scan = &uwziq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a UserWithZeroIdSelect configured with the given aggregations.
func (uwziq *UserWithZeroIdQuery) Aggregate(fns ...AggregateFunc) *UserWithZeroIdSelect {
	return uwziq.Select().Aggregate(fns...)
}

func (uwziq *UserWithZeroIdQuery) prepareQuery(ctx context.Context) error {
	for _, f := range uwziq.fields {
		if !userwithzeroid.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uwziq.path != nil {
		prev, err := uwziq.path(ctx)
		if err != nil {
			return err
		}
		uwziq.sql = prev
	}
	return nil
}

func (uwziq *UserWithZeroIdQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserWithZeroId, error) {
	var (
		nodes = []*UserWithZeroId{}
		_spec = uwziq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserWithZeroId).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserWithZeroId{config: uwziq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uwziq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uwziq *UserWithZeroIdQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uwziq.querySpec()
	_spec.Node.Columns = uwziq.fields
	if len(uwziq.fields) > 0 {
		_spec.Unique = uwziq.unique != nil && *uwziq.unique
	}
	return sqlgraph.CountNodes(ctx, uwziq.driver, _spec)
}

func (uwziq *UserWithZeroIdQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := uwziq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (uwziq *UserWithZeroIdQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwithzeroid.Table,
			Columns: userwithzeroid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userwithzeroid.FieldID,
			},
		},
		From:   uwziq.sql,
		Unique: true,
	}
	if unique := uwziq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := uwziq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userwithzeroid.FieldID)
		for i := range fields {
			if fields[i] != userwithzeroid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uwziq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uwziq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uwziq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uwziq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uwziq *UserWithZeroIdQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uwziq.driver.Dialect())
	t1 := builder.Table(userwithzeroid.Table)
	columns := uwziq.fields
	if len(columns) == 0 {
		columns = userwithzeroid.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uwziq.sql != nil {
		selector = uwziq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uwziq.unique != nil && *uwziq.unique {
		selector.Distinct()
	}
	for _, p := range uwziq.predicates {
		p(selector)
	}
	for _, p := range uwziq.order {
		p(selector)
	}
	if offset := uwziq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uwziq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserWithZeroIdGroupBy is the group-by builder for UserWithZeroId entities.
type UserWithZeroIdGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uwzigb *UserWithZeroIdGroupBy) Aggregate(fns ...AggregateFunc) *UserWithZeroIdGroupBy {
	uwzigb.fns = append(uwzigb.fns, fns...)
	return uwzigb
}

// Scan applies the group-by query and scans the result into the given value.
func (uwzigb *UserWithZeroIdGroupBy) Scan(ctx context.Context, v any) error {
	query, err := uwzigb.path(ctx)
	if err != nil {
		return err
	}
	uwzigb.sql = query
	return uwzigb.sqlScan(ctx, v)
}

func (uwzigb *UserWithZeroIdGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range uwzigb.fields {
		if !userwithzeroid.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := uwzigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uwzigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uwzigb *UserWithZeroIdGroupBy) sqlQuery() *sql.Selector {
	selector := uwzigb.sql.Select()
	aggregation := make([]string, 0, len(uwzigb.fns))
	for _, fn := range uwzigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(uwzigb.fields)+len(uwzigb.fns))
		for _, f := range uwzigb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(uwzigb.fields...)...)
}

// UserWithZeroIdSelect is the builder for selecting fields of UserWithZeroId entities.
type UserWithZeroIdSelect struct {
	*UserWithZeroIdQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uwzis *UserWithZeroIdSelect) Aggregate(fns ...AggregateFunc) *UserWithZeroIdSelect {
	uwzis.fns = append(uwzis.fns, fns...)
	return uwzis
}

// Scan applies the selector query and scans the result into the given value.
func (uwzis *UserWithZeroIdSelect) Scan(ctx context.Context, v any) error {
	if err := uwzis.prepareQuery(ctx); err != nil {
		return err
	}
	uwzis.sql = uwzis.UserWithZeroIdQuery.sqlQuery(ctx)
	return uwzis.sqlScan(ctx, v)
}

func (uwzis *UserWithZeroIdSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(uwzis.fns))
	for _, fn := range uwzis.fns {
		aggregation = append(aggregation, fn(uwzis.sql))
	}
	switch n := len(*uwzis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		uwzis.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		uwzis.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := uwzis.sql.Query()
	if err := uwzis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
