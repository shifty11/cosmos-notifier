// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/dao-dao-notifier/ent/contract"
	"github.com/shifty11/dao-dao-notifier/ent/telegramchat"
	"github.com/shifty11/dao-dao-notifier/ent/user"
)

// TelegramChatCreate is the builder for creating a TelegramChat entity.
type TelegramChatCreate struct {
	config
	mutation *TelegramChatMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tcc *TelegramChatCreate) SetCreateTime(t time.Time) *TelegramChatCreate {
	tcc.mutation.SetCreateTime(t)
	return tcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tcc *TelegramChatCreate) SetNillableCreateTime(t *time.Time) *TelegramChatCreate {
	if t != nil {
		tcc.SetCreateTime(*t)
	}
	return tcc
}

// SetUpdateTime sets the "update_time" field.
func (tcc *TelegramChatCreate) SetUpdateTime(t time.Time) *TelegramChatCreate {
	tcc.mutation.SetUpdateTime(t)
	return tcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tcc *TelegramChatCreate) SetNillableUpdateTime(t *time.Time) *TelegramChatCreate {
	if t != nil {
		tcc.SetUpdateTime(*t)
	}
	return tcc
}

// SetChatID sets the "chat_id" field.
func (tcc *TelegramChatCreate) SetChatID(i int64) *TelegramChatCreate {
	tcc.mutation.SetChatID(i)
	return tcc
}

// SetName sets the "name" field.
func (tcc *TelegramChatCreate) SetName(s string) *TelegramChatCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetIsGroup sets the "is_group" field.
func (tcc *TelegramChatCreate) SetIsGroup(b bool) *TelegramChatCreate {
	tcc.mutation.SetIsGroup(b)
	return tcc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tcc *TelegramChatCreate) SetUserID(id int) *TelegramChatCreate {
	tcc.mutation.SetUserID(id)
	return tcc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (tcc *TelegramChatCreate) SetNillableUserID(id *int) *TelegramChatCreate {
	if id != nil {
		tcc = tcc.SetUserID(*id)
	}
	return tcc
}

// SetUser sets the "user" edge to the User entity.
func (tcc *TelegramChatCreate) SetUser(u *User) *TelegramChatCreate {
	return tcc.SetUserID(u.ID)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (tcc *TelegramChatCreate) AddContractIDs(ids ...int) *TelegramChatCreate {
	tcc.mutation.AddContractIDs(ids...)
	return tcc
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (tcc *TelegramChatCreate) AddContracts(c ...*Contract) *TelegramChatCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tcc.AddContractIDs(ids...)
}

// Mutation returns the TelegramChatMutation object of the builder.
func (tcc *TelegramChatCreate) Mutation() *TelegramChatMutation {
	return tcc.mutation
}

// Save creates the TelegramChat in the database.
func (tcc *TelegramChatCreate) Save(ctx context.Context) (*TelegramChat, error) {
	var (
		err  error
		node *TelegramChat
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TelegramChatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TelegramChat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TelegramChatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TelegramChatCreate) SaveX(ctx context.Context) *TelegramChat {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TelegramChatCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TelegramChatCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TelegramChatCreate) defaults() {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		v := telegramchat.DefaultCreateTime()
		tcc.mutation.SetCreateTime(v)
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		v := telegramchat.DefaultUpdateTime()
		tcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TelegramChatCreate) check() error {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TelegramChat.create_time"`)}
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TelegramChat.update_time"`)}
	}
	if _, ok := tcc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "TelegramChat.chat_id"`)}
	}
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TelegramChat.name"`)}
	}
	if _, ok := tcc.mutation.IsGroup(); !ok {
		return &ValidationError{Name: "is_group", err: errors.New(`ent: missing required field "TelegramChat.is_group"`)}
	}
	return nil
}

func (tcc *TelegramChatCreate) sqlSave(ctx context.Context) (*TelegramChat, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tcc *TelegramChatCreate) createSpec() (*TelegramChat, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramChat{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: telegramchat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: telegramchat.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: telegramchat.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: telegramchat.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tcc.mutation.ChatID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: telegramchat.FieldChatID,
		})
		_node.ChatID = value
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: telegramchat.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tcc.mutation.IsGroup(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: telegramchat.FieldIsGroup,
		})
		_node.IsGroup = value
	}
	if nodes := tcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telegramchat.UserTable,
			Columns: []string{telegramchat.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.telegram_chat_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   telegramchat.ContractsTable,
			Columns: telegramchat.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TelegramChatCreateBulk is the builder for creating many TelegramChat entities in bulk.
type TelegramChatCreateBulk struct {
	config
	builders []*TelegramChatCreate
}

// Save creates the TelegramChat entities in the database.
func (tccb *TelegramChatCreateBulk) Save(ctx context.Context) ([]*TelegramChat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TelegramChat, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramChatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TelegramChatCreateBulk) SaveX(ctx context.Context) []*TelegramChat {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TelegramChatCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TelegramChatCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
