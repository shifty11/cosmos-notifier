// Code generated by ent, DO NOT EDIT.

package chain

import (
	"time"
)

const (
	// Label holds the string label denoting the chain type in the database.
	Label = "chain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrettyName holds the string denoting the pretty_name field in the database.
	FieldPrettyName = "pretty_name"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// EdgeChainProposals holds the string denoting the chain_proposals edge name in mutations.
	EdgeChainProposals = "chain_proposals"
	// EdgeTelegramChats holds the string denoting the telegram_chats edge name in mutations.
	EdgeTelegramChats = "telegram_chats"
	// EdgeDiscordChannels holds the string denoting the discord_channels edge name in mutations.
	EdgeDiscordChannels = "discord_channels"
	// Table holds the table name of the chain in the database.
	Table = "chains"
	// ChainProposalsTable is the table that holds the chain_proposals relation/edge.
	ChainProposalsTable = "chain_proposals"
	// ChainProposalsInverseTable is the table name for the ChainProposal entity.
	// It exists in this package in order to avoid circular dependency with the "chainproposal" package.
	ChainProposalsInverseTable = "chain_proposals"
	// ChainProposalsColumn is the table column denoting the chain_proposals relation/edge.
	ChainProposalsColumn = "chain_chain_proposals"
	// TelegramChatsTable is the table that holds the telegram_chats relation/edge. The primary key declared below.
	TelegramChatsTable = "telegram_chat_chains"
	// TelegramChatsInverseTable is the table name for the TelegramChat entity.
	// It exists in this package in order to avoid circular dependency with the "telegramchat" package.
	TelegramChatsInverseTable = "telegram_chats"
	// DiscordChannelsTable is the table that holds the discord_channels relation/edge. The primary key declared below.
	DiscordChannelsTable = "discord_channel_chains"
	// DiscordChannelsInverseTable is the table name for the DiscordChannel entity.
	// It exists in this package in order to avoid circular dependency with the "discordchannel" package.
	DiscordChannelsInverseTable = "discord_channels"
)

// Columns holds all SQL columns for chain fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldChainID,
	FieldName,
	FieldPrettyName,
	FieldIsEnabled,
	FieldImageURL,
	FieldThumbnailURL,
}

var (
	// TelegramChatsPrimaryKey and TelegramChatsColumn2 are the table columns denoting the
	// primary key for the telegram_chats relation (M2M).
	TelegramChatsPrimaryKey = []string{"telegram_chat_id", "chain_id"}
	// DiscordChannelsPrimaryKey and DiscordChannelsColumn2 are the table columns denoting the
	// primary key for the discord_channels relation (M2M).
	DiscordChannelsPrimaryKey = []string{"discord_channel_id", "chain_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsEnabled holds the default value on creation for the "is_enabled" field.
	DefaultIsEnabled bool
	// DefaultThumbnailURL holds the default value on creation for the "thumbnail_url" field.
	DefaultThumbnailURL string
)
