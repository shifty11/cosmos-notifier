// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-notifier/ent/addresstracker"
	"github.com/shifty11/cosmos-notifier/ent/chain"
	"github.com/shifty11/cosmos-notifier/ent/contract"
	"github.com/shifty11/cosmos-notifier/ent/discordchannel"
	"github.com/shifty11/cosmos-notifier/ent/predicate"
	"github.com/shifty11/cosmos-notifier/ent/user"
	"github.com/shifty11/cosmos-notifier/ent/validator"
)

// DiscordChannelUpdate is the builder for updating DiscordChannel entities.
type DiscordChannelUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordChannelMutation
}

// Where appends a list predicates to the DiscordChannelUpdate builder.
func (dcu *DiscordChannelUpdate) Where(ps ...predicate.DiscordChannel) *DiscordChannelUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetUpdateTime sets the "update_time" field.
func (dcu *DiscordChannelUpdate) SetUpdateTime(t time.Time) *DiscordChannelUpdate {
	dcu.mutation.SetUpdateTime(t)
	return dcu
}

// SetChannelID sets the "channel_id" field.
func (dcu *DiscordChannelUpdate) SetChannelID(i int64) *DiscordChannelUpdate {
	dcu.mutation.ResetChannelID()
	dcu.mutation.SetChannelID(i)
	return dcu
}

// AddChannelID adds i to the "channel_id" field.
func (dcu *DiscordChannelUpdate) AddChannelID(i int64) *DiscordChannelUpdate {
	dcu.mutation.AddChannelID(i)
	return dcu
}

// SetName sets the "name" field.
func (dcu *DiscordChannelUpdate) SetName(s string) *DiscordChannelUpdate {
	dcu.mutation.SetName(s)
	return dcu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (dcu *DiscordChannelUpdate) AddUserIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.AddUserIDs(ids...)
	return dcu
}

// AddUsers adds the "users" edges to the User entity.
func (dcu *DiscordChannelUpdate) AddUsers(u ...*User) *DiscordChannelUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dcu.AddUserIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (dcu *DiscordChannelUpdate) AddContractIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.AddContractIDs(ids...)
	return dcu
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (dcu *DiscordChannelUpdate) AddContracts(c ...*Contract) *DiscordChannelUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcu.AddContractIDs(ids...)
}

// AddChainIDs adds the "chains" edge to the Chain entity by IDs.
func (dcu *DiscordChannelUpdate) AddChainIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.AddChainIDs(ids...)
	return dcu
}

// AddChains adds the "chains" edges to the Chain entity.
func (dcu *DiscordChannelUpdate) AddChains(c ...*Chain) *DiscordChannelUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcu.AddChainIDs(ids...)
}

// AddAddressTrackerIDs adds the "address_trackers" edge to the AddressTracker entity by IDs.
func (dcu *DiscordChannelUpdate) AddAddressTrackerIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.AddAddressTrackerIDs(ids...)
	return dcu
}

// AddAddressTrackers adds the "address_trackers" edges to the AddressTracker entity.
func (dcu *DiscordChannelUpdate) AddAddressTrackers(a ...*AddressTracker) *DiscordChannelUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dcu.AddAddressTrackerIDs(ids...)
}

// AddValidatorIDs adds the "validators" edge to the Validator entity by IDs.
func (dcu *DiscordChannelUpdate) AddValidatorIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.AddValidatorIDs(ids...)
	return dcu
}

// AddValidators adds the "validators" edges to the Validator entity.
func (dcu *DiscordChannelUpdate) AddValidators(v ...*Validator) *DiscordChannelUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return dcu.AddValidatorIDs(ids...)
}

// Mutation returns the DiscordChannelMutation object of the builder.
func (dcu *DiscordChannelUpdate) Mutation() *DiscordChannelMutation {
	return dcu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (dcu *DiscordChannelUpdate) ClearUsers() *DiscordChannelUpdate {
	dcu.mutation.ClearUsers()
	return dcu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveUserIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.RemoveUserIDs(ids...)
	return dcu
}

// RemoveUsers removes "users" edges to User entities.
func (dcu *DiscordChannelUpdate) RemoveUsers(u ...*User) *DiscordChannelUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dcu.RemoveUserIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (dcu *DiscordChannelUpdate) ClearContracts() *DiscordChannelUpdate {
	dcu.mutation.ClearContracts()
	return dcu
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveContractIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.RemoveContractIDs(ids...)
	return dcu
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (dcu *DiscordChannelUpdate) RemoveContracts(c ...*Contract) *DiscordChannelUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcu.RemoveContractIDs(ids...)
}

// ClearChains clears all "chains" edges to the Chain entity.
func (dcu *DiscordChannelUpdate) ClearChains() *DiscordChannelUpdate {
	dcu.mutation.ClearChains()
	return dcu
}

// RemoveChainIDs removes the "chains" edge to Chain entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveChainIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.RemoveChainIDs(ids...)
	return dcu
}

// RemoveChains removes "chains" edges to Chain entities.
func (dcu *DiscordChannelUpdate) RemoveChains(c ...*Chain) *DiscordChannelUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcu.RemoveChainIDs(ids...)
}

// ClearAddressTrackers clears all "address_trackers" edges to the AddressTracker entity.
func (dcu *DiscordChannelUpdate) ClearAddressTrackers() *DiscordChannelUpdate {
	dcu.mutation.ClearAddressTrackers()
	return dcu
}

// RemoveAddressTrackerIDs removes the "address_trackers" edge to AddressTracker entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveAddressTrackerIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.RemoveAddressTrackerIDs(ids...)
	return dcu
}

// RemoveAddressTrackers removes "address_trackers" edges to AddressTracker entities.
func (dcu *DiscordChannelUpdate) RemoveAddressTrackers(a ...*AddressTracker) *DiscordChannelUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dcu.RemoveAddressTrackerIDs(ids...)
}

// ClearValidators clears all "validators" edges to the Validator entity.
func (dcu *DiscordChannelUpdate) ClearValidators() *DiscordChannelUpdate {
	dcu.mutation.ClearValidators()
	return dcu
}

// RemoveValidatorIDs removes the "validators" edge to Validator entities by IDs.
func (dcu *DiscordChannelUpdate) RemoveValidatorIDs(ids ...int) *DiscordChannelUpdate {
	dcu.mutation.RemoveValidatorIDs(ids...)
	return dcu
}

// RemoveValidators removes "validators" edges to Validator entities.
func (dcu *DiscordChannelUpdate) RemoveValidators(v ...*Validator) *DiscordChannelUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return dcu.RemoveValidatorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DiscordChannelUpdate) Save(ctx context.Context) (int, error) {
	dcu.defaults()
	return withHooks[int, DiscordChannelMutation](ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DiscordChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DiscordChannelUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DiscordChannelUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DiscordChannelUpdate) defaults() {
	if _, ok := dcu.mutation.UpdateTime(); !ok {
		v := discordchannel.UpdateDefaultUpdateTime()
		dcu.mutation.SetUpdateTime(v)
	}
}

func (dcu *DiscordChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(discordchannel.Table, discordchannel.Columns, sqlgraph.NewFieldSpec(discordchannel.FieldID, field.TypeInt))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdateTime(); ok {
		_spec.SetField(discordchannel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.ChannelID(); ok {
		_spec.SetField(discordchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.AddedChannelID(); ok {
		_spec.AddField(discordchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := dcu.mutation.Name(); ok {
		_spec.SetField(discordchannel.FieldName, field.TypeString, value)
	}
	if dcu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.UsersTable,
			Columns: discordchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !dcu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.UsersTable,
			Columns: discordchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.UsersTable,
			Columns: discordchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ContractsTable,
			Columns: discordchannel.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedContractsIDs(); len(nodes) > 0 && !dcu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ContractsTable,
			Columns: discordchannel.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ContractsTable,
			Columns: discordchannel.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ChainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ChainsTable,
			Columns: discordchannel.ChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedChainsIDs(); len(nodes) > 0 && !dcu.mutation.ChainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ChainsTable,
			Columns: discordchannel.ChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ChainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ChainsTable,
			Columns: discordchannel.ChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.AddressTrackersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.AddressTrackersTable,
			Columns: []string{discordchannel.AddressTrackersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedAddressTrackersIDs(); len(nodes) > 0 && !dcu.mutation.AddressTrackersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.AddressTrackersTable,
			Columns: []string{discordchannel.AddressTrackersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.AddressTrackersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.AddressTrackersTable,
			Columns: []string{discordchannel.AddressTrackersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ValidatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.ValidatorsTable,
			Columns: discordchannel.ValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedValidatorsIDs(); len(nodes) > 0 && !dcu.mutation.ValidatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.ValidatorsTable,
			Columns: discordchannel.ValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ValidatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.ValidatorsTable,
			Columns: discordchannel.ValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DiscordChannelUpdateOne is the builder for updating a single DiscordChannel entity.
type DiscordChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordChannelMutation
}

// SetUpdateTime sets the "update_time" field.
func (dcuo *DiscordChannelUpdateOne) SetUpdateTime(t time.Time) *DiscordChannelUpdateOne {
	dcuo.mutation.SetUpdateTime(t)
	return dcuo
}

// SetChannelID sets the "channel_id" field.
func (dcuo *DiscordChannelUpdateOne) SetChannelID(i int64) *DiscordChannelUpdateOne {
	dcuo.mutation.ResetChannelID()
	dcuo.mutation.SetChannelID(i)
	return dcuo
}

// AddChannelID adds i to the "channel_id" field.
func (dcuo *DiscordChannelUpdateOne) AddChannelID(i int64) *DiscordChannelUpdateOne {
	dcuo.mutation.AddChannelID(i)
	return dcuo
}

// SetName sets the "name" field.
func (dcuo *DiscordChannelUpdateOne) SetName(s string) *DiscordChannelUpdateOne {
	dcuo.mutation.SetName(s)
	return dcuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddUserIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.AddUserIDs(ids...)
	return dcuo
}

// AddUsers adds the "users" edges to the User entity.
func (dcuo *DiscordChannelUpdateOne) AddUsers(u ...*User) *DiscordChannelUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dcuo.AddUserIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddContractIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.AddContractIDs(ids...)
	return dcuo
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (dcuo *DiscordChannelUpdateOne) AddContracts(c ...*Contract) *DiscordChannelUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcuo.AddContractIDs(ids...)
}

// AddChainIDs adds the "chains" edge to the Chain entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddChainIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.AddChainIDs(ids...)
	return dcuo
}

// AddChains adds the "chains" edges to the Chain entity.
func (dcuo *DiscordChannelUpdateOne) AddChains(c ...*Chain) *DiscordChannelUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcuo.AddChainIDs(ids...)
}

// AddAddressTrackerIDs adds the "address_trackers" edge to the AddressTracker entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddAddressTrackerIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.AddAddressTrackerIDs(ids...)
	return dcuo
}

// AddAddressTrackers adds the "address_trackers" edges to the AddressTracker entity.
func (dcuo *DiscordChannelUpdateOne) AddAddressTrackers(a ...*AddressTracker) *DiscordChannelUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dcuo.AddAddressTrackerIDs(ids...)
}

// AddValidatorIDs adds the "validators" edge to the Validator entity by IDs.
func (dcuo *DiscordChannelUpdateOne) AddValidatorIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.AddValidatorIDs(ids...)
	return dcuo
}

// AddValidators adds the "validators" edges to the Validator entity.
func (dcuo *DiscordChannelUpdateOne) AddValidators(v ...*Validator) *DiscordChannelUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return dcuo.AddValidatorIDs(ids...)
}

// Mutation returns the DiscordChannelMutation object of the builder.
func (dcuo *DiscordChannelUpdateOne) Mutation() *DiscordChannelMutation {
	return dcuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (dcuo *DiscordChannelUpdateOne) ClearUsers() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearUsers()
	return dcuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveUserIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveUserIDs(ids...)
	return dcuo
}

// RemoveUsers removes "users" edges to User entities.
func (dcuo *DiscordChannelUpdateOne) RemoveUsers(u ...*User) *DiscordChannelUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dcuo.RemoveUserIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (dcuo *DiscordChannelUpdateOne) ClearContracts() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearContracts()
	return dcuo
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveContractIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveContractIDs(ids...)
	return dcuo
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (dcuo *DiscordChannelUpdateOne) RemoveContracts(c ...*Contract) *DiscordChannelUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcuo.RemoveContractIDs(ids...)
}

// ClearChains clears all "chains" edges to the Chain entity.
func (dcuo *DiscordChannelUpdateOne) ClearChains() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearChains()
	return dcuo
}

// RemoveChainIDs removes the "chains" edge to Chain entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveChainIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveChainIDs(ids...)
	return dcuo
}

// RemoveChains removes "chains" edges to Chain entities.
func (dcuo *DiscordChannelUpdateOne) RemoveChains(c ...*Chain) *DiscordChannelUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dcuo.RemoveChainIDs(ids...)
}

// ClearAddressTrackers clears all "address_trackers" edges to the AddressTracker entity.
func (dcuo *DiscordChannelUpdateOne) ClearAddressTrackers() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearAddressTrackers()
	return dcuo
}

// RemoveAddressTrackerIDs removes the "address_trackers" edge to AddressTracker entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveAddressTrackerIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveAddressTrackerIDs(ids...)
	return dcuo
}

// RemoveAddressTrackers removes "address_trackers" edges to AddressTracker entities.
func (dcuo *DiscordChannelUpdateOne) RemoveAddressTrackers(a ...*AddressTracker) *DiscordChannelUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dcuo.RemoveAddressTrackerIDs(ids...)
}

// ClearValidators clears all "validators" edges to the Validator entity.
func (dcuo *DiscordChannelUpdateOne) ClearValidators() *DiscordChannelUpdateOne {
	dcuo.mutation.ClearValidators()
	return dcuo
}

// RemoveValidatorIDs removes the "validators" edge to Validator entities by IDs.
func (dcuo *DiscordChannelUpdateOne) RemoveValidatorIDs(ids ...int) *DiscordChannelUpdateOne {
	dcuo.mutation.RemoveValidatorIDs(ids...)
	return dcuo
}

// RemoveValidators removes "validators" edges to Validator entities.
func (dcuo *DiscordChannelUpdateOne) RemoveValidators(v ...*Validator) *DiscordChannelUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return dcuo.RemoveValidatorIDs(ids...)
}

// Where appends a list predicates to the DiscordChannelUpdate builder.
func (dcuo *DiscordChannelUpdateOne) Where(ps ...predicate.DiscordChannel) *DiscordChannelUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DiscordChannelUpdateOne) Select(field string, fields ...string) *DiscordChannelUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DiscordChannel entity.
func (dcuo *DiscordChannelUpdateOne) Save(ctx context.Context) (*DiscordChannel, error) {
	dcuo.defaults()
	return withHooks[*DiscordChannel, DiscordChannelMutation](ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DiscordChannelUpdateOne) SaveX(ctx context.Context) *DiscordChannel {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DiscordChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DiscordChannelUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DiscordChannelUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdateTime(); !ok {
		v := discordchannel.UpdateDefaultUpdateTime()
		dcuo.mutation.SetUpdateTime(v)
	}
}

func (dcuo *DiscordChannelUpdateOne) sqlSave(ctx context.Context) (_node *DiscordChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(discordchannel.Table, discordchannel.Columns, sqlgraph.NewFieldSpec(discordchannel.FieldID, field.TypeInt))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscordChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordchannel.FieldID)
		for _, f := range fields {
			if !discordchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.UpdateTime(); ok {
		_spec.SetField(discordchannel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.ChannelID(); ok {
		_spec.SetField(discordchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.AddedChannelID(); ok {
		_spec.AddField(discordchannel.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := dcuo.mutation.Name(); ok {
		_spec.SetField(discordchannel.FieldName, field.TypeString, value)
	}
	if dcuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.UsersTable,
			Columns: discordchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !dcuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.UsersTable,
			Columns: discordchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.UsersTable,
			Columns: discordchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ContractsTable,
			Columns: discordchannel.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedContractsIDs(); len(nodes) > 0 && !dcuo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ContractsTable,
			Columns: discordchannel.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ContractsTable,
			Columns: discordchannel.ContractsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ChainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ChainsTable,
			Columns: discordchannel.ChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedChainsIDs(); len(nodes) > 0 && !dcuo.mutation.ChainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ChainsTable,
			Columns: discordchannel.ChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ChainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   discordchannel.ChainsTable,
			Columns: discordchannel.ChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.AddressTrackersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.AddressTrackersTable,
			Columns: []string{discordchannel.AddressTrackersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedAddressTrackersIDs(); len(nodes) > 0 && !dcuo.mutation.AddressTrackersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.AddressTrackersTable,
			Columns: []string{discordchannel.AddressTrackersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.AddressTrackersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordchannel.AddressTrackersTable,
			Columns: []string{discordchannel.AddressTrackersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ValidatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.ValidatorsTable,
			Columns: discordchannel.ValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedValidatorsIDs(); len(nodes) > 0 && !dcuo.mutation.ValidatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.ValidatorsTable,
			Columns: discordchannel.ValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ValidatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   discordchannel.ValidatorsTable,
			Columns: discordchannel.ValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordChannel{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
