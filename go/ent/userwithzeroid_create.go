// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/dao-dao-notifier/ent/userwithzeroid"
)

// UserWithZeroIdCreate is the builder for creating a UserWithZeroId entity.
type UserWithZeroIdCreate struct {
	config
	mutation *UserWithZeroIdMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uwzic *UserWithZeroIdCreate) SetCreateTime(t time.Time) *UserWithZeroIdCreate {
	uwzic.mutation.SetCreateTime(t)
	return uwzic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uwzic *UserWithZeroIdCreate) SetNillableCreateTime(t *time.Time) *UserWithZeroIdCreate {
	if t != nil {
		uwzic.SetCreateTime(*t)
	}
	return uwzic
}

// SetUpdateTime sets the "update_time" field.
func (uwzic *UserWithZeroIdCreate) SetUpdateTime(t time.Time) *UserWithZeroIdCreate {
	uwzic.mutation.SetUpdateTime(t)
	return uwzic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uwzic *UserWithZeroIdCreate) SetNillableUpdateTime(t *time.Time) *UserWithZeroIdCreate {
	if t != nil {
		uwzic.SetUpdateTime(*t)
	}
	return uwzic
}

// SetType sets the "type" field.
func (uwzic *UserWithZeroIdCreate) SetType(u userwithzeroid.Type) *UserWithZeroIdCreate {
	uwzic.mutation.SetType(u)
	return uwzic
}

// SetChatOrChannelID sets the "chat_or_channel_id" field.
func (uwzic *UserWithZeroIdCreate) SetChatOrChannelID(i int64) *UserWithZeroIdCreate {
	uwzic.mutation.SetChatOrChannelID(i)
	return uwzic
}

// SetChatOrChannelName sets the "chat_or_channel_name" field.
func (uwzic *UserWithZeroIdCreate) SetChatOrChannelName(s string) *UserWithZeroIdCreate {
	uwzic.mutation.SetChatOrChannelName(s)
	return uwzic
}

// SetIsGroup sets the "is_group" field.
func (uwzic *UserWithZeroIdCreate) SetIsGroup(b bool) *UserWithZeroIdCreate {
	uwzic.mutation.SetIsGroup(b)
	return uwzic
}

// SetChainID sets the "chain_id" field.
func (uwzic *UserWithZeroIdCreate) SetChainID(s string) *UserWithZeroIdCreate {
	uwzic.mutation.SetChainID(s)
	return uwzic
}

// Mutation returns the UserWithZeroIdMutation object of the builder.
func (uwzic *UserWithZeroIdCreate) Mutation() *UserWithZeroIdMutation {
	return uwzic.mutation
}

// Save creates the UserWithZeroId in the database.
func (uwzic *UserWithZeroIdCreate) Save(ctx context.Context) (*UserWithZeroId, error) {
	var (
		err  error
		node *UserWithZeroId
	)
	uwzic.defaults()
	if len(uwzic.hooks) == 0 {
		if err = uwzic.check(); err != nil {
			return nil, err
		}
		node, err = uwzic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWithZeroIdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uwzic.check(); err != nil {
				return nil, err
			}
			uwzic.mutation = mutation
			if node, err = uwzic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uwzic.hooks) - 1; i >= 0; i-- {
			if uwzic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uwzic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uwzic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserWithZeroId)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserWithZeroIdMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uwzic *UserWithZeroIdCreate) SaveX(ctx context.Context) *UserWithZeroId {
	v, err := uwzic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwzic *UserWithZeroIdCreate) Exec(ctx context.Context) error {
	_, err := uwzic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwzic *UserWithZeroIdCreate) ExecX(ctx context.Context) {
	if err := uwzic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwzic *UserWithZeroIdCreate) defaults() {
	if _, ok := uwzic.mutation.CreateTime(); !ok {
		v := userwithzeroid.DefaultCreateTime()
		uwzic.mutation.SetCreateTime(v)
	}
	if _, ok := uwzic.mutation.UpdateTime(); !ok {
		v := userwithzeroid.DefaultUpdateTime()
		uwzic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwzic *UserWithZeroIdCreate) check() error {
	if _, ok := uwzic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserWithZeroId.create_time"`)}
	}
	if _, ok := uwzic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserWithZeroId.update_time"`)}
	}
	if _, ok := uwzic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "UserWithZeroId.type"`)}
	}
	if v, ok := uwzic.mutation.GetType(); ok {
		if err := userwithzeroid.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserWithZeroId.type": %w`, err)}
		}
	}
	if _, ok := uwzic.mutation.ChatOrChannelID(); !ok {
		return &ValidationError{Name: "chat_or_channel_id", err: errors.New(`ent: missing required field "UserWithZeroId.chat_or_channel_id"`)}
	}
	if _, ok := uwzic.mutation.ChatOrChannelName(); !ok {
		return &ValidationError{Name: "chat_or_channel_name", err: errors.New(`ent: missing required field "UserWithZeroId.chat_or_channel_name"`)}
	}
	if _, ok := uwzic.mutation.IsGroup(); !ok {
		return &ValidationError{Name: "is_group", err: errors.New(`ent: missing required field "UserWithZeroId.is_group"`)}
	}
	if _, ok := uwzic.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "UserWithZeroId.chain_id"`)}
	}
	return nil
}

func (uwzic *UserWithZeroIdCreate) sqlSave(ctx context.Context) (*UserWithZeroId, error) {
	_node, _spec := uwzic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwzic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uwzic *UserWithZeroIdCreate) createSpec() (*UserWithZeroId, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWithZeroId{config: uwzic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userwithzeroid.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userwithzeroid.FieldID,
			},
		}
	)
	if value, ok := uwzic.mutation.CreateTime(); ok {
		_spec.SetField(userwithzeroid.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uwzic.mutation.UpdateTime(); ok {
		_spec.SetField(userwithzeroid.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uwzic.mutation.GetType(); ok {
		_spec.SetField(userwithzeroid.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := uwzic.mutation.ChatOrChannelID(); ok {
		_spec.SetField(userwithzeroid.FieldChatOrChannelID, field.TypeInt64, value)
		_node.ChatOrChannelID = value
	}
	if value, ok := uwzic.mutation.ChatOrChannelName(); ok {
		_spec.SetField(userwithzeroid.FieldChatOrChannelName, field.TypeString, value)
		_node.ChatOrChannelName = value
	}
	if value, ok := uwzic.mutation.IsGroup(); ok {
		_spec.SetField(userwithzeroid.FieldIsGroup, field.TypeBool, value)
		_node.IsGroup = value
	}
	if value, ok := uwzic.mutation.ChainID(); ok {
		_spec.SetField(userwithzeroid.FieldChainID, field.TypeString, value)
		_node.ChainID = value
	}
	return _node, _spec
}

// UserWithZeroIdCreateBulk is the builder for creating many UserWithZeroId entities in bulk.
type UserWithZeroIdCreateBulk struct {
	config
	builders []*UserWithZeroIdCreate
}

// Save creates the UserWithZeroId entities in the database.
func (uwzicb *UserWithZeroIdCreateBulk) Save(ctx context.Context) ([]*UserWithZeroId, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uwzicb.builders))
	nodes := make([]*UserWithZeroId, len(uwzicb.builders))
	mutators := make([]Mutator, len(uwzicb.builders))
	for i := range uwzicb.builders {
		func(i int, root context.Context) {
			builder := uwzicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWithZeroIdMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwzicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwzicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwzicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwzicb *UserWithZeroIdCreateBulk) SaveX(ctx context.Context) []*UserWithZeroId {
	v, err := uwzicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwzicb *UserWithZeroIdCreateBulk) Exec(ctx context.Context) error {
	_, err := uwzicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwzicb *UserWithZeroIdCreateBulk) ExecX(ctx context.Context) {
	if err := uwzicb.Exec(ctx); err != nil {
		panic(err)
	}
}
