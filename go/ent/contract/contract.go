// Code generated by ent, DO NOT EDIT.

package contract

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the contract type in the database.
	Label = "contract"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldRPCEndpoint holds the string denoting the rpc_endpoint field in the database.
	FieldRPCEndpoint = "rpc_endpoint"
	// FieldConfigVersion holds the string denoting the config_version field in the database.
	FieldConfigVersion = "config_version"
	// EdgeProposals holds the string denoting the proposals edge name in mutations.
	EdgeProposals = "proposals"
	// EdgeTelegramChats holds the string denoting the telegram_chats edge name in mutations.
	EdgeTelegramChats = "telegram_chats"
	// EdgeDiscordChannels holds the string denoting the discord_channels edge name in mutations.
	EdgeDiscordChannels = "discord_channels"
	// Table holds the table name of the contract in the database.
	Table = "contracts"
	// ProposalsTable is the table that holds the proposals relation/edge.
	ProposalsTable = "contract_proposals"
	// ProposalsInverseTable is the table name for the ContractProposal entity.
	// It exists in this package in order to avoid circular dependency with the "contractproposal" package.
	ProposalsInverseTable = "contract_proposals"
	// ProposalsColumn is the table column denoting the proposals relation/edge.
	ProposalsColumn = "contract_proposals"
	// TelegramChatsTable is the table that holds the telegram_chats relation/edge. The primary key declared below.
	TelegramChatsTable = "telegram_chat_contracts"
	// TelegramChatsInverseTable is the table name for the TelegramChat entity.
	// It exists in this package in order to avoid circular dependency with the "telegramchat" package.
	TelegramChatsInverseTable = "telegram_chats"
	// DiscordChannelsTable is the table that holds the discord_channels relation/edge. The primary key declared below.
	DiscordChannelsTable = "discord_channel_contracts"
	// DiscordChannelsInverseTable is the table name for the DiscordChannel entity.
	// It exists in this package in order to avoid circular dependency with the "discordchannel" package.
	DiscordChannelsInverseTable = "discord_channels"
)

// Columns holds all SQL columns for contract fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAddress,
	FieldName,
	FieldDescription,
	FieldImageURL,
	FieldThumbnailURL,
	FieldRPCEndpoint,
	FieldConfigVersion,
}

var (
	// TelegramChatsPrimaryKey and TelegramChatsColumn2 are the table columns denoting the
	// primary key for the telegram_chats relation (M2M).
	TelegramChatsPrimaryKey = []string{"telegram_chat_id", "contract_id"}
	// DiscordChannelsPrimaryKey and DiscordChannelsColumn2 are the table columns denoting the
	// primary key for the discord_channels relation (M2M).
	DiscordChannelsPrimaryKey = []string{"discord_channel_id", "contract_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultThumbnailURL holds the default value on creation for the "thumbnail_url" field.
	DefaultThumbnailURL string
	// DefaultRPCEndpoint holds the default value on creation for the "rpc_endpoint" field.
	DefaultRPCEndpoint string
)

// ConfigVersion defines the type for the "config_version" enum field.
type ConfigVersion string

// ConfigVersionUnknown is the default value of the ConfigVersion enum.
const DefaultConfigVersion = ConfigVersionUnknown

// ConfigVersion values.
const (
	ConfigVersionUnknown ConfigVersion = "unknown"
	ConfigVersionV1      ConfigVersion = "v1"
	ConfigVersionV2      ConfigVersion = "v2"
)

func (cv ConfigVersion) String() string {
	return string(cv)
}

// ConfigVersionValidator is a validator for the "config_version" field enum values. It is called by the builders before save.
func ConfigVersionValidator(cv ConfigVersion) error {
	switch cv {
	case ConfigVersionUnknown, ConfigVersionV1, ConfigVersionV2:
		return nil
	default:
		return fmt.Errorf("contract: invalid enum value for config_version field: %q", cv)
	}
}
