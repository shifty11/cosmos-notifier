// Code generated by ent, DO NOT EDIT.

package contract

import (
	"time"
)

const (
	// Label holds the string label denoting the contract type in the database.
	Label = "contract"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldGovToken holds the string denoting the gov_token field in the database.
	FieldGovToken = "gov_token"
	// EdgeProposals holds the string denoting the proposals edge name in mutations.
	EdgeProposals = "proposals"
	// Table holds the table name of the contract in the database.
	Table = "contracts"
	// ProposalsTable is the table that holds the proposals relation/edge.
	ProposalsTable = "proposals"
	// ProposalsInverseTable is the table name for the Proposal entity.
	// It exists in this package in order to avoid circular dependency with the "proposal" package.
	ProposalsInverseTable = "proposals"
	// ProposalsColumn is the table column denoting the proposals relation/edge.
	ProposalsColumn = "contract_proposals"
)

// Columns holds all SQL columns for contract fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAddress,
	FieldName,
	FieldDescription,
	FieldImageURL,
	FieldGovToken,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "contracts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"discord_channel_chains",
	"telegram_chat_contracts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
