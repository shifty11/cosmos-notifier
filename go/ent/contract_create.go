// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-notifier/ent/contract"
	"github.com/shifty11/cosmos-notifier/ent/contractproposal"
	"github.com/shifty11/cosmos-notifier/ent/discordchannel"
	"github.com/shifty11/cosmos-notifier/ent/telegramchat"
)

// ContractCreate is the builder for creating a Contract entity.
type ContractCreate struct {
	config
	mutation *ContractMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *ContractCreate) SetCreateTime(t time.Time) *ContractCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *ContractCreate) SetNillableCreateTime(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *ContractCreate) SetUpdateTime(t time.Time) *ContractCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *ContractCreate) SetNillableUpdateTime(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetAddress sets the "address" field.
func (cc *ContractCreate) SetAddress(s string) *ContractCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetName sets the "name" field.
func (cc *ContractCreate) SetName(s string) *ContractCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ContractCreate) SetDescription(s string) *ContractCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetImageURL sets the "image_url" field.
func (cc *ContractCreate) SetImageURL(s string) *ContractCreate {
	cc.mutation.SetImageURL(s)
	return cc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (cc *ContractCreate) SetThumbnailURL(s string) *ContractCreate {
	cc.mutation.SetThumbnailURL(s)
	return cc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (cc *ContractCreate) SetNillableThumbnailURL(s *string) *ContractCreate {
	if s != nil {
		cc.SetThumbnailURL(*s)
	}
	return cc
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (cc *ContractCreate) SetRPCEndpoint(s string) *ContractCreate {
	cc.mutation.SetRPCEndpoint(s)
	return cc
}

// SetNillableRPCEndpoint sets the "rpc_endpoint" field if the given value is not nil.
func (cc *ContractCreate) SetNillableRPCEndpoint(s *string) *ContractCreate {
	if s != nil {
		cc.SetRPCEndpoint(*s)
	}
	return cc
}

// SetConfigVersion sets the "config_version" field.
func (cc *ContractCreate) SetConfigVersion(cv contract.ConfigVersion) *ContractCreate {
	cc.mutation.SetConfigVersion(cv)
	return cc
}

// SetNillableConfigVersion sets the "config_version" field if the given value is not nil.
func (cc *ContractCreate) SetNillableConfigVersion(cv *contract.ConfigVersion) *ContractCreate {
	if cv != nil {
		cc.SetConfigVersion(*cv)
	}
	return cc
}

// SetGetProposalsQuery sets the "get_proposals_query" field.
func (cc *ContractCreate) SetGetProposalsQuery(s string) *ContractCreate {
	cc.mutation.SetGetProposalsQuery(s)
	return cc
}

// SetNillableGetProposalsQuery sets the "get_proposals_query" field if the given value is not nil.
func (cc *ContractCreate) SetNillableGetProposalsQuery(s *string) *ContractCreate {
	if s != nil {
		cc.SetGetProposalsQuery(*s)
	}
	return cc
}

// AddProposalIDs adds the "proposals" edge to the ContractProposal entity by IDs.
func (cc *ContractCreate) AddProposalIDs(ids ...int) *ContractCreate {
	cc.mutation.AddProposalIDs(ids...)
	return cc
}

// AddProposals adds the "proposals" edges to the ContractProposal entity.
func (cc *ContractCreate) AddProposals(c ...*ContractProposal) *ContractCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddProposalIDs(ids...)
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by IDs.
func (cc *ContractCreate) AddTelegramChatIDs(ids ...int) *ContractCreate {
	cc.mutation.AddTelegramChatIDs(ids...)
	return cc
}

// AddTelegramChats adds the "telegram_chats" edges to the TelegramChat entity.
func (cc *ContractCreate) AddTelegramChats(t ...*TelegramChat) *ContractCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTelegramChatIDs(ids...)
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by IDs.
func (cc *ContractCreate) AddDiscordChannelIDs(ids ...int) *ContractCreate {
	cc.mutation.AddDiscordChannelIDs(ids...)
	return cc
}

// AddDiscordChannels adds the "discord_channels" edges to the DiscordChannel entity.
func (cc *ContractCreate) AddDiscordChannels(d ...*DiscordChannel) *ContractCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDiscordChannelIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cc *ContractCreate) Mutation() *ContractMutation {
	return cc.mutation
}

// Save creates the Contract in the database.
func (cc *ContractCreate) Save(ctx context.Context) (*Contract, error) {
	cc.defaults()
	return withHooks[*Contract, ContractMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContractCreate) SaveX(ctx context.Context) *Contract {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContractCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContractCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContractCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := contract.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := contract.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.ThumbnailURL(); !ok {
		v := contract.DefaultThumbnailURL
		cc.mutation.SetThumbnailURL(v)
	}
	if _, ok := cc.mutation.RPCEndpoint(); !ok {
		v := contract.DefaultRPCEndpoint
		cc.mutation.SetRPCEndpoint(v)
	}
	if _, ok := cc.mutation.ConfigVersion(); !ok {
		v := contract.DefaultConfigVersion
		cc.mutation.SetConfigVersion(v)
	}
	if _, ok := cc.mutation.GetProposalsQuery(); !ok {
		v := contract.DefaultGetProposalsQuery
		cc.mutation.SetGetProposalsQuery(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContractCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Contract.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Contract.update_time"`)}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Contract.address"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Contract.name"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Contract.description"`)}
	}
	if _, ok := cc.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Contract.image_url"`)}
	}
	if _, ok := cc.mutation.ThumbnailURL(); !ok {
		return &ValidationError{Name: "thumbnail_url", err: errors.New(`ent: missing required field "Contract.thumbnail_url"`)}
	}
	if _, ok := cc.mutation.RPCEndpoint(); !ok {
		return &ValidationError{Name: "rpc_endpoint", err: errors.New(`ent: missing required field "Contract.rpc_endpoint"`)}
	}
	if _, ok := cc.mutation.ConfigVersion(); !ok {
		return &ValidationError{Name: "config_version", err: errors.New(`ent: missing required field "Contract.config_version"`)}
	}
	if v, ok := cc.mutation.ConfigVersion(); ok {
		if err := contract.ConfigVersionValidator(v); err != nil {
			return &ValidationError{Name: "config_version", err: fmt.Errorf(`ent: validator failed for field "Contract.config_version": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetProposalsQuery(); !ok {
		return &ValidationError{Name: "get_proposals_query", err: errors.New(`ent: missing required field "Contract.get_proposals_query"`)}
	}
	return nil
}

func (cc *ContractCreate) sqlSave(ctx context.Context) (*Contract, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContractCreate) createSpec() (*Contract, *sqlgraph.CreateSpec) {
	var (
		_node = &Contract{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contract.Table, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(contract.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(contract.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.SetField(contract.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(contract.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(contract.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.ImageURL(); ok {
		_spec.SetField(contract.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := cc.mutation.ThumbnailURL(); ok {
		_spec.SetField(contract.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := cc.mutation.RPCEndpoint(); ok {
		_spec.SetField(contract.FieldRPCEndpoint, field.TypeString, value)
		_node.RPCEndpoint = value
	}
	if value, ok := cc.mutation.ConfigVersion(); ok {
		_spec.SetField(contract.FieldConfigVersion, field.TypeEnum, value)
		_node.ConfigVersion = value
	}
	if value, ok := cc.mutation.GetProposalsQuery(); ok {
		_spec.SetField(contract.FieldGetProposalsQuery, field.TypeString, value)
		_node.GetProposalsQuery = value
	}
	if nodes := cc.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contractproposal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TelegramChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.TelegramChatsTable,
			Columns: contract.TelegramChatsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telegramchat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DiscordChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contract.DiscordChannelsTable,
			Columns: contract.DiscordChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContractCreateBulk is the builder for creating many Contract entities in bulk.
type ContractCreateBulk struct {
	config
	builders []*ContractCreate
}

// Save creates the Contract entities in the database.
func (ccb *ContractCreateBulk) Save(ctx context.Context) ([]*Contract, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contract, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContractCreateBulk) SaveX(ctx context.Context) []*Contract {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContractCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContractCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
