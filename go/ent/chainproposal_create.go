// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/cosmos-notifier/ent/addresstracker"
	"github.com/shifty11/cosmos-notifier/ent/chain"
	"github.com/shifty11/cosmos-notifier/ent/chainproposal"
)

// ChainProposalCreate is the builder for creating a ChainProposal entity.
type ChainProposalCreate struct {
	config
	mutation *ChainProposalMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cpc *ChainProposalCreate) SetCreateTime(t time.Time) *ChainProposalCreate {
	cpc.mutation.SetCreateTime(t)
	return cpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cpc *ChainProposalCreate) SetNillableCreateTime(t *time.Time) *ChainProposalCreate {
	if t != nil {
		cpc.SetCreateTime(*t)
	}
	return cpc
}

// SetUpdateTime sets the "update_time" field.
func (cpc *ChainProposalCreate) SetUpdateTime(t time.Time) *ChainProposalCreate {
	cpc.mutation.SetUpdateTime(t)
	return cpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cpc *ChainProposalCreate) SetNillableUpdateTime(t *time.Time) *ChainProposalCreate {
	if t != nil {
		cpc.SetUpdateTime(*t)
	}
	return cpc
}

// SetProposalID sets the "proposal_id" field.
func (cpc *ChainProposalCreate) SetProposalID(i int) *ChainProposalCreate {
	cpc.mutation.SetProposalID(i)
	return cpc
}

// SetTitle sets the "title" field.
func (cpc *ChainProposalCreate) SetTitle(s string) *ChainProposalCreate {
	cpc.mutation.SetTitle(s)
	return cpc
}

// SetDescription sets the "description" field.
func (cpc *ChainProposalCreate) SetDescription(s string) *ChainProposalCreate {
	cpc.mutation.SetDescription(s)
	return cpc
}

// SetVotingStartTime sets the "voting_start_time" field.
func (cpc *ChainProposalCreate) SetVotingStartTime(t time.Time) *ChainProposalCreate {
	cpc.mutation.SetVotingStartTime(t)
	return cpc
}

// SetVotingEndTime sets the "voting_end_time" field.
func (cpc *ChainProposalCreate) SetVotingEndTime(t time.Time) *ChainProposalCreate {
	cpc.mutation.SetVotingEndTime(t)
	return cpc
}

// SetStatus sets the "status" field.
func (cpc *ChainProposalCreate) SetStatus(c chainproposal.Status) *ChainProposalCreate {
	cpc.mutation.SetStatus(c)
	return cpc
}

// SetChainID sets the "chain" edge to the Chain entity by ID.
func (cpc *ChainProposalCreate) SetChainID(id int) *ChainProposalCreate {
	cpc.mutation.SetChainID(id)
	return cpc
}

// SetNillableChainID sets the "chain" edge to the Chain entity by ID if the given value is not nil.
func (cpc *ChainProposalCreate) SetNillableChainID(id *int) *ChainProposalCreate {
	if id != nil {
		cpc = cpc.SetChainID(*id)
	}
	return cpc
}

// SetChain sets the "chain" edge to the Chain entity.
func (cpc *ChainProposalCreate) SetChain(c *Chain) *ChainProposalCreate {
	return cpc.SetChainID(c.ID)
}

// AddAddressTrackerIDs adds the "address_tracker" edge to the AddressTracker entity by IDs.
func (cpc *ChainProposalCreate) AddAddressTrackerIDs(ids ...int) *ChainProposalCreate {
	cpc.mutation.AddAddressTrackerIDs(ids...)
	return cpc
}

// AddAddressTracker adds the "address_tracker" edges to the AddressTracker entity.
func (cpc *ChainProposalCreate) AddAddressTracker(a ...*AddressTracker) *ChainProposalCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cpc.AddAddressTrackerIDs(ids...)
}

// Mutation returns the ChainProposalMutation object of the builder.
func (cpc *ChainProposalCreate) Mutation() *ChainProposalMutation {
	return cpc.mutation
}

// Save creates the ChainProposal in the database.
func (cpc *ChainProposalCreate) Save(ctx context.Context) (*ChainProposal, error) {
	cpc.defaults()
	return withHooks[*ChainProposal, ChainProposalMutation](ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ChainProposalCreate) SaveX(ctx context.Context) *ChainProposal {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ChainProposalCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ChainProposalCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *ChainProposalCreate) defaults() {
	if _, ok := cpc.mutation.CreateTime(); !ok {
		v := chainproposal.DefaultCreateTime()
		cpc.mutation.SetCreateTime(v)
	}
	if _, ok := cpc.mutation.UpdateTime(); !ok {
		v := chainproposal.DefaultUpdateTime()
		cpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ChainProposalCreate) check() error {
	if _, ok := cpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ChainProposal.create_time"`)}
	}
	if _, ok := cpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ChainProposal.update_time"`)}
	}
	if _, ok := cpc.mutation.ProposalID(); !ok {
		return &ValidationError{Name: "proposal_id", err: errors.New(`ent: missing required field "ChainProposal.proposal_id"`)}
	}
	if _, ok := cpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ChainProposal.title"`)}
	}
	if _, ok := cpc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ChainProposal.description"`)}
	}
	if _, ok := cpc.mutation.VotingStartTime(); !ok {
		return &ValidationError{Name: "voting_start_time", err: errors.New(`ent: missing required field "ChainProposal.voting_start_time"`)}
	}
	if _, ok := cpc.mutation.VotingEndTime(); !ok {
		return &ValidationError{Name: "voting_end_time", err: errors.New(`ent: missing required field "ChainProposal.voting_end_time"`)}
	}
	if _, ok := cpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ChainProposal.status"`)}
	}
	if v, ok := cpc.mutation.Status(); ok {
		if err := chainproposal.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ChainProposal.status": %w`, err)}
		}
	}
	return nil
}

func (cpc *ChainProposalCreate) sqlSave(ctx context.Context) (*ChainProposal, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *ChainProposalCreate) createSpec() (*ChainProposal, *sqlgraph.CreateSpec) {
	var (
		_node = &ChainProposal{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(chainproposal.Table, sqlgraph.NewFieldSpec(chainproposal.FieldID, field.TypeInt))
	)
	if value, ok := cpc.mutation.CreateTime(); ok {
		_spec.SetField(chainproposal.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cpc.mutation.UpdateTime(); ok {
		_spec.SetField(chainproposal.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cpc.mutation.ProposalID(); ok {
		_spec.SetField(chainproposal.FieldProposalID, field.TypeInt, value)
		_node.ProposalID = value
	}
	if value, ok := cpc.mutation.Title(); ok {
		_spec.SetField(chainproposal.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cpc.mutation.Description(); ok {
		_spec.SetField(chainproposal.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cpc.mutation.VotingStartTime(); ok {
		_spec.SetField(chainproposal.FieldVotingStartTime, field.TypeTime, value)
		_node.VotingStartTime = value
	}
	if value, ok := cpc.mutation.VotingEndTime(); ok {
		_spec.SetField(chainproposal.FieldVotingEndTime, field.TypeTime, value)
		_node.VotingEndTime = value
	}
	if value, ok := cpc.mutation.Status(); ok {
		_spec.SetField(chainproposal.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := cpc.mutation.ChainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chainproposal.ChainTable,
			Columns: []string{chainproposal.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chain_chain_proposals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.AddressTrackerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   chainproposal.AddressTrackerTable,
			Columns: chainproposal.AddressTrackerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresstracker.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChainProposalCreateBulk is the builder for creating many ChainProposal entities in bulk.
type ChainProposalCreateBulk struct {
	config
	builders []*ChainProposalCreate
}

// Save creates the ChainProposal entities in the database.
func (cpcb *ChainProposalCreateBulk) Save(ctx context.Context) ([]*ChainProposal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ChainProposal, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChainProposalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ChainProposalCreateBulk) SaveX(ctx context.Context) []*ChainProposal {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ChainProposalCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ChainProposalCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
