// Code generated by ent, DO NOT EDIT.

package validator

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shifty11/cosmos-notifier/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldUpdateTime, v))
}

// OperatorAddress applies equality check predicate on the "operator_address" field. It's identical to OperatorAddressEQ.
func OperatorAddress(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldOperatorAddress, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldAddress, v))
}

// Moniker applies equality check predicate on the "moniker" field. It's identical to MonikerEQ.
func Moniker(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldMoniker, v))
}

// FirstInactiveTime applies equality check predicate on the "first_inactive_time" field. It's identical to FirstInactiveTimeEQ.
func FirstInactiveTime(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldFirstInactiveTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldUpdateTime, v))
}

// OperatorAddressEQ applies the EQ predicate on the "operator_address" field.
func OperatorAddressEQ(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldOperatorAddress, v))
}

// OperatorAddressNEQ applies the NEQ predicate on the "operator_address" field.
func OperatorAddressNEQ(v string) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldOperatorAddress, v))
}

// OperatorAddressIn applies the In predicate on the "operator_address" field.
func OperatorAddressIn(vs ...string) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldOperatorAddress, vs...))
}

// OperatorAddressNotIn applies the NotIn predicate on the "operator_address" field.
func OperatorAddressNotIn(vs ...string) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldOperatorAddress, vs...))
}

// OperatorAddressGT applies the GT predicate on the "operator_address" field.
func OperatorAddressGT(v string) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldOperatorAddress, v))
}

// OperatorAddressGTE applies the GTE predicate on the "operator_address" field.
func OperatorAddressGTE(v string) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldOperatorAddress, v))
}

// OperatorAddressLT applies the LT predicate on the "operator_address" field.
func OperatorAddressLT(v string) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldOperatorAddress, v))
}

// OperatorAddressLTE applies the LTE predicate on the "operator_address" field.
func OperatorAddressLTE(v string) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldOperatorAddress, v))
}

// OperatorAddressContains applies the Contains predicate on the "operator_address" field.
func OperatorAddressContains(v string) predicate.Validator {
	return predicate.Validator(sql.FieldContains(FieldOperatorAddress, v))
}

// OperatorAddressHasPrefix applies the HasPrefix predicate on the "operator_address" field.
func OperatorAddressHasPrefix(v string) predicate.Validator {
	return predicate.Validator(sql.FieldHasPrefix(FieldOperatorAddress, v))
}

// OperatorAddressHasSuffix applies the HasSuffix predicate on the "operator_address" field.
func OperatorAddressHasSuffix(v string) predicate.Validator {
	return predicate.Validator(sql.FieldHasSuffix(FieldOperatorAddress, v))
}

// OperatorAddressEqualFold applies the EqualFold predicate on the "operator_address" field.
func OperatorAddressEqualFold(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEqualFold(FieldOperatorAddress, v))
}

// OperatorAddressContainsFold applies the ContainsFold predicate on the "operator_address" field.
func OperatorAddressContainsFold(v string) predicate.Validator {
	return predicate.Validator(sql.FieldContainsFold(FieldOperatorAddress, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Validator {
	return predicate.Validator(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Validator {
	return predicate.Validator(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Validator {
	return predicate.Validator(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Validator {
	return predicate.Validator(sql.FieldContainsFold(FieldAddress, v))
}

// MonikerEQ applies the EQ predicate on the "moniker" field.
func MonikerEQ(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldMoniker, v))
}

// MonikerNEQ applies the NEQ predicate on the "moniker" field.
func MonikerNEQ(v string) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldMoniker, v))
}

// MonikerIn applies the In predicate on the "moniker" field.
func MonikerIn(vs ...string) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldMoniker, vs...))
}

// MonikerNotIn applies the NotIn predicate on the "moniker" field.
func MonikerNotIn(vs ...string) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldMoniker, vs...))
}

// MonikerGT applies the GT predicate on the "moniker" field.
func MonikerGT(v string) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldMoniker, v))
}

// MonikerGTE applies the GTE predicate on the "moniker" field.
func MonikerGTE(v string) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldMoniker, v))
}

// MonikerLT applies the LT predicate on the "moniker" field.
func MonikerLT(v string) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldMoniker, v))
}

// MonikerLTE applies the LTE predicate on the "moniker" field.
func MonikerLTE(v string) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldMoniker, v))
}

// MonikerContains applies the Contains predicate on the "moniker" field.
func MonikerContains(v string) predicate.Validator {
	return predicate.Validator(sql.FieldContains(FieldMoniker, v))
}

// MonikerHasPrefix applies the HasPrefix predicate on the "moniker" field.
func MonikerHasPrefix(v string) predicate.Validator {
	return predicate.Validator(sql.FieldHasPrefix(FieldMoniker, v))
}

// MonikerHasSuffix applies the HasSuffix predicate on the "moniker" field.
func MonikerHasSuffix(v string) predicate.Validator {
	return predicate.Validator(sql.FieldHasSuffix(FieldMoniker, v))
}

// MonikerEqualFold applies the EqualFold predicate on the "moniker" field.
func MonikerEqualFold(v string) predicate.Validator {
	return predicate.Validator(sql.FieldEqualFold(FieldMoniker, v))
}

// MonikerContainsFold applies the ContainsFold predicate on the "moniker" field.
func MonikerContainsFold(v string) predicate.Validator {
	return predicate.Validator(sql.FieldContainsFold(FieldMoniker, v))
}

// FirstInactiveTimeEQ applies the EQ predicate on the "first_inactive_time" field.
func FirstInactiveTimeEQ(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldEQ(FieldFirstInactiveTime, v))
}

// FirstInactiveTimeNEQ applies the NEQ predicate on the "first_inactive_time" field.
func FirstInactiveTimeNEQ(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldNEQ(FieldFirstInactiveTime, v))
}

// FirstInactiveTimeIn applies the In predicate on the "first_inactive_time" field.
func FirstInactiveTimeIn(vs ...time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldIn(FieldFirstInactiveTime, vs...))
}

// FirstInactiveTimeNotIn applies the NotIn predicate on the "first_inactive_time" field.
func FirstInactiveTimeNotIn(vs ...time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldNotIn(FieldFirstInactiveTime, vs...))
}

// FirstInactiveTimeGT applies the GT predicate on the "first_inactive_time" field.
func FirstInactiveTimeGT(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldGT(FieldFirstInactiveTime, v))
}

// FirstInactiveTimeGTE applies the GTE predicate on the "first_inactive_time" field.
func FirstInactiveTimeGTE(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldGTE(FieldFirstInactiveTime, v))
}

// FirstInactiveTimeLT applies the LT predicate on the "first_inactive_time" field.
func FirstInactiveTimeLT(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldLT(FieldFirstInactiveTime, v))
}

// FirstInactiveTimeLTE applies the LTE predicate on the "first_inactive_time" field.
func FirstInactiveTimeLTE(v time.Time) predicate.Validator {
	return predicate.Validator(sql.FieldLTE(FieldFirstInactiveTime, v))
}

// FirstInactiveTimeIsNil applies the IsNil predicate on the "first_inactive_time" field.
func FirstInactiveTimeIsNil() predicate.Validator {
	return predicate.Validator(sql.FieldIsNull(FieldFirstInactiveTime))
}

// FirstInactiveTimeNotNil applies the NotNil predicate on the "first_inactive_time" field.
func FirstInactiveTimeNotNil() predicate.Validator {
	return predicate.Validator(sql.FieldNotNull(FieldFirstInactiveTime))
}

// HasChain applies the HasEdge predicate on the "chain" edge.
func HasChain() predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChainTable, ChainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChainWith applies the HasEdge predicate on the "chain" edge with a given conditions (other predicates).
func HasChainWith(preds ...predicate.Chain) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChainInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChainTable, ChainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddressTrackers applies the HasEdge predicate on the "address_trackers" edge.
func HasAddressTrackers() predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressTrackersTable, AddressTrackersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressTrackersWith applies the HasEdge predicate on the "address_trackers" edge with a given conditions (other predicates).
func HasAddressTrackersWith(preds ...predicate.AddressTracker) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AddressTrackersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressTrackersTable, AddressTrackersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTelegramChats applies the HasEdge predicate on the "telegram_chats" edge.
func HasTelegramChats() predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TelegramChatsTable, TelegramChatsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTelegramChatsWith applies the HasEdge predicate on the "telegram_chats" edge with a given conditions (other predicates).
func HasTelegramChatsWith(preds ...predicate.TelegramChat) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TelegramChatsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TelegramChatsTable, TelegramChatsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscordChannels applies the HasEdge predicate on the "discord_channels" edge.
func HasDiscordChannels() predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DiscordChannelsTable, DiscordChannelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscordChannelsWith applies the HasEdge predicate on the "discord_channels" edge with a given conditions (other predicates).
func HasDiscordChannelsWith(preds ...predicate.DiscordChannel) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiscordChannelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DiscordChannelsTable, DiscordChannelsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Validator) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Validator) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Validator) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		p(s.Not())
	})
}
