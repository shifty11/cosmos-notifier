// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/cosmos-notifier/ent/chain"
	"github.com/shifty11/cosmos-notifier/ent/validator"
)

// Validator is the model entity for the Validator schema.
type Validator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OperatorAddress holds the value of the "operator_address" field.
	OperatorAddress string `json:"operator_address,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Moniker holds the value of the "moniker" field.
	Moniker string `json:"moniker,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ValidatorQuery when eager-loading is set.
	Edges            ValidatorEdges `json:"edges"`
	chain_validators *int
}

// ValidatorEdges holds the relations/edges for other nodes in the graph.
type ValidatorEdges struct {
	// Chain holds the value of the chain edge.
	Chain *Chain `json:"chain,omitempty"`
	// AddressTrackers holds the value of the address_trackers edge.
	AddressTrackers []*AddressTracker `json:"address_trackers,omitempty"`
	// TelegramChats holds the value of the telegram_chats edge.
	TelegramChats []*TelegramChat `json:"telegram_chats,omitempty"`
	// DiscordChannels holds the value of the discord_channels edge.
	DiscordChannels []*DiscordChannel `json:"discord_channels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ChainOrErr returns the Chain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ValidatorEdges) ChainOrErr() (*Chain, error) {
	if e.loadedTypes[0] {
		if e.Chain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chain.Label}
		}
		return e.Chain, nil
	}
	return nil, &NotLoadedError{edge: "chain"}
}

// AddressTrackersOrErr returns the AddressTrackers value or an error if the edge
// was not loaded in eager-loading.
func (e ValidatorEdges) AddressTrackersOrErr() ([]*AddressTracker, error) {
	if e.loadedTypes[1] {
		return e.AddressTrackers, nil
	}
	return nil, &NotLoadedError{edge: "address_trackers"}
}

// TelegramChatsOrErr returns the TelegramChats value or an error if the edge
// was not loaded in eager-loading.
func (e ValidatorEdges) TelegramChatsOrErr() ([]*TelegramChat, error) {
	if e.loadedTypes[2] {
		return e.TelegramChats, nil
	}
	return nil, &NotLoadedError{edge: "telegram_chats"}
}

// DiscordChannelsOrErr returns the DiscordChannels value or an error if the edge
// was not loaded in eager-loading.
func (e ValidatorEdges) DiscordChannelsOrErr() ([]*DiscordChannel, error) {
	if e.loadedTypes[3] {
		return e.DiscordChannels, nil
	}
	return nil, &NotLoadedError{edge: "discord_channels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Validator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case validator.FieldID:
			values[i] = new(sql.NullInt64)
		case validator.FieldOperatorAddress, validator.FieldAddress, validator.FieldMoniker:
			values[i] = new(sql.NullString)
		case validator.FieldCreateTime, validator.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case validator.ForeignKeys[0]: // chain_validators
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Validator", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Validator fields.
func (v *Validator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case validator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case validator.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				v.CreateTime = value.Time
			}
		case validator.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				v.UpdateTime = value.Time
			}
		case validator.FieldOperatorAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_address", values[i])
			} else if value.Valid {
				v.OperatorAddress = value.String
			}
		case validator.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				v.Address = value.String
			}
		case validator.FieldMoniker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field moniker", values[i])
			} else if value.Valid {
				v.Moniker = value.String
			}
		case validator.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chain_validators", value)
			} else if value.Valid {
				v.chain_validators = new(int)
				*v.chain_validators = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChain queries the "chain" edge of the Validator entity.
func (v *Validator) QueryChain() *ChainQuery {
	return NewValidatorClient(v.config).QueryChain(v)
}

// QueryAddressTrackers queries the "address_trackers" edge of the Validator entity.
func (v *Validator) QueryAddressTrackers() *AddressTrackerQuery {
	return NewValidatorClient(v.config).QueryAddressTrackers(v)
}

// QueryTelegramChats queries the "telegram_chats" edge of the Validator entity.
func (v *Validator) QueryTelegramChats() *TelegramChatQuery {
	return NewValidatorClient(v.config).QueryTelegramChats(v)
}

// QueryDiscordChannels queries the "discord_channels" edge of the Validator entity.
func (v *Validator) QueryDiscordChannels() *DiscordChannelQuery {
	return NewValidatorClient(v.config).QueryDiscordChannels(v)
}

// Update returns a builder for updating this Validator.
// Note that you need to call Validator.Unwrap() before calling this method if this Validator
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Validator) Update() *ValidatorUpdateOne {
	return NewValidatorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Validator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Validator) Unwrap() *Validator {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Validator is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Validator) String() string {
	var builder strings.Builder
	builder.WriteString("Validator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("create_time=")
	builder.WriteString(v.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(v.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operator_address=")
	builder.WriteString(v.OperatorAddress)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(v.Address)
	builder.WriteString(", ")
	builder.WriteString("moniker=")
	builder.WriteString(v.Moniker)
	builder.WriteByte(')')
	return builder.String()
}

// Validators is a parsable slice of Validator.
type Validators []*Validator
