// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shifty11/dao-dao-notifier/ent/contract"
	"github.com/shifty11/dao-dao-notifier/ent/predicate"
	"github.com/shifty11/dao-dao-notifier/ent/proposal"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks    []Hook
	mutation *ContractMutation
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *ContractUpdate) SetUpdateTime(t time.Time) *ContractUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetAddress sets the "address" field.
func (cu *ContractUpdate) SetAddress(s string) *ContractUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetName sets the "name" field.
func (cu *ContractUpdate) SetName(s string) *ContractUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ContractUpdate) SetDescription(s string) *ContractUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetImageURL sets the "image_url" field.
func (cu *ContractUpdate) SetImageURL(s string) *ContractUpdate {
	cu.mutation.SetImageURL(s)
	return cu
}

// SetGovToken sets the "gov_token" field.
func (cu *ContractUpdate) SetGovToken(s string) *ContractUpdate {
	cu.mutation.SetGovToken(s)
	return cu
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by IDs.
func (cu *ContractUpdate) AddProposalIDs(ids ...int) *ContractUpdate {
	cu.mutation.AddProposalIDs(ids...)
	return cu
}

// AddProposals adds the "proposals" edges to the Proposal entity.
func (cu *ContractUpdate) AddProposals(p ...*Proposal) *ContractUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProposalIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// ClearProposals clears all "proposals" edges to the Proposal entity.
func (cu *ContractUpdate) ClearProposals() *ContractUpdate {
	cu.mutation.ClearProposals()
	return cu
}

// RemoveProposalIDs removes the "proposals" edge to Proposal entities by IDs.
func (cu *ContractUpdate) RemoveProposalIDs(ids ...int) *ContractUpdate {
	cu.mutation.RemoveProposalIDs(ids...)
	return cu
}

// RemoveProposals removes "proposals" edges to Proposal entities.
func (cu *ContractUpdate) RemoveProposals(p ...*Proposal) *ContractUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProposalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := contract.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contract.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldAddress,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldName,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldDescription,
		})
	}
	if value, ok := cu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldImageURL,
		})
	}
	if value, ok := cu.mutation.GovToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldGovToken,
		})
	}
	if cu.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProposalsIDs(); len(nodes) > 0 && !cu.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContractMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *ContractUpdateOne) SetUpdateTime(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *ContractUpdateOne) SetAddress(s string) *ContractUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ContractUpdateOne) SetName(s string) *ContractUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ContractUpdateOne) SetDescription(s string) *ContractUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetImageURL sets the "image_url" field.
func (cuo *ContractUpdateOne) SetImageURL(s string) *ContractUpdateOne {
	cuo.mutation.SetImageURL(s)
	return cuo
}

// SetGovToken sets the "gov_token" field.
func (cuo *ContractUpdateOne) SetGovToken(s string) *ContractUpdateOne {
	cuo.mutation.SetGovToken(s)
	return cuo
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by IDs.
func (cuo *ContractUpdateOne) AddProposalIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.AddProposalIDs(ids...)
	return cuo
}

// AddProposals adds the "proposals" edges to the Proposal entity.
func (cuo *ContractUpdateOne) AddProposals(p ...*Proposal) *ContractUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProposalIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// ClearProposals clears all "proposals" edges to the Proposal entity.
func (cuo *ContractUpdateOne) ClearProposals() *ContractUpdateOne {
	cuo.mutation.ClearProposals()
	return cuo
}

// RemoveProposalIDs removes the "proposals" edge to Proposal entities by IDs.
func (cuo *ContractUpdateOne) RemoveProposalIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.RemoveProposalIDs(ids...)
	return cuo
}

// RemoveProposals removes "proposals" edges to Proposal entities.
func (cuo *ContractUpdateOne) RemoveProposals(p ...*Proposal) *ContractUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProposalIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	var (
		err  error
		node *Contract
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Contract)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ContractMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := contract.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contract.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldAddress,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldName,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldImageURL,
		})
	}
	if value, ok := cuo.mutation.GovToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldGovToken,
		})
	}
	if cuo.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProposalsIDs(); len(nodes) > 0 && !cuo.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.ProposalsTable,
			Columns: []string{contract.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proposal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
