// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeTelegramChats holds the string denoting the telegram_chats edge name in mutations.
	EdgeTelegramChats = "telegram_chats"
	// EdgeDiscordChannels holds the string denoting the discord_channels edge name in mutations.
	EdgeDiscordChannels = "discord_channels"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TelegramChatsTable is the table that holds the telegram_chats relation/edge. The primary key declared below.
	TelegramChatsTable = "telegram_chat_users"
	// TelegramChatsInverseTable is the table name for the TelegramChat entity.
	// It exists in this package in order to avoid circular dependency with the "telegramchat" package.
	TelegramChatsInverseTable = "telegram_chats"
	// DiscordChannelsTable is the table that holds the discord_channels relation/edge. The primary key declared below.
	DiscordChannelsTable = "discord_channel_users"
	// DiscordChannelsInverseTable is the table name for the DiscordChannel entity.
	// It exists in this package in order to avoid circular dependency with the "discordchannel" package.
	DiscordChannelsInverseTable = "discord_channels"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUserID,
	FieldName,
	FieldType,
	FieldRole,
}

var (
	// TelegramChatsPrimaryKey and TelegramChatsColumn2 are the table columns denoting the
	// primary key for the telegram_chats relation (M2M).
	TelegramChatsPrimaryKey = []string{"telegram_chat_id", "user_id"}
	// DiscordChannelsPrimaryKey and DiscordChannelsColumn2 are the table columns denoting the
	// primary key for the discord_channels relation (M2M).
	DiscordChannelsPrimaryKey = []string{"discord_channel_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeTelegram Type = "telegram"
	TypeDiscord  Type = "discord"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTelegram, TypeDiscord:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}

// Role defines the type for the "role" enum field.
type Role string

// RoleUser is the default value of the Role enum.
const DefaultRole = RoleUser

// Role values.
const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}
