// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/shifty11/dao-dao-notifier/ent/contract"
	"github.com/shifty11/dao-dao-notifier/ent/discordchannel"
	"github.com/shifty11/dao-dao-notifier/ent/predicate"
	"github.com/shifty11/dao-dao-notifier/ent/proposal"
	"github.com/shifty11/dao-dao-notifier/ent/telegramchat"
	"github.com/shifty11/dao-dao-notifier/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContract       = "Contract"
	TypeDiscordChannel = "DiscordChannel"
	TypeProposal       = "Proposal"
	TypeTelegramChat   = "TelegramChat"
	TypeUser           = "User"
)

// ContractMutation represents an operation that mutates the Contract nodes in the graph.
type ContractMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	address          *string
	name             *string
	description      *string
	image_url        *string
	gov_token        *string
	clearedFields    map[string]struct{}
	proposals        map[int]struct{}
	removedproposals map[int]struct{}
	clearedproposals bool
	done             bool
	oldValue         func(context.Context) (*Contract, error)
	predicates       []predicate.Contract
}

var _ ent.Mutation = (*ContractMutation)(nil)

// contractOption allows management of the mutation configuration using functional options.
type contractOption func(*ContractMutation)

// newContractMutation creates new mutation for the Contract entity.
func newContractMutation(c config, op Op, opts ...contractOption) *ContractMutation {
	m := &ContractMutation{
		config:        c,
		op:            op,
		typ:           TypeContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContractID sets the ID field of the mutation.
func withContractID(id int) contractOption {
	return func(m *ContractMutation) {
		var (
			err   error
			once  sync.Once
			value *Contract
		)
		m.oldValue = func(ctx context.Context) (*Contract, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContract sets the old Contract of the mutation.
func withContract(node *Contract) contractOption {
	return func(m *ContractMutation) {
		m.oldValue = func(context.Context) (*Contract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContractMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContractMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contract.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ContractMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ContractMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ContractMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ContractMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ContractMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ContractMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetAddress sets the "address" field.
func (m *ContractMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ContractMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ContractMutation) ResetAddress() {
	m.address = nil
}

// SetName sets the "name" field.
func (m *ContractMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ContractMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ContractMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ContractMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ContractMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ContractMutation) ResetDescription() {
	m.description = nil
}

// SetImageURL sets the "image_url" field.
func (m *ContractMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *ContractMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *ContractMutation) ResetImageURL() {
	m.image_url = nil
}

// SetGovToken sets the "gov_token" field.
func (m *ContractMutation) SetGovToken(s string) {
	m.gov_token = &s
}

// GovToken returns the value of the "gov_token" field in the mutation.
func (m *ContractMutation) GovToken() (r string, exists bool) {
	v := m.gov_token
	if v == nil {
		return
	}
	return *v, true
}

// OldGovToken returns the old "gov_token" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldGovToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGovToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGovToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGovToken: %w", err)
	}
	return oldValue.GovToken, nil
}

// ResetGovToken resets all changes to the "gov_token" field.
func (m *ContractMutation) ResetGovToken() {
	m.gov_token = nil
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by ids.
func (m *ContractMutation) AddProposalIDs(ids ...int) {
	if m.proposals == nil {
		m.proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.proposals[ids[i]] = struct{}{}
	}
}

// ClearProposals clears the "proposals" edge to the Proposal entity.
func (m *ContractMutation) ClearProposals() {
	m.clearedproposals = true
}

// ProposalsCleared reports if the "proposals" edge to the Proposal entity was cleared.
func (m *ContractMutation) ProposalsCleared() bool {
	return m.clearedproposals
}

// RemoveProposalIDs removes the "proposals" edge to the Proposal entity by IDs.
func (m *ContractMutation) RemoveProposalIDs(ids ...int) {
	if m.removedproposals == nil {
		m.removedproposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proposals, ids[i])
		m.removedproposals[ids[i]] = struct{}{}
	}
}

// RemovedProposals returns the removed IDs of the "proposals" edge to the Proposal entity.
func (m *ContractMutation) RemovedProposalsIDs() (ids []int) {
	for id := range m.removedproposals {
		ids = append(ids, id)
	}
	return
}

// ProposalsIDs returns the "proposals" edge IDs in the mutation.
func (m *ContractMutation) ProposalsIDs() (ids []int) {
	for id := range m.proposals {
		ids = append(ids, id)
	}
	return
}

// ResetProposals resets all changes to the "proposals" edge.
func (m *ContractMutation) ResetProposals() {
	m.proposals = nil
	m.clearedproposals = false
	m.removedproposals = nil
}

// Where appends a list predicates to the ContractMutation builder.
func (m *ContractMutation) Where(ps ...predicate.Contract) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContractMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Contract).
func (m *ContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContractMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, contract.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, contract.FieldUpdateTime)
	}
	if m.address != nil {
		fields = append(fields, contract.FieldAddress)
	}
	if m.name != nil {
		fields = append(fields, contract.FieldName)
	}
	if m.description != nil {
		fields = append(fields, contract.FieldDescription)
	}
	if m.image_url != nil {
		fields = append(fields, contract.FieldImageURL)
	}
	if m.gov_token != nil {
		fields = append(fields, contract.FieldGovToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contract.FieldCreateTime:
		return m.CreateTime()
	case contract.FieldUpdateTime:
		return m.UpdateTime()
	case contract.FieldAddress:
		return m.Address()
	case contract.FieldName:
		return m.Name()
	case contract.FieldDescription:
		return m.Description()
	case contract.FieldImageURL:
		return m.ImageURL()
	case contract.FieldGovToken:
		return m.GovToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contract.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case contract.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case contract.FieldAddress:
		return m.OldAddress(ctx)
	case contract.FieldName:
		return m.OldName(ctx)
	case contract.FieldDescription:
		return m.OldDescription(ctx)
	case contract.FieldImageURL:
		return m.OldImageURL(ctx)
	case contract.FieldGovToken:
		return m.OldGovToken(ctx)
	}
	return nil, fmt.Errorf("unknown Contract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contract.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case contract.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case contract.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case contract.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case contract.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case contract.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case contract.FieldGovToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGovToken(v)
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContractMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContractMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Contract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContractMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContractMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Contract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContractMutation) ResetField(name string) error {
	switch name {
	case contract.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case contract.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case contract.FieldAddress:
		m.ResetAddress()
		return nil
	case contract.FieldName:
		m.ResetName()
		return nil
	case contract.FieldDescription:
		m.ResetDescription()
		return nil
	case contract.FieldImageURL:
		m.ResetImageURL()
		return nil
	case contract.FieldGovToken:
		m.ResetGovToken()
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.proposals != nil {
		edges = append(edges, contract.EdgeProposals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContractMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contract.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.proposals))
		for id := range m.proposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproposals != nil {
		edges = append(edges, contract.EdgeProposals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContractMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case contract.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.removedproposals))
		for id := range m.removedproposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproposals {
		edges = append(edges, contract.EdgeProposals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContractMutation) EdgeCleared(name string) bool {
	switch name {
	case contract.EdgeProposals:
		return m.clearedproposals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContractMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Contract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContractMutation) ResetEdge(name string) error {
	switch name {
	case contract.EdgeProposals:
		m.ResetProposals()
		return nil
	}
	return fmt.Errorf("unknown Contract edge %s", name)
}

// DiscordChannelMutation represents an operation that mutates the DiscordChannel nodes in the graph.
type DiscordChannelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	channel_id    *int64
	addchannel_id *int64
	name          *string
	is_group      *bool
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	chains        map[int]struct{}
	removedchains map[int]struct{}
	clearedchains bool
	done          bool
	oldValue      func(context.Context) (*DiscordChannel, error)
	predicates    []predicate.DiscordChannel
}

var _ ent.Mutation = (*DiscordChannelMutation)(nil)

// discordchannelOption allows management of the mutation configuration using functional options.
type discordchannelOption func(*DiscordChannelMutation)

// newDiscordChannelMutation creates new mutation for the DiscordChannel entity.
func newDiscordChannelMutation(c config, op Op, opts ...discordchannelOption) *DiscordChannelMutation {
	m := &DiscordChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordChannelID sets the ID field of the mutation.
func withDiscordChannelID(id int) discordchannelOption {
	return func(m *DiscordChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordChannel
		)
		m.oldValue = func(ctx context.Context) (*DiscordChannel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordChannel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordChannel sets the old DiscordChannel of the mutation.
func withDiscordChannel(node *DiscordChannel) discordchannelOption {
	return func(m *DiscordChannelMutation) {
		m.oldValue = func(context.Context) (*DiscordChannel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordChannelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordChannelMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordChannel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DiscordChannelMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DiscordChannelMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DiscordChannelMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DiscordChannelMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DiscordChannelMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DiscordChannelMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChannelID sets the "channel_id" field.
func (m *DiscordChannelMutation) SetChannelID(i int64) {
	m.channel_id = &i
	m.addchannel_id = nil
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *DiscordChannelMutation) ChannelID() (r int64, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldChannelID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// AddChannelID adds i to the "channel_id" field.
func (m *DiscordChannelMutation) AddChannelID(i int64) {
	if m.addchannel_id != nil {
		*m.addchannel_id += i
	} else {
		m.addchannel_id = &i
	}
}

// AddedChannelID returns the value that was added to the "channel_id" field in this mutation.
func (m *DiscordChannelMutation) AddedChannelID() (r int64, exists bool) {
	v := m.addchannel_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *DiscordChannelMutation) ResetChannelID() {
	m.channel_id = nil
	m.addchannel_id = nil
}

// SetName sets the "name" field.
func (m *DiscordChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscordChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscordChannelMutation) ResetName() {
	m.name = nil
}

// SetIsGroup sets the "is_group" field.
func (m *DiscordChannelMutation) SetIsGroup(b bool) {
	m.is_group = &b
}

// IsGroup returns the value of the "is_group" field in the mutation.
func (m *DiscordChannelMutation) IsGroup() (r bool, exists bool) {
	v := m.is_group
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "is_group" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "is_group" field.
func (m *DiscordChannelMutation) ResetIsGroup() {
	m.is_group = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *DiscordChannelMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *DiscordChannelMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DiscordChannelMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *DiscordChannelMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DiscordChannelMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DiscordChannelMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddChainIDs adds the "chains" edge to the Contract entity by ids.
func (m *DiscordChannelMutation) AddChainIDs(ids ...int) {
	if m.chains == nil {
		m.chains = make(map[int]struct{})
	}
	for i := range ids {
		m.chains[ids[i]] = struct{}{}
	}
}

// ClearChains clears the "chains" edge to the Contract entity.
func (m *DiscordChannelMutation) ClearChains() {
	m.clearedchains = true
}

// ChainsCleared reports if the "chains" edge to the Contract entity was cleared.
func (m *DiscordChannelMutation) ChainsCleared() bool {
	return m.clearedchains
}

// RemoveChainIDs removes the "chains" edge to the Contract entity by IDs.
func (m *DiscordChannelMutation) RemoveChainIDs(ids ...int) {
	if m.removedchains == nil {
		m.removedchains = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chains, ids[i])
		m.removedchains[ids[i]] = struct{}{}
	}
}

// RemovedChains returns the removed IDs of the "chains" edge to the Contract entity.
func (m *DiscordChannelMutation) RemovedChainsIDs() (ids []int) {
	for id := range m.removedchains {
		ids = append(ids, id)
	}
	return
}

// ChainsIDs returns the "chains" edge IDs in the mutation.
func (m *DiscordChannelMutation) ChainsIDs() (ids []int) {
	for id := range m.chains {
		ids = append(ids, id)
	}
	return
}

// ResetChains resets all changes to the "chains" edge.
func (m *DiscordChannelMutation) ResetChains() {
	m.chains = nil
	m.clearedchains = false
	m.removedchains = nil
}

// Where appends a list predicates to the DiscordChannelMutation builder.
func (m *DiscordChannelMutation) Where(ps ...predicate.DiscordChannel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DiscordChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DiscordChannel).
func (m *DiscordChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordChannelMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, discordchannel.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, discordchannel.FieldUpdateTime)
	}
	if m.channel_id != nil {
		fields = append(fields, discordchannel.FieldChannelID)
	}
	if m.name != nil {
		fields = append(fields, discordchannel.FieldName)
	}
	if m.is_group != nil {
		fields = append(fields, discordchannel.FieldIsGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discordchannel.FieldCreateTime:
		return m.CreateTime()
	case discordchannel.FieldUpdateTime:
		return m.UpdateTime()
	case discordchannel.FieldChannelID:
		return m.ChannelID()
	case discordchannel.FieldName:
		return m.Name()
	case discordchannel.FieldIsGroup:
		return m.IsGroup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discordchannel.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case discordchannel.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case discordchannel.FieldChannelID:
		return m.OldChannelID(ctx)
	case discordchannel.FieldName:
		return m.OldName(ctx)
	case discordchannel.FieldIsGroup:
		return m.OldIsGroup(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordChannel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discordchannel.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case discordchannel.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case discordchannel.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case discordchannel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case discordchannel.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordChannelMutation) AddedFields() []string {
	var fields []string
	if m.addchannel_id != nil {
		fields = append(fields, discordchannel.FieldChannelID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case discordchannel.FieldChannelID:
		return m.AddedChannelID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case discordchannel.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChannelID(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiscordChannel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordChannelMutation) ResetField(name string) error {
	switch name {
	case discordchannel.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case discordchannel.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case discordchannel.FieldChannelID:
		m.ResetChannelID()
		return nil
	case discordchannel.FieldName:
		m.ResetName()
		return nil
	case discordchannel.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, discordchannel.EdgeUser)
	}
	if m.chains != nil {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discordchannel.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case discordchannel.EdgeChains:
		ids := make([]ent.Value, 0, len(m.chains))
		for id := range m.chains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchains != nil {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discordchannel.EdgeChains:
		ids := make([]ent.Value, 0, len(m.removedchains))
		for id := range m.removedchains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, discordchannel.EdgeUser)
	}
	if m.clearedchains {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case discordchannel.EdgeUser:
		return m.cleareduser
	case discordchannel.EdgeChains:
		return m.clearedchains
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordChannelMutation) ClearEdge(name string) error {
	switch name {
	case discordchannel.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordChannelMutation) ResetEdge(name string) error {
	switch name {
	case discordchannel.EdgeUser:
		m.ResetUser()
		return nil
	case discordchannel.EdgeChains:
		m.ResetChains()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel edge %s", name)
}

// ProposalMutation represents an operation that mutates the Proposal nodes in the graph.
type ProposalMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	proposal_id     *string
	title           *string
	description     *string
	expires_at      *time.Time
	status          *proposal.Status
	clearedFields   map[string]struct{}
	contract        *int
	clearedcontract bool
	done            bool
	oldValue        func(context.Context) (*Proposal, error)
	predicates      []predicate.Proposal
}

var _ ent.Mutation = (*ProposalMutation)(nil)

// proposalOption allows management of the mutation configuration using functional options.
type proposalOption func(*ProposalMutation)

// newProposalMutation creates new mutation for the Proposal entity.
func newProposalMutation(c config, op Op, opts ...proposalOption) *ProposalMutation {
	m := &ProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProposalID sets the ID field of the mutation.
func withProposalID(id int) proposalOption {
	return func(m *ProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *Proposal
		)
		m.oldValue = func(ctx context.Context) (*Proposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Proposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProposal sets the old Proposal of the mutation.
func withProposal(node *Proposal) proposalOption {
	return func(m *ProposalMutation) {
		m.oldValue = func(context.Context) (*Proposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Proposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ProposalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ProposalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ProposalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ProposalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ProposalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ProposalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetProposalID sets the "proposal_id" field.
func (m *ProposalMutation) SetProposalID(s string) {
	m.proposal_id = &s
}

// ProposalID returns the value of the "proposal_id" field in the mutation.
func (m *ProposalMutation) ProposalID() (r string, exists bool) {
	v := m.proposal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProposalID returns the old "proposal_id" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldProposalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProposalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProposalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProposalID: %w", err)
	}
	return oldValue.ProposalID, nil
}

// ResetProposalID resets all changes to the "proposal_id" field.
func (m *ProposalMutation) ResetProposalID() {
	m.proposal_id = nil
}

// SetTitle sets the "title" field.
func (m *ProposalMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProposalMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProposalMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ProposalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProposalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProposalMutation) ResetDescription() {
	m.description = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *ProposalMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *ProposalMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *ProposalMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetStatus sets the "status" field.
func (m *ProposalMutation) SetStatus(pr proposal.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProposalMutation) Status() (r proposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldStatus(ctx context.Context) (v proposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProposalMutation) ResetStatus() {
	m.status = nil
}

// SetContractID sets the "contract" edge to the Contract entity by id.
func (m *ProposalMutation) SetContractID(id int) {
	m.contract = &id
}

// ClearContract clears the "contract" edge to the Contract entity.
func (m *ProposalMutation) ClearContract() {
	m.clearedcontract = true
}

// ContractCleared reports if the "contract" edge to the Contract entity was cleared.
func (m *ProposalMutation) ContractCleared() bool {
	return m.clearedcontract
}

// ContractID returns the "contract" edge ID in the mutation.
func (m *ProposalMutation) ContractID() (id int, exists bool) {
	if m.contract != nil {
		return *m.contract, true
	}
	return
}

// ContractIDs returns the "contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContractID instead. It exists only for internal usage by the builders.
func (m *ProposalMutation) ContractIDs() (ids []int) {
	if id := m.contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContract resets all changes to the "contract" edge.
func (m *ProposalMutation) ResetContract() {
	m.contract = nil
	m.clearedcontract = false
}

// Where appends a list predicates to the ProposalMutation builder.
func (m *ProposalMutation) Where(ps ...predicate.Proposal) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProposalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Proposal).
func (m *ProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProposalMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, proposal.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, proposal.FieldUpdateTime)
	}
	if m.proposal_id != nil {
		fields = append(fields, proposal.FieldProposalID)
	}
	if m.title != nil {
		fields = append(fields, proposal.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, proposal.FieldDescription)
	}
	if m.expires_at != nil {
		fields = append(fields, proposal.FieldExpiresAt)
	}
	if m.status != nil {
		fields = append(fields, proposal.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldCreateTime:
		return m.CreateTime()
	case proposal.FieldUpdateTime:
		return m.UpdateTime()
	case proposal.FieldProposalID:
		return m.ProposalID()
	case proposal.FieldTitle:
		return m.Title()
	case proposal.FieldDescription:
		return m.Description()
	case proposal.FieldExpiresAt:
		return m.ExpiresAt()
	case proposal.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proposal.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case proposal.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case proposal.FieldProposalID:
		return m.OldProposalID(ctx)
	case proposal.FieldTitle:
		return m.OldTitle(ctx)
	case proposal.FieldDescription:
		return m.OldDescription(ctx)
	case proposal.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case proposal.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Proposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case proposal.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case proposal.FieldProposalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProposalID(v)
		return nil
	case proposal.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case proposal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case proposal.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case proposal.FieldStatus:
		v, ok := value.(proposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProposalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProposalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Proposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProposalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProposalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Proposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProposalMutation) ResetField(name string) error {
	switch name {
	case proposal.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case proposal.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case proposal.FieldProposalID:
		m.ResetProposalID()
		return nil
	case proposal.FieldTitle:
		m.ResetTitle()
		return nil
	case proposal.FieldDescription:
		m.ResetDescription()
		return nil
	case proposal.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case proposal.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contract != nil {
		edges = append(edges, proposal.EdgeContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proposal.EdgeContract:
		if id := m.contract; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProposalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontract {
		edges = append(edges, proposal.EdgeContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case proposal.EdgeContract:
		return m.clearedcontract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProposalMutation) ClearEdge(name string) error {
	switch name {
	case proposal.EdgeContract:
		m.ClearContract()
		return nil
	}
	return fmt.Errorf("unknown Proposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProposalMutation) ResetEdge(name string) error {
	switch name {
	case proposal.EdgeContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown Proposal edge %s", name)
}

// TelegramChatMutation represents an operation that mutates the TelegramChat nodes in the graph.
type TelegramChatMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	chat_id          *int64
	addchat_id       *int64
	name             *string
	is_group         *bool
	clearedFields    map[string]struct{}
	user             *int
	cleareduser      bool
	contracts        map[int]struct{}
	removedcontracts map[int]struct{}
	clearedcontracts bool
	done             bool
	oldValue         func(context.Context) (*TelegramChat, error)
	predicates       []predicate.TelegramChat
}

var _ ent.Mutation = (*TelegramChatMutation)(nil)

// telegramchatOption allows management of the mutation configuration using functional options.
type telegramchatOption func(*TelegramChatMutation)

// newTelegramChatMutation creates new mutation for the TelegramChat entity.
func newTelegramChatMutation(c config, op Op, opts ...telegramchatOption) *TelegramChatMutation {
	m := &TelegramChatMutation{
		config:        c,
		op:            op,
		typ:           TypeTelegramChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelegramChatID sets the ID field of the mutation.
func withTelegramChatID(id int) telegramchatOption {
	return func(m *TelegramChatMutation) {
		var (
			err   error
			once  sync.Once
			value *TelegramChat
		)
		m.oldValue = func(ctx context.Context) (*TelegramChat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TelegramChat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelegramChat sets the old TelegramChat of the mutation.
func withTelegramChat(node *TelegramChat) telegramchatOption {
	return func(m *TelegramChatMutation) {
		m.oldValue = func(context.Context) (*TelegramChat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelegramChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelegramChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelegramChatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelegramChatMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TelegramChat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TelegramChatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TelegramChatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TelegramChatMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TelegramChatMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TelegramChatMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TelegramChatMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChatID sets the "chat_id" field.
func (m *TelegramChatMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *TelegramChatMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *TelegramChatMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *TelegramChatMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *TelegramChatMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetName sets the "name" field.
func (m *TelegramChatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TelegramChatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TelegramChatMutation) ResetName() {
	m.name = nil
}

// SetIsGroup sets the "is_group" field.
func (m *TelegramChatMutation) SetIsGroup(b bool) {
	m.is_group = &b
}

// IsGroup returns the value of the "is_group" field in the mutation.
func (m *TelegramChatMutation) IsGroup() (r bool, exists bool) {
	v := m.is_group
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "is_group" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "is_group" field.
func (m *TelegramChatMutation) ResetIsGroup() {
	m.is_group = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TelegramChatMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TelegramChatMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TelegramChatMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TelegramChatMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TelegramChatMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TelegramChatMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddContractIDs adds the "contracts" edge to the Contract entity by ids.
func (m *TelegramChatMutation) AddContractIDs(ids ...int) {
	if m.contracts == nil {
		m.contracts = make(map[int]struct{})
	}
	for i := range ids {
		m.contracts[ids[i]] = struct{}{}
	}
}

// ClearContracts clears the "contracts" edge to the Contract entity.
func (m *TelegramChatMutation) ClearContracts() {
	m.clearedcontracts = true
}

// ContractsCleared reports if the "contracts" edge to the Contract entity was cleared.
func (m *TelegramChatMutation) ContractsCleared() bool {
	return m.clearedcontracts
}

// RemoveContractIDs removes the "contracts" edge to the Contract entity by IDs.
func (m *TelegramChatMutation) RemoveContractIDs(ids ...int) {
	if m.removedcontracts == nil {
		m.removedcontracts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contracts, ids[i])
		m.removedcontracts[ids[i]] = struct{}{}
	}
}

// RemovedContracts returns the removed IDs of the "contracts" edge to the Contract entity.
func (m *TelegramChatMutation) RemovedContractsIDs() (ids []int) {
	for id := range m.removedcontracts {
		ids = append(ids, id)
	}
	return
}

// ContractsIDs returns the "contracts" edge IDs in the mutation.
func (m *TelegramChatMutation) ContractsIDs() (ids []int) {
	for id := range m.contracts {
		ids = append(ids, id)
	}
	return
}

// ResetContracts resets all changes to the "contracts" edge.
func (m *TelegramChatMutation) ResetContracts() {
	m.contracts = nil
	m.clearedcontracts = false
	m.removedcontracts = nil
}

// Where appends a list predicates to the TelegramChatMutation builder.
func (m *TelegramChatMutation) Where(ps ...predicate.TelegramChat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TelegramChatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TelegramChat).
func (m *TelegramChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelegramChatMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, telegramchat.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, telegramchat.FieldUpdateTime)
	}
	if m.chat_id != nil {
		fields = append(fields, telegramchat.FieldChatID)
	}
	if m.name != nil {
		fields = append(fields, telegramchat.FieldName)
	}
	if m.is_group != nil {
		fields = append(fields, telegramchat.FieldIsGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelegramChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telegramchat.FieldCreateTime:
		return m.CreateTime()
	case telegramchat.FieldUpdateTime:
		return m.UpdateTime()
	case telegramchat.FieldChatID:
		return m.ChatID()
	case telegramchat.FieldName:
		return m.Name()
	case telegramchat.FieldIsGroup:
		return m.IsGroup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelegramChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telegramchat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case telegramchat.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case telegramchat.FieldChatID:
		return m.OldChatID(ctx)
	case telegramchat.FieldName:
		return m.OldName(ctx)
	case telegramchat.FieldIsGroup:
		return m.OldIsGroup(ctx)
	}
	return nil, fmt.Errorf("unknown TelegramChat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telegramchat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case telegramchat.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case telegramchat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case telegramchat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case telegramchat.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelegramChatMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, telegramchat.FieldChatID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelegramChatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case telegramchat.FieldChatID:
		return m.AddedChatID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case telegramchat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelegramChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelegramChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelegramChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TelegramChat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelegramChatMutation) ResetField(name string) error {
	switch name {
	case telegramchat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case telegramchat.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case telegramchat.FieldChatID:
		m.ResetChatID()
		return nil
	case telegramchat.FieldName:
		m.ResetName()
		return nil
	case telegramchat.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelegramChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, telegramchat.EdgeUser)
	}
	if m.contracts != nil {
		edges = append(edges, telegramchat.EdgeContracts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelegramChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case telegramchat.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case telegramchat.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.contracts))
		for id := range m.contracts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelegramChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcontracts != nil {
		edges = append(edges, telegramchat.EdgeContracts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelegramChatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case telegramchat.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.removedcontracts))
		for id := range m.removedcontracts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelegramChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, telegramchat.EdgeUser)
	}
	if m.clearedcontracts {
		edges = append(edges, telegramchat.EdgeContracts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelegramChatMutation) EdgeCleared(name string) bool {
	switch name {
	case telegramchat.EdgeUser:
		return m.cleareduser
	case telegramchat.EdgeContracts:
		return m.clearedcontracts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelegramChatMutation) ClearEdge(name string) error {
	switch name {
	case telegramchat.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelegramChatMutation) ResetEdge(name string) error {
	switch name {
	case telegramchat.EdgeUser:
		m.ResetUser()
		return nil
	case telegramchat.EdgeContracts:
		m.ResetContracts()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	name                    *string
	_type                   *user.Type
	clearedFields           map[string]struct{}
	telegram_chats          map[int]struct{}
	removedtelegram_chats   map[int]struct{}
	clearedtelegram_chats   bool
	discord_channels        map[int]struct{}
	removeddiscord_channels map[int]struct{}
	cleareddiscord_channels bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by ids.
func (m *UserMutation) AddTelegramChatIDs(ids ...int) {
	if m.telegram_chats == nil {
		m.telegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		m.telegram_chats[ids[i]] = struct{}{}
	}
}

// ClearTelegramChats clears the "telegram_chats" edge to the TelegramChat entity.
func (m *UserMutation) ClearTelegramChats() {
	m.clearedtelegram_chats = true
}

// TelegramChatsCleared reports if the "telegram_chats" edge to the TelegramChat entity was cleared.
func (m *UserMutation) TelegramChatsCleared() bool {
	return m.clearedtelegram_chats
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to the TelegramChat entity by IDs.
func (m *UserMutation) RemoveTelegramChatIDs(ids ...int) {
	if m.removedtelegram_chats == nil {
		m.removedtelegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telegram_chats, ids[i])
		m.removedtelegram_chats[ids[i]] = struct{}{}
	}
}

// RemovedTelegramChats returns the removed IDs of the "telegram_chats" edge to the TelegramChat entity.
func (m *UserMutation) RemovedTelegramChatsIDs() (ids []int) {
	for id := range m.removedtelegram_chats {
		ids = append(ids, id)
	}
	return
}

// TelegramChatsIDs returns the "telegram_chats" edge IDs in the mutation.
func (m *UserMutation) TelegramChatsIDs() (ids []int) {
	for id := range m.telegram_chats {
		ids = append(ids, id)
	}
	return
}

// ResetTelegramChats resets all changes to the "telegram_chats" edge.
func (m *UserMutation) ResetTelegramChats() {
	m.telegram_chats = nil
	m.clearedtelegram_chats = false
	m.removedtelegram_chats = nil
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by ids.
func (m *UserMutation) AddDiscordChannelIDs(ids ...int) {
	if m.discord_channels == nil {
		m.discord_channels = make(map[int]struct{})
	}
	for i := range ids {
		m.discord_channels[ids[i]] = struct{}{}
	}
}

// ClearDiscordChannels clears the "discord_channels" edge to the DiscordChannel entity.
func (m *UserMutation) ClearDiscordChannels() {
	m.cleareddiscord_channels = true
}

// DiscordChannelsCleared reports if the "discord_channels" edge to the DiscordChannel entity was cleared.
func (m *UserMutation) DiscordChannelsCleared() bool {
	return m.cleareddiscord_channels
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to the DiscordChannel entity by IDs.
func (m *UserMutation) RemoveDiscordChannelIDs(ids ...int) {
	if m.removeddiscord_channels == nil {
		m.removeddiscord_channels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.discord_channels, ids[i])
		m.removeddiscord_channels[ids[i]] = struct{}{}
	}
}

// RemovedDiscordChannels returns the removed IDs of the "discord_channels" edge to the DiscordChannel entity.
func (m *UserMutation) RemovedDiscordChannelsIDs() (ids []int) {
	for id := range m.removeddiscord_channels {
		ids = append(ids, id)
	}
	return
}

// DiscordChannelsIDs returns the "discord_channels" edge IDs in the mutation.
func (m *UserMutation) DiscordChannelsIDs() (ids []int) {
	for id := range m.discord_channels {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordChannels resets all changes to the "discord_channels" edge.
func (m *UserMutation) ResetDiscordChannels() {
	m.discord_channels = nil
	m.cleareddiscord_channels = false
	m.removeddiscord_channels = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldName:
		return m.Name()
	case user.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.telegram_chats != nil {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.discord_channels != nil {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.telegram_chats))
		for id := range m.telegram_chats {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.discord_channels))
		for id := range m.discord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtelegram_chats != nil {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.removeddiscord_channels != nil {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.removedtelegram_chats))
		for id := range m.removedtelegram_chats {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.removeddiscord_channels))
		for id := range m.removeddiscord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtelegram_chats {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.cleareddiscord_channels {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTelegramChats:
		return m.clearedtelegram_chats
	case user.EdgeDiscordChannels:
		return m.cleareddiscord_channels
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTelegramChats:
		m.ResetTelegramChats()
		return nil
	case user.EdgeDiscordChannels:
		m.ResetDiscordChannels()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
