// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/shifty11/dao-dao-notifier/ent/chain"
	"github.com/shifty11/dao-dao-notifier/ent/chainproposal"
	"github.com/shifty11/dao-dao-notifier/ent/contract"
	"github.com/shifty11/dao-dao-notifier/ent/contractproposal"
	"github.com/shifty11/dao-dao-notifier/ent/discordchannel"
	"github.com/shifty11/dao-dao-notifier/ent/predicate"
	"github.com/shifty11/dao-dao-notifier/ent/telegramchat"
	"github.com/shifty11/dao-dao-notifier/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChain            = "Chain"
	TypeChainProposal    = "ChainProposal"
	TypeContract         = "Contract"
	TypeContractProposal = "ContractProposal"
	TypeDiscordChannel   = "DiscordChannel"
	TypeTelegramChat     = "TelegramChat"
	TypeUser             = "User"
)

// ChainMutation represents an operation that mutates the Chain nodes in the graph.
type ChainMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	chain_id                *string
	name                    *string
	pretty_name             *string
	is_enabled              *bool
	image_url               *string
	thumbnail_url           *string
	clearedFields           map[string]struct{}
	chain_proposals         map[int]struct{}
	removedchain_proposals  map[int]struct{}
	clearedchain_proposals  bool
	telegram_chats          map[int]struct{}
	removedtelegram_chats   map[int]struct{}
	clearedtelegram_chats   bool
	discord_channels        map[int]struct{}
	removeddiscord_channels map[int]struct{}
	cleareddiscord_channels bool
	done                    bool
	oldValue                func(context.Context) (*Chain, error)
	predicates              []predicate.Chain
}

var _ ent.Mutation = (*ChainMutation)(nil)

// chainOption allows management of the mutation configuration using functional options.
type chainOption func(*ChainMutation)

// newChainMutation creates new mutation for the Chain entity.
func newChainMutation(c config, op Op, opts ...chainOption) *ChainMutation {
	m := &ChainMutation{
		config:        c,
		op:            op,
		typ:           TypeChain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChainID sets the ID field of the mutation.
func withChainID(id int) chainOption {
	return func(m *ChainMutation) {
		var (
			err   error
			once  sync.Once
			value *Chain
		)
		m.oldValue = func(ctx context.Context) (*Chain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChain sets the old Chain of the mutation.
func withChain(node *Chain) chainOption {
	return func(m *ChainMutation) {
		m.oldValue = func(context.Context) (*Chain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChainMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChainMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ChainMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ChainMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ChainMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ChainMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ChainMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ChainMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChainID sets the "chain_id" field.
func (m *ChainMutation) SetChainID(s string) {
	m.chain_id = &s
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *ChainMutation) ChainID() (r string, exists bool) {
	v := m.chain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldChainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *ChainMutation) ResetChainID() {
	m.chain_id = nil
}

// SetName sets the "name" field.
func (m *ChainMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChainMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChainMutation) ResetName() {
	m.name = nil
}

// SetPrettyName sets the "pretty_name" field.
func (m *ChainMutation) SetPrettyName(s string) {
	m.pretty_name = &s
}

// PrettyName returns the value of the "pretty_name" field in the mutation.
func (m *ChainMutation) PrettyName() (r string, exists bool) {
	v := m.pretty_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPrettyName returns the old "pretty_name" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldPrettyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrettyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrettyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrettyName: %w", err)
	}
	return oldValue.PrettyName, nil
}

// ResetPrettyName resets all changes to the "pretty_name" field.
func (m *ChainMutation) ResetPrettyName() {
	m.pretty_name = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *ChainMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *ChainMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *ChainMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// SetImageURL sets the "image_url" field.
func (m *ChainMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *ChainMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *ChainMutation) ResetImageURL() {
	m.image_url = nil
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (m *ChainMutation) SetThumbnailURL(s string) {
	m.thumbnail_url = &s
}

// ThumbnailURL returns the value of the "thumbnail_url" field in the mutation.
func (m *ChainMutation) ThumbnailURL() (r string, exists bool) {
	v := m.thumbnail_url
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailURL returns the old "thumbnail_url" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldThumbnailURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailURL: %w", err)
	}
	return oldValue.ThumbnailURL, nil
}

// ResetThumbnailURL resets all changes to the "thumbnail_url" field.
func (m *ChainMutation) ResetThumbnailURL() {
	m.thumbnail_url = nil
}

// AddChainProposalIDs adds the "chain_proposals" edge to the ChainProposal entity by ids.
func (m *ChainMutation) AddChainProposalIDs(ids ...int) {
	if m.chain_proposals == nil {
		m.chain_proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.chain_proposals[ids[i]] = struct{}{}
	}
}

// ClearChainProposals clears the "chain_proposals" edge to the ChainProposal entity.
func (m *ChainMutation) ClearChainProposals() {
	m.clearedchain_proposals = true
}

// ChainProposalsCleared reports if the "chain_proposals" edge to the ChainProposal entity was cleared.
func (m *ChainMutation) ChainProposalsCleared() bool {
	return m.clearedchain_proposals
}

// RemoveChainProposalIDs removes the "chain_proposals" edge to the ChainProposal entity by IDs.
func (m *ChainMutation) RemoveChainProposalIDs(ids ...int) {
	if m.removedchain_proposals == nil {
		m.removedchain_proposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chain_proposals, ids[i])
		m.removedchain_proposals[ids[i]] = struct{}{}
	}
}

// RemovedChainProposals returns the removed IDs of the "chain_proposals" edge to the ChainProposal entity.
func (m *ChainMutation) RemovedChainProposalsIDs() (ids []int) {
	for id := range m.removedchain_proposals {
		ids = append(ids, id)
	}
	return
}

// ChainProposalsIDs returns the "chain_proposals" edge IDs in the mutation.
func (m *ChainMutation) ChainProposalsIDs() (ids []int) {
	for id := range m.chain_proposals {
		ids = append(ids, id)
	}
	return
}

// ResetChainProposals resets all changes to the "chain_proposals" edge.
func (m *ChainMutation) ResetChainProposals() {
	m.chain_proposals = nil
	m.clearedchain_proposals = false
	m.removedchain_proposals = nil
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by ids.
func (m *ChainMutation) AddTelegramChatIDs(ids ...int) {
	if m.telegram_chats == nil {
		m.telegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		m.telegram_chats[ids[i]] = struct{}{}
	}
}

// ClearTelegramChats clears the "telegram_chats" edge to the TelegramChat entity.
func (m *ChainMutation) ClearTelegramChats() {
	m.clearedtelegram_chats = true
}

// TelegramChatsCleared reports if the "telegram_chats" edge to the TelegramChat entity was cleared.
func (m *ChainMutation) TelegramChatsCleared() bool {
	return m.clearedtelegram_chats
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to the TelegramChat entity by IDs.
func (m *ChainMutation) RemoveTelegramChatIDs(ids ...int) {
	if m.removedtelegram_chats == nil {
		m.removedtelegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telegram_chats, ids[i])
		m.removedtelegram_chats[ids[i]] = struct{}{}
	}
}

// RemovedTelegramChats returns the removed IDs of the "telegram_chats" edge to the TelegramChat entity.
func (m *ChainMutation) RemovedTelegramChatsIDs() (ids []int) {
	for id := range m.removedtelegram_chats {
		ids = append(ids, id)
	}
	return
}

// TelegramChatsIDs returns the "telegram_chats" edge IDs in the mutation.
func (m *ChainMutation) TelegramChatsIDs() (ids []int) {
	for id := range m.telegram_chats {
		ids = append(ids, id)
	}
	return
}

// ResetTelegramChats resets all changes to the "telegram_chats" edge.
func (m *ChainMutation) ResetTelegramChats() {
	m.telegram_chats = nil
	m.clearedtelegram_chats = false
	m.removedtelegram_chats = nil
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by ids.
func (m *ChainMutation) AddDiscordChannelIDs(ids ...int) {
	if m.discord_channels == nil {
		m.discord_channels = make(map[int]struct{})
	}
	for i := range ids {
		m.discord_channels[ids[i]] = struct{}{}
	}
}

// ClearDiscordChannels clears the "discord_channels" edge to the DiscordChannel entity.
func (m *ChainMutation) ClearDiscordChannels() {
	m.cleareddiscord_channels = true
}

// DiscordChannelsCleared reports if the "discord_channels" edge to the DiscordChannel entity was cleared.
func (m *ChainMutation) DiscordChannelsCleared() bool {
	return m.cleareddiscord_channels
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to the DiscordChannel entity by IDs.
func (m *ChainMutation) RemoveDiscordChannelIDs(ids ...int) {
	if m.removeddiscord_channels == nil {
		m.removeddiscord_channels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.discord_channels, ids[i])
		m.removeddiscord_channels[ids[i]] = struct{}{}
	}
}

// RemovedDiscordChannels returns the removed IDs of the "discord_channels" edge to the DiscordChannel entity.
func (m *ChainMutation) RemovedDiscordChannelsIDs() (ids []int) {
	for id := range m.removeddiscord_channels {
		ids = append(ids, id)
	}
	return
}

// DiscordChannelsIDs returns the "discord_channels" edge IDs in the mutation.
func (m *ChainMutation) DiscordChannelsIDs() (ids []int) {
	for id := range m.discord_channels {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordChannels resets all changes to the "discord_channels" edge.
func (m *ChainMutation) ResetDiscordChannels() {
	m.discord_channels = nil
	m.cleareddiscord_channels = false
	m.removeddiscord_channels = nil
}

// Where appends a list predicates to the ChainMutation builder.
func (m *ChainMutation) Where(ps ...predicate.Chain) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChainMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Chain).
func (m *ChainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChainMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, chain.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, chain.FieldUpdateTime)
	}
	if m.chain_id != nil {
		fields = append(fields, chain.FieldChainID)
	}
	if m.name != nil {
		fields = append(fields, chain.FieldName)
	}
	if m.pretty_name != nil {
		fields = append(fields, chain.FieldPrettyName)
	}
	if m.is_enabled != nil {
		fields = append(fields, chain.FieldIsEnabled)
	}
	if m.image_url != nil {
		fields = append(fields, chain.FieldImageURL)
	}
	if m.thumbnail_url != nil {
		fields = append(fields, chain.FieldThumbnailURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chain.FieldCreateTime:
		return m.CreateTime()
	case chain.FieldUpdateTime:
		return m.UpdateTime()
	case chain.FieldChainID:
		return m.ChainID()
	case chain.FieldName:
		return m.Name()
	case chain.FieldPrettyName:
		return m.PrettyName()
	case chain.FieldIsEnabled:
		return m.IsEnabled()
	case chain.FieldImageURL:
		return m.ImageURL()
	case chain.FieldThumbnailURL:
		return m.ThumbnailURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chain.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case chain.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case chain.FieldChainID:
		return m.OldChainID(ctx)
	case chain.FieldName:
		return m.OldName(ctx)
	case chain.FieldPrettyName:
		return m.OldPrettyName(ctx)
	case chain.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	case chain.FieldImageURL:
		return m.OldImageURL(ctx)
	case chain.FieldThumbnailURL:
		return m.OldThumbnailURL(ctx)
	}
	return nil, fmt.Errorf("unknown Chain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chain.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case chain.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case chain.FieldChainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case chain.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case chain.FieldPrettyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrettyName(v)
		return nil
	case chain.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	case chain.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case chain.FieldThumbnailURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailURL(v)
		return nil
	}
	return fmt.Errorf("unknown Chain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChainMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChainMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChainMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChainMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChainMutation) ResetField(name string) error {
	switch name {
	case chain.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case chain.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case chain.FieldChainID:
		m.ResetChainID()
		return nil
	case chain.FieldName:
		m.ResetName()
		return nil
	case chain.FieldPrettyName:
		m.ResetPrettyName()
		return nil
	case chain.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	case chain.FieldImageURL:
		m.ResetImageURL()
		return nil
	case chain.FieldThumbnailURL:
		m.ResetThumbnailURL()
		return nil
	}
	return fmt.Errorf("unknown Chain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChainMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.chain_proposals != nil {
		edges = append(edges, chain.EdgeChainProposals)
	}
	if m.telegram_chats != nil {
		edges = append(edges, chain.EdgeTelegramChats)
	}
	if m.discord_channels != nil {
		edges = append(edges, chain.EdgeDiscordChannels)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChainMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chain.EdgeChainProposals:
		ids := make([]ent.Value, 0, len(m.chain_proposals))
		for id := range m.chain_proposals {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.telegram_chats))
		for id := range m.telegram_chats {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.discord_channels))
		for id := range m.discord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchain_proposals != nil {
		edges = append(edges, chain.EdgeChainProposals)
	}
	if m.removedtelegram_chats != nil {
		edges = append(edges, chain.EdgeTelegramChats)
	}
	if m.removeddiscord_channels != nil {
		edges = append(edges, chain.EdgeDiscordChannels)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChainMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chain.EdgeChainProposals:
		ids := make([]ent.Value, 0, len(m.removedchain_proposals))
		for id := range m.removedchain_proposals {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.removedtelegram_chats))
		for id := range m.removedtelegram_chats {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.removeddiscord_channels))
		for id := range m.removeddiscord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchain_proposals {
		edges = append(edges, chain.EdgeChainProposals)
	}
	if m.clearedtelegram_chats {
		edges = append(edges, chain.EdgeTelegramChats)
	}
	if m.cleareddiscord_channels {
		edges = append(edges, chain.EdgeDiscordChannels)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChainMutation) EdgeCleared(name string) bool {
	switch name {
	case chain.EdgeChainProposals:
		return m.clearedchain_proposals
	case chain.EdgeTelegramChats:
		return m.clearedtelegram_chats
	case chain.EdgeDiscordChannels:
		return m.cleareddiscord_channels
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChainMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Chain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChainMutation) ResetEdge(name string) error {
	switch name {
	case chain.EdgeChainProposals:
		m.ResetChainProposals()
		return nil
	case chain.EdgeTelegramChats:
		m.ResetTelegramChats()
		return nil
	case chain.EdgeDiscordChannels:
		m.ResetDiscordChannels()
		return nil
	}
	return fmt.Errorf("unknown Chain edge %s", name)
}

// ChainProposalMutation represents an operation that mutates the ChainProposal nodes in the graph.
type ChainProposalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	update_time       *time.Time
	proposal_id       *int
	addproposal_id    *int
	title             *string
	description       *string
	voting_start_time *time.Time
	voting_end_time   *time.Time
	status            *chainproposal.Status
	clearedFields     map[string]struct{}
	chain             *int
	clearedchain      bool
	done              bool
	oldValue          func(context.Context) (*ChainProposal, error)
	predicates        []predicate.ChainProposal
}

var _ ent.Mutation = (*ChainProposalMutation)(nil)

// chainproposalOption allows management of the mutation configuration using functional options.
type chainproposalOption func(*ChainProposalMutation)

// newChainProposalMutation creates new mutation for the ChainProposal entity.
func newChainProposalMutation(c config, op Op, opts ...chainproposalOption) *ChainProposalMutation {
	m := &ChainProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeChainProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChainProposalID sets the ID field of the mutation.
func withChainProposalID(id int) chainproposalOption {
	return func(m *ChainProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *ChainProposal
		)
		m.oldValue = func(ctx context.Context) (*ChainProposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChainProposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChainProposal sets the old ChainProposal of the mutation.
func withChainProposal(node *ChainProposal) chainproposalOption {
	return func(m *ChainProposalMutation) {
		m.oldValue = func(context.Context) (*ChainProposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChainProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChainProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChainProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChainProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChainProposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ChainProposalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ChainProposalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ChainProposalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ChainProposalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ChainProposalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ChainProposalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetProposalID sets the "proposal_id" field.
func (m *ChainProposalMutation) SetProposalID(i int) {
	m.proposal_id = &i
	m.addproposal_id = nil
}

// ProposalID returns the value of the "proposal_id" field in the mutation.
func (m *ChainProposalMutation) ProposalID() (r int, exists bool) {
	v := m.proposal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProposalID returns the old "proposal_id" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldProposalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProposalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProposalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProposalID: %w", err)
	}
	return oldValue.ProposalID, nil
}

// AddProposalID adds i to the "proposal_id" field.
func (m *ChainProposalMutation) AddProposalID(i int) {
	if m.addproposal_id != nil {
		*m.addproposal_id += i
	} else {
		m.addproposal_id = &i
	}
}

// AddedProposalID returns the value that was added to the "proposal_id" field in this mutation.
func (m *ChainProposalMutation) AddedProposalID() (r int, exists bool) {
	v := m.addproposal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProposalID resets all changes to the "proposal_id" field.
func (m *ChainProposalMutation) ResetProposalID() {
	m.proposal_id = nil
	m.addproposal_id = nil
}

// SetTitle sets the "title" field.
func (m *ChainProposalMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ChainProposalMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ChainProposalMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ChainProposalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ChainProposalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ChainProposalMutation) ResetDescription() {
	m.description = nil
}

// SetVotingStartTime sets the "voting_start_time" field.
func (m *ChainProposalMutation) SetVotingStartTime(t time.Time) {
	m.voting_start_time = &t
}

// VotingStartTime returns the value of the "voting_start_time" field in the mutation.
func (m *ChainProposalMutation) VotingStartTime() (r time.Time, exists bool) {
	v := m.voting_start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingStartTime returns the old "voting_start_time" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldVotingStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingStartTime: %w", err)
	}
	return oldValue.VotingStartTime, nil
}

// ResetVotingStartTime resets all changes to the "voting_start_time" field.
func (m *ChainProposalMutation) ResetVotingStartTime() {
	m.voting_start_time = nil
}

// SetVotingEndTime sets the "voting_end_time" field.
func (m *ChainProposalMutation) SetVotingEndTime(t time.Time) {
	m.voting_end_time = &t
}

// VotingEndTime returns the value of the "voting_end_time" field in the mutation.
func (m *ChainProposalMutation) VotingEndTime() (r time.Time, exists bool) {
	v := m.voting_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingEndTime returns the old "voting_end_time" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldVotingEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingEndTime: %w", err)
	}
	return oldValue.VotingEndTime, nil
}

// ResetVotingEndTime resets all changes to the "voting_end_time" field.
func (m *ChainProposalMutation) ResetVotingEndTime() {
	m.voting_end_time = nil
}

// SetStatus sets the "status" field.
func (m *ChainProposalMutation) SetStatus(c chainproposal.Status) {
	m.status = &c
}

// Status returns the value of the "status" field in the mutation.
func (m *ChainProposalMutation) Status() (r chainproposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ChainProposal entity.
// If the ChainProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainProposalMutation) OldStatus(ctx context.Context) (v chainproposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ChainProposalMutation) ResetStatus() {
	m.status = nil
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *ChainProposalMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *ChainProposalMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *ChainProposalMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *ChainProposalMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *ChainProposalMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *ChainProposalMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the ChainProposalMutation builder.
func (m *ChainProposalMutation) Where(ps ...predicate.ChainProposal) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChainProposalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChainProposal).
func (m *ChainProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChainProposalMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, chainproposal.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, chainproposal.FieldUpdateTime)
	}
	if m.proposal_id != nil {
		fields = append(fields, chainproposal.FieldProposalID)
	}
	if m.title != nil {
		fields = append(fields, chainproposal.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, chainproposal.FieldDescription)
	}
	if m.voting_start_time != nil {
		fields = append(fields, chainproposal.FieldVotingStartTime)
	}
	if m.voting_end_time != nil {
		fields = append(fields, chainproposal.FieldVotingEndTime)
	}
	if m.status != nil {
		fields = append(fields, chainproposal.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChainProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chainproposal.FieldCreateTime:
		return m.CreateTime()
	case chainproposal.FieldUpdateTime:
		return m.UpdateTime()
	case chainproposal.FieldProposalID:
		return m.ProposalID()
	case chainproposal.FieldTitle:
		return m.Title()
	case chainproposal.FieldDescription:
		return m.Description()
	case chainproposal.FieldVotingStartTime:
		return m.VotingStartTime()
	case chainproposal.FieldVotingEndTime:
		return m.VotingEndTime()
	case chainproposal.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChainProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chainproposal.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case chainproposal.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case chainproposal.FieldProposalID:
		return m.OldProposalID(ctx)
	case chainproposal.FieldTitle:
		return m.OldTitle(ctx)
	case chainproposal.FieldDescription:
		return m.OldDescription(ctx)
	case chainproposal.FieldVotingStartTime:
		return m.OldVotingStartTime(ctx)
	case chainproposal.FieldVotingEndTime:
		return m.OldVotingEndTime(ctx)
	case chainproposal.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ChainProposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chainproposal.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case chainproposal.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case chainproposal.FieldProposalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProposalID(v)
		return nil
	case chainproposal.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case chainproposal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case chainproposal.FieldVotingStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingStartTime(v)
		return nil
	case chainproposal.FieldVotingEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingEndTime(v)
		return nil
	case chainproposal.FieldStatus:
		v, ok := value.(chainproposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ChainProposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChainProposalMutation) AddedFields() []string {
	var fields []string
	if m.addproposal_id != nil {
		fields = append(fields, chainproposal.FieldProposalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChainProposalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chainproposal.FieldProposalID:
		return m.AddedProposalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chainproposal.FieldProposalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProposalID(v)
		return nil
	}
	return fmt.Errorf("unknown ChainProposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChainProposalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChainProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChainProposalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChainProposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChainProposalMutation) ResetField(name string) error {
	switch name {
	case chainproposal.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case chainproposal.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case chainproposal.FieldProposalID:
		m.ResetProposalID()
		return nil
	case chainproposal.FieldTitle:
		m.ResetTitle()
		return nil
	case chainproposal.FieldDescription:
		m.ResetDescription()
		return nil
	case chainproposal.FieldVotingStartTime:
		m.ResetVotingStartTime()
		return nil
	case chainproposal.FieldVotingEndTime:
		m.ResetVotingEndTime()
		return nil
	case chainproposal.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ChainProposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChainProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, chainproposal.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChainProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chainproposal.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChainProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChainProposalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChainProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, chainproposal.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChainProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case chainproposal.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChainProposalMutation) ClearEdge(name string) error {
	switch name {
	case chainproposal.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown ChainProposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChainProposalMutation) ResetEdge(name string) error {
	switch name {
	case chainproposal.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown ChainProposal edge %s", name)
}

// ContractMutation represents an operation that mutates the Contract nodes in the graph.
type ContractMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	address                 *string
	name                    *string
	description             *string
	image_url               *string
	thumbnail_url           *string
	rpc_endpoint            *string
	config_version          *contract.ConfigVersion
	clearedFields           map[string]struct{}
	proposals               map[int]struct{}
	removedproposals        map[int]struct{}
	clearedproposals        bool
	telegram_chats          map[int]struct{}
	removedtelegram_chats   map[int]struct{}
	clearedtelegram_chats   bool
	discord_channels        map[int]struct{}
	removeddiscord_channels map[int]struct{}
	cleareddiscord_channels bool
	done                    bool
	oldValue                func(context.Context) (*Contract, error)
	predicates              []predicate.Contract
}

var _ ent.Mutation = (*ContractMutation)(nil)

// contractOption allows management of the mutation configuration using functional options.
type contractOption func(*ContractMutation)

// newContractMutation creates new mutation for the Contract entity.
func newContractMutation(c config, op Op, opts ...contractOption) *ContractMutation {
	m := &ContractMutation{
		config:        c,
		op:            op,
		typ:           TypeContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContractID sets the ID field of the mutation.
func withContractID(id int) contractOption {
	return func(m *ContractMutation) {
		var (
			err   error
			once  sync.Once
			value *Contract
		)
		m.oldValue = func(ctx context.Context) (*Contract, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContract sets the old Contract of the mutation.
func withContract(node *Contract) contractOption {
	return func(m *ContractMutation) {
		m.oldValue = func(context.Context) (*Contract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContractMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContractMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contract.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ContractMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ContractMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ContractMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ContractMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ContractMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ContractMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetAddress sets the "address" field.
func (m *ContractMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ContractMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ContractMutation) ResetAddress() {
	m.address = nil
}

// SetName sets the "name" field.
func (m *ContractMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ContractMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ContractMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ContractMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ContractMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ContractMutation) ResetDescription() {
	m.description = nil
}

// SetImageURL sets the "image_url" field.
func (m *ContractMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *ContractMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *ContractMutation) ResetImageURL() {
	m.image_url = nil
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (m *ContractMutation) SetThumbnailURL(s string) {
	m.thumbnail_url = &s
}

// ThumbnailURL returns the value of the "thumbnail_url" field in the mutation.
func (m *ContractMutation) ThumbnailURL() (r string, exists bool) {
	v := m.thumbnail_url
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailURL returns the old "thumbnail_url" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldThumbnailURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailURL: %w", err)
	}
	return oldValue.ThumbnailURL, nil
}

// ResetThumbnailURL resets all changes to the "thumbnail_url" field.
func (m *ContractMutation) ResetThumbnailURL() {
	m.thumbnail_url = nil
}

// SetRPCEndpoint sets the "rpc_endpoint" field.
func (m *ContractMutation) SetRPCEndpoint(s string) {
	m.rpc_endpoint = &s
}

// RPCEndpoint returns the value of the "rpc_endpoint" field in the mutation.
func (m *ContractMutation) RPCEndpoint() (r string, exists bool) {
	v := m.rpc_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldRPCEndpoint returns the old "rpc_endpoint" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldRPCEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRPCEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRPCEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRPCEndpoint: %w", err)
	}
	return oldValue.RPCEndpoint, nil
}

// ResetRPCEndpoint resets all changes to the "rpc_endpoint" field.
func (m *ContractMutation) ResetRPCEndpoint() {
	m.rpc_endpoint = nil
}

// SetConfigVersion sets the "config_version" field.
func (m *ContractMutation) SetConfigVersion(cv contract.ConfigVersion) {
	m.config_version = &cv
}

// ConfigVersion returns the value of the "config_version" field in the mutation.
func (m *ContractMutation) ConfigVersion() (r contract.ConfigVersion, exists bool) {
	v := m.config_version
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigVersion returns the old "config_version" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldConfigVersion(ctx context.Context) (v contract.ConfigVersion, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigVersion: %w", err)
	}
	return oldValue.ConfigVersion, nil
}

// ResetConfigVersion resets all changes to the "config_version" field.
func (m *ContractMutation) ResetConfigVersion() {
	m.config_version = nil
}

// AddProposalIDs adds the "proposals" edge to the ContractProposal entity by ids.
func (m *ContractMutation) AddProposalIDs(ids ...int) {
	if m.proposals == nil {
		m.proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.proposals[ids[i]] = struct{}{}
	}
}

// ClearProposals clears the "proposals" edge to the ContractProposal entity.
func (m *ContractMutation) ClearProposals() {
	m.clearedproposals = true
}

// ProposalsCleared reports if the "proposals" edge to the ContractProposal entity was cleared.
func (m *ContractMutation) ProposalsCleared() bool {
	return m.clearedproposals
}

// RemoveProposalIDs removes the "proposals" edge to the ContractProposal entity by IDs.
func (m *ContractMutation) RemoveProposalIDs(ids ...int) {
	if m.removedproposals == nil {
		m.removedproposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proposals, ids[i])
		m.removedproposals[ids[i]] = struct{}{}
	}
}

// RemovedProposals returns the removed IDs of the "proposals" edge to the ContractProposal entity.
func (m *ContractMutation) RemovedProposalsIDs() (ids []int) {
	for id := range m.removedproposals {
		ids = append(ids, id)
	}
	return
}

// ProposalsIDs returns the "proposals" edge IDs in the mutation.
func (m *ContractMutation) ProposalsIDs() (ids []int) {
	for id := range m.proposals {
		ids = append(ids, id)
	}
	return
}

// ResetProposals resets all changes to the "proposals" edge.
func (m *ContractMutation) ResetProposals() {
	m.proposals = nil
	m.clearedproposals = false
	m.removedproposals = nil
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by ids.
func (m *ContractMutation) AddTelegramChatIDs(ids ...int) {
	if m.telegram_chats == nil {
		m.telegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		m.telegram_chats[ids[i]] = struct{}{}
	}
}

// ClearTelegramChats clears the "telegram_chats" edge to the TelegramChat entity.
func (m *ContractMutation) ClearTelegramChats() {
	m.clearedtelegram_chats = true
}

// TelegramChatsCleared reports if the "telegram_chats" edge to the TelegramChat entity was cleared.
func (m *ContractMutation) TelegramChatsCleared() bool {
	return m.clearedtelegram_chats
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to the TelegramChat entity by IDs.
func (m *ContractMutation) RemoveTelegramChatIDs(ids ...int) {
	if m.removedtelegram_chats == nil {
		m.removedtelegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telegram_chats, ids[i])
		m.removedtelegram_chats[ids[i]] = struct{}{}
	}
}

// RemovedTelegramChats returns the removed IDs of the "telegram_chats" edge to the TelegramChat entity.
func (m *ContractMutation) RemovedTelegramChatsIDs() (ids []int) {
	for id := range m.removedtelegram_chats {
		ids = append(ids, id)
	}
	return
}

// TelegramChatsIDs returns the "telegram_chats" edge IDs in the mutation.
func (m *ContractMutation) TelegramChatsIDs() (ids []int) {
	for id := range m.telegram_chats {
		ids = append(ids, id)
	}
	return
}

// ResetTelegramChats resets all changes to the "telegram_chats" edge.
func (m *ContractMutation) ResetTelegramChats() {
	m.telegram_chats = nil
	m.clearedtelegram_chats = false
	m.removedtelegram_chats = nil
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by ids.
func (m *ContractMutation) AddDiscordChannelIDs(ids ...int) {
	if m.discord_channels == nil {
		m.discord_channels = make(map[int]struct{})
	}
	for i := range ids {
		m.discord_channels[ids[i]] = struct{}{}
	}
}

// ClearDiscordChannels clears the "discord_channels" edge to the DiscordChannel entity.
func (m *ContractMutation) ClearDiscordChannels() {
	m.cleareddiscord_channels = true
}

// DiscordChannelsCleared reports if the "discord_channels" edge to the DiscordChannel entity was cleared.
func (m *ContractMutation) DiscordChannelsCleared() bool {
	return m.cleareddiscord_channels
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to the DiscordChannel entity by IDs.
func (m *ContractMutation) RemoveDiscordChannelIDs(ids ...int) {
	if m.removeddiscord_channels == nil {
		m.removeddiscord_channels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.discord_channels, ids[i])
		m.removeddiscord_channels[ids[i]] = struct{}{}
	}
}

// RemovedDiscordChannels returns the removed IDs of the "discord_channels" edge to the DiscordChannel entity.
func (m *ContractMutation) RemovedDiscordChannelsIDs() (ids []int) {
	for id := range m.removeddiscord_channels {
		ids = append(ids, id)
	}
	return
}

// DiscordChannelsIDs returns the "discord_channels" edge IDs in the mutation.
func (m *ContractMutation) DiscordChannelsIDs() (ids []int) {
	for id := range m.discord_channels {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordChannels resets all changes to the "discord_channels" edge.
func (m *ContractMutation) ResetDiscordChannels() {
	m.discord_channels = nil
	m.cleareddiscord_channels = false
	m.removeddiscord_channels = nil
}

// Where appends a list predicates to the ContractMutation builder.
func (m *ContractMutation) Where(ps ...predicate.Contract) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContractMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Contract).
func (m *ContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContractMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, contract.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, contract.FieldUpdateTime)
	}
	if m.address != nil {
		fields = append(fields, contract.FieldAddress)
	}
	if m.name != nil {
		fields = append(fields, contract.FieldName)
	}
	if m.description != nil {
		fields = append(fields, contract.FieldDescription)
	}
	if m.image_url != nil {
		fields = append(fields, contract.FieldImageURL)
	}
	if m.thumbnail_url != nil {
		fields = append(fields, contract.FieldThumbnailURL)
	}
	if m.rpc_endpoint != nil {
		fields = append(fields, contract.FieldRPCEndpoint)
	}
	if m.config_version != nil {
		fields = append(fields, contract.FieldConfigVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contract.FieldCreateTime:
		return m.CreateTime()
	case contract.FieldUpdateTime:
		return m.UpdateTime()
	case contract.FieldAddress:
		return m.Address()
	case contract.FieldName:
		return m.Name()
	case contract.FieldDescription:
		return m.Description()
	case contract.FieldImageURL:
		return m.ImageURL()
	case contract.FieldThumbnailURL:
		return m.ThumbnailURL()
	case contract.FieldRPCEndpoint:
		return m.RPCEndpoint()
	case contract.FieldConfigVersion:
		return m.ConfigVersion()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contract.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case contract.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case contract.FieldAddress:
		return m.OldAddress(ctx)
	case contract.FieldName:
		return m.OldName(ctx)
	case contract.FieldDescription:
		return m.OldDescription(ctx)
	case contract.FieldImageURL:
		return m.OldImageURL(ctx)
	case contract.FieldThumbnailURL:
		return m.OldThumbnailURL(ctx)
	case contract.FieldRPCEndpoint:
		return m.OldRPCEndpoint(ctx)
	case contract.FieldConfigVersion:
		return m.OldConfigVersion(ctx)
	}
	return nil, fmt.Errorf("unknown Contract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contract.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case contract.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case contract.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case contract.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case contract.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case contract.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case contract.FieldThumbnailURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailURL(v)
		return nil
	case contract.FieldRPCEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRPCEndpoint(v)
		return nil
	case contract.FieldConfigVersion:
		v, ok := value.(contract.ConfigVersion)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContractMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContractMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Contract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContractMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContractMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Contract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContractMutation) ResetField(name string) error {
	switch name {
	case contract.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case contract.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case contract.FieldAddress:
		m.ResetAddress()
		return nil
	case contract.FieldName:
		m.ResetName()
		return nil
	case contract.FieldDescription:
		m.ResetDescription()
		return nil
	case contract.FieldImageURL:
		m.ResetImageURL()
		return nil
	case contract.FieldThumbnailURL:
		m.ResetThumbnailURL()
		return nil
	case contract.FieldRPCEndpoint:
		m.ResetRPCEndpoint()
		return nil
	case contract.FieldConfigVersion:
		m.ResetConfigVersion()
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.proposals != nil {
		edges = append(edges, contract.EdgeProposals)
	}
	if m.telegram_chats != nil {
		edges = append(edges, contract.EdgeTelegramChats)
	}
	if m.discord_channels != nil {
		edges = append(edges, contract.EdgeDiscordChannels)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContractMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contract.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.proposals))
		for id := range m.proposals {
			ids = append(ids, id)
		}
		return ids
	case contract.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.telegram_chats))
		for id := range m.telegram_chats {
			ids = append(ids, id)
		}
		return ids
	case contract.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.discord_channels))
		for id := range m.discord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedproposals != nil {
		edges = append(edges, contract.EdgeProposals)
	}
	if m.removedtelegram_chats != nil {
		edges = append(edges, contract.EdgeTelegramChats)
	}
	if m.removeddiscord_channels != nil {
		edges = append(edges, contract.EdgeDiscordChannels)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContractMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case contract.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.removedproposals))
		for id := range m.removedproposals {
			ids = append(ids, id)
		}
		return ids
	case contract.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.removedtelegram_chats))
		for id := range m.removedtelegram_chats {
			ids = append(ids, id)
		}
		return ids
	case contract.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.removeddiscord_channels))
		for id := range m.removeddiscord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproposals {
		edges = append(edges, contract.EdgeProposals)
	}
	if m.clearedtelegram_chats {
		edges = append(edges, contract.EdgeTelegramChats)
	}
	if m.cleareddiscord_channels {
		edges = append(edges, contract.EdgeDiscordChannels)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContractMutation) EdgeCleared(name string) bool {
	switch name {
	case contract.EdgeProposals:
		return m.clearedproposals
	case contract.EdgeTelegramChats:
		return m.clearedtelegram_chats
	case contract.EdgeDiscordChannels:
		return m.cleareddiscord_channels
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContractMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Contract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContractMutation) ResetEdge(name string) error {
	switch name {
	case contract.EdgeProposals:
		m.ResetProposals()
		return nil
	case contract.EdgeTelegramChats:
		m.ResetTelegramChats()
		return nil
	case contract.EdgeDiscordChannels:
		m.ResetDiscordChannels()
		return nil
	}
	return fmt.Errorf("unknown Contract edge %s", name)
}

// ContractProposalMutation represents an operation that mutates the ContractProposal nodes in the graph.
type ContractProposalMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	proposal_id     *int
	addproposal_id  *int
	title           *string
	description     *string
	expires_at      *time.Time
	status          *contractproposal.Status
	clearedFields   map[string]struct{}
	contract        *int
	clearedcontract bool
	done            bool
	oldValue        func(context.Context) (*ContractProposal, error)
	predicates      []predicate.ContractProposal
}

var _ ent.Mutation = (*ContractProposalMutation)(nil)

// contractproposalOption allows management of the mutation configuration using functional options.
type contractproposalOption func(*ContractProposalMutation)

// newContractProposalMutation creates new mutation for the ContractProposal entity.
func newContractProposalMutation(c config, op Op, opts ...contractproposalOption) *ContractProposalMutation {
	m := &ContractProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeContractProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContractProposalID sets the ID field of the mutation.
func withContractProposalID(id int) contractproposalOption {
	return func(m *ContractProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *ContractProposal
		)
		m.oldValue = func(ctx context.Context) (*ContractProposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContractProposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContractProposal sets the old ContractProposal of the mutation.
func withContractProposal(node *ContractProposal) contractproposalOption {
	return func(m *ContractProposalMutation) {
		m.oldValue = func(context.Context) (*ContractProposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContractProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContractProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContractProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContractProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ContractProposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ContractProposalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ContractProposalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ContractProposalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ContractProposalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ContractProposalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ContractProposalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetProposalID sets the "proposal_id" field.
func (m *ContractProposalMutation) SetProposalID(i int) {
	m.proposal_id = &i
	m.addproposal_id = nil
}

// ProposalID returns the value of the "proposal_id" field in the mutation.
func (m *ContractProposalMutation) ProposalID() (r int, exists bool) {
	v := m.proposal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProposalID returns the old "proposal_id" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldProposalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProposalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProposalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProposalID: %w", err)
	}
	return oldValue.ProposalID, nil
}

// AddProposalID adds i to the "proposal_id" field.
func (m *ContractProposalMutation) AddProposalID(i int) {
	if m.addproposal_id != nil {
		*m.addproposal_id += i
	} else {
		m.addproposal_id = &i
	}
}

// AddedProposalID returns the value that was added to the "proposal_id" field in this mutation.
func (m *ContractProposalMutation) AddedProposalID() (r int, exists bool) {
	v := m.addproposal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProposalID resets all changes to the "proposal_id" field.
func (m *ContractProposalMutation) ResetProposalID() {
	m.proposal_id = nil
	m.addproposal_id = nil
}

// SetTitle sets the "title" field.
func (m *ContractProposalMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ContractProposalMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ContractProposalMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ContractProposalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ContractProposalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ContractProposalMutation) ResetDescription() {
	m.description = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *ContractProposalMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *ContractProposalMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *ContractProposalMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetStatus sets the "status" field.
func (m *ContractProposalMutation) SetStatus(c contractproposal.Status) {
	m.status = &c
}

// Status returns the value of the "status" field in the mutation.
func (m *ContractProposalMutation) Status() (r contractproposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldStatus(ctx context.Context) (v contractproposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ContractProposalMutation) ResetStatus() {
	m.status = nil
}

// SetContractID sets the "contract" edge to the Contract entity by id.
func (m *ContractProposalMutation) SetContractID(id int) {
	m.contract = &id
}

// ClearContract clears the "contract" edge to the Contract entity.
func (m *ContractProposalMutation) ClearContract() {
	m.clearedcontract = true
}

// ContractCleared reports if the "contract" edge to the Contract entity was cleared.
func (m *ContractProposalMutation) ContractCleared() bool {
	return m.clearedcontract
}

// ContractID returns the "contract" edge ID in the mutation.
func (m *ContractProposalMutation) ContractID() (id int, exists bool) {
	if m.contract != nil {
		return *m.contract, true
	}
	return
}

// ContractIDs returns the "contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContractID instead. It exists only for internal usage by the builders.
func (m *ContractProposalMutation) ContractIDs() (ids []int) {
	if id := m.contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContract resets all changes to the "contract" edge.
func (m *ContractProposalMutation) ResetContract() {
	m.contract = nil
	m.clearedcontract = false
}

// Where appends a list predicates to the ContractProposalMutation builder.
func (m *ContractProposalMutation) Where(ps ...predicate.ContractProposal) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContractProposalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ContractProposal).
func (m *ContractProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContractProposalMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, contractproposal.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, contractproposal.FieldUpdateTime)
	}
	if m.proposal_id != nil {
		fields = append(fields, contractproposal.FieldProposalID)
	}
	if m.title != nil {
		fields = append(fields, contractproposal.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, contractproposal.FieldDescription)
	}
	if m.expires_at != nil {
		fields = append(fields, contractproposal.FieldExpiresAt)
	}
	if m.status != nil {
		fields = append(fields, contractproposal.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContractProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contractproposal.FieldCreateTime:
		return m.CreateTime()
	case contractproposal.FieldUpdateTime:
		return m.UpdateTime()
	case contractproposal.FieldProposalID:
		return m.ProposalID()
	case contractproposal.FieldTitle:
		return m.Title()
	case contractproposal.FieldDescription:
		return m.Description()
	case contractproposal.FieldExpiresAt:
		return m.ExpiresAt()
	case contractproposal.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContractProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contractproposal.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case contractproposal.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case contractproposal.FieldProposalID:
		return m.OldProposalID(ctx)
	case contractproposal.FieldTitle:
		return m.OldTitle(ctx)
	case contractproposal.FieldDescription:
		return m.OldDescription(ctx)
	case contractproposal.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case contractproposal.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ContractProposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contractproposal.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case contractproposal.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case contractproposal.FieldProposalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProposalID(v)
		return nil
	case contractproposal.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case contractproposal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case contractproposal.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case contractproposal.FieldStatus:
		v, ok := value.(contractproposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ContractProposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContractProposalMutation) AddedFields() []string {
	var fields []string
	if m.addproposal_id != nil {
		fields = append(fields, contractproposal.FieldProposalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContractProposalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contractproposal.FieldProposalID:
		return m.AddedProposalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contractproposal.FieldProposalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProposalID(v)
		return nil
	}
	return fmt.Errorf("unknown ContractProposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContractProposalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContractProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContractProposalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ContractProposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContractProposalMutation) ResetField(name string) error {
	switch name {
	case contractproposal.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case contractproposal.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case contractproposal.FieldProposalID:
		m.ResetProposalID()
		return nil
	case contractproposal.FieldTitle:
		m.ResetTitle()
		return nil
	case contractproposal.FieldDescription:
		m.ResetDescription()
		return nil
	case contractproposal.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case contractproposal.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ContractProposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContractProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contract != nil {
		edges = append(edges, contractproposal.EdgeContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContractProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contractproposal.EdgeContract:
		if id := m.contract; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContractProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContractProposalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContractProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontract {
		edges = append(edges, contractproposal.EdgeContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContractProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case contractproposal.EdgeContract:
		return m.clearedcontract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContractProposalMutation) ClearEdge(name string) error {
	switch name {
	case contractproposal.EdgeContract:
		m.ClearContract()
		return nil
	}
	return fmt.Errorf("unknown ContractProposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContractProposalMutation) ResetEdge(name string) error {
	switch name {
	case contractproposal.EdgeContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown ContractProposal edge %s", name)
}

// DiscordChannelMutation represents an operation that mutates the DiscordChannel nodes in the graph.
type DiscordChannelMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	channel_id       *int64
	addchannel_id    *int64
	name             *string
	is_group         *bool
	clearedFields    map[string]struct{}
	users            map[int]struct{}
	removedusers     map[int]struct{}
	clearedusers     bool
	contracts        map[int]struct{}
	removedcontracts map[int]struct{}
	clearedcontracts bool
	chains           map[int]struct{}
	removedchains    map[int]struct{}
	clearedchains    bool
	done             bool
	oldValue         func(context.Context) (*DiscordChannel, error)
	predicates       []predicate.DiscordChannel
}

var _ ent.Mutation = (*DiscordChannelMutation)(nil)

// discordchannelOption allows management of the mutation configuration using functional options.
type discordchannelOption func(*DiscordChannelMutation)

// newDiscordChannelMutation creates new mutation for the DiscordChannel entity.
func newDiscordChannelMutation(c config, op Op, opts ...discordchannelOption) *DiscordChannelMutation {
	m := &DiscordChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordChannelID sets the ID field of the mutation.
func withDiscordChannelID(id int) discordchannelOption {
	return func(m *DiscordChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordChannel
		)
		m.oldValue = func(ctx context.Context) (*DiscordChannel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordChannel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordChannel sets the old DiscordChannel of the mutation.
func withDiscordChannel(node *DiscordChannel) discordchannelOption {
	return func(m *DiscordChannelMutation) {
		m.oldValue = func(context.Context) (*DiscordChannel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordChannelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordChannelMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordChannel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DiscordChannelMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DiscordChannelMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DiscordChannelMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DiscordChannelMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DiscordChannelMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DiscordChannelMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChannelID sets the "channel_id" field.
func (m *DiscordChannelMutation) SetChannelID(i int64) {
	m.channel_id = &i
	m.addchannel_id = nil
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *DiscordChannelMutation) ChannelID() (r int64, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldChannelID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// AddChannelID adds i to the "channel_id" field.
func (m *DiscordChannelMutation) AddChannelID(i int64) {
	if m.addchannel_id != nil {
		*m.addchannel_id += i
	} else {
		m.addchannel_id = &i
	}
}

// AddedChannelID returns the value that was added to the "channel_id" field in this mutation.
func (m *DiscordChannelMutation) AddedChannelID() (r int64, exists bool) {
	v := m.addchannel_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *DiscordChannelMutation) ResetChannelID() {
	m.channel_id = nil
	m.addchannel_id = nil
}

// SetName sets the "name" field.
func (m *DiscordChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscordChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscordChannelMutation) ResetName() {
	m.name = nil
}

// SetIsGroup sets the "is_group" field.
func (m *DiscordChannelMutation) SetIsGroup(b bool) {
	m.is_group = &b
}

// IsGroup returns the value of the "is_group" field in the mutation.
func (m *DiscordChannelMutation) IsGroup() (r bool, exists bool) {
	v := m.is_group
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "is_group" field's value of the DiscordChannel entity.
// If the DiscordChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordChannelMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "is_group" field.
func (m *DiscordChannelMutation) ResetIsGroup() {
	m.is_group = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *DiscordChannelMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *DiscordChannelMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *DiscordChannelMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *DiscordChannelMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *DiscordChannelMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *DiscordChannelMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *DiscordChannelMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddContractIDs adds the "contracts" edge to the Contract entity by ids.
func (m *DiscordChannelMutation) AddContractIDs(ids ...int) {
	if m.contracts == nil {
		m.contracts = make(map[int]struct{})
	}
	for i := range ids {
		m.contracts[ids[i]] = struct{}{}
	}
}

// ClearContracts clears the "contracts" edge to the Contract entity.
func (m *DiscordChannelMutation) ClearContracts() {
	m.clearedcontracts = true
}

// ContractsCleared reports if the "contracts" edge to the Contract entity was cleared.
func (m *DiscordChannelMutation) ContractsCleared() bool {
	return m.clearedcontracts
}

// RemoveContractIDs removes the "contracts" edge to the Contract entity by IDs.
func (m *DiscordChannelMutation) RemoveContractIDs(ids ...int) {
	if m.removedcontracts == nil {
		m.removedcontracts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contracts, ids[i])
		m.removedcontracts[ids[i]] = struct{}{}
	}
}

// RemovedContracts returns the removed IDs of the "contracts" edge to the Contract entity.
func (m *DiscordChannelMutation) RemovedContractsIDs() (ids []int) {
	for id := range m.removedcontracts {
		ids = append(ids, id)
	}
	return
}

// ContractsIDs returns the "contracts" edge IDs in the mutation.
func (m *DiscordChannelMutation) ContractsIDs() (ids []int) {
	for id := range m.contracts {
		ids = append(ids, id)
	}
	return
}

// ResetContracts resets all changes to the "contracts" edge.
func (m *DiscordChannelMutation) ResetContracts() {
	m.contracts = nil
	m.clearedcontracts = false
	m.removedcontracts = nil
}

// AddChainIDs adds the "chains" edge to the Chain entity by ids.
func (m *DiscordChannelMutation) AddChainIDs(ids ...int) {
	if m.chains == nil {
		m.chains = make(map[int]struct{})
	}
	for i := range ids {
		m.chains[ids[i]] = struct{}{}
	}
}

// ClearChains clears the "chains" edge to the Chain entity.
func (m *DiscordChannelMutation) ClearChains() {
	m.clearedchains = true
}

// ChainsCleared reports if the "chains" edge to the Chain entity was cleared.
func (m *DiscordChannelMutation) ChainsCleared() bool {
	return m.clearedchains
}

// RemoveChainIDs removes the "chains" edge to the Chain entity by IDs.
func (m *DiscordChannelMutation) RemoveChainIDs(ids ...int) {
	if m.removedchains == nil {
		m.removedchains = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chains, ids[i])
		m.removedchains[ids[i]] = struct{}{}
	}
}

// RemovedChains returns the removed IDs of the "chains" edge to the Chain entity.
func (m *DiscordChannelMutation) RemovedChainsIDs() (ids []int) {
	for id := range m.removedchains {
		ids = append(ids, id)
	}
	return
}

// ChainsIDs returns the "chains" edge IDs in the mutation.
func (m *DiscordChannelMutation) ChainsIDs() (ids []int) {
	for id := range m.chains {
		ids = append(ids, id)
	}
	return
}

// ResetChains resets all changes to the "chains" edge.
func (m *DiscordChannelMutation) ResetChains() {
	m.chains = nil
	m.clearedchains = false
	m.removedchains = nil
}

// Where appends a list predicates to the DiscordChannelMutation builder.
func (m *DiscordChannelMutation) Where(ps ...predicate.DiscordChannel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DiscordChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DiscordChannel).
func (m *DiscordChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordChannelMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, discordchannel.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, discordchannel.FieldUpdateTime)
	}
	if m.channel_id != nil {
		fields = append(fields, discordchannel.FieldChannelID)
	}
	if m.name != nil {
		fields = append(fields, discordchannel.FieldName)
	}
	if m.is_group != nil {
		fields = append(fields, discordchannel.FieldIsGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discordchannel.FieldCreateTime:
		return m.CreateTime()
	case discordchannel.FieldUpdateTime:
		return m.UpdateTime()
	case discordchannel.FieldChannelID:
		return m.ChannelID()
	case discordchannel.FieldName:
		return m.Name()
	case discordchannel.FieldIsGroup:
		return m.IsGroup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discordchannel.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case discordchannel.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case discordchannel.FieldChannelID:
		return m.OldChannelID(ctx)
	case discordchannel.FieldName:
		return m.OldName(ctx)
	case discordchannel.FieldIsGroup:
		return m.OldIsGroup(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordChannel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discordchannel.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case discordchannel.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case discordchannel.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case discordchannel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case discordchannel.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordChannelMutation) AddedFields() []string {
	var fields []string
	if m.addchannel_id != nil {
		fields = append(fields, discordchannel.FieldChannelID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case discordchannel.FieldChannelID:
		return m.AddedChannelID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case discordchannel.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChannelID(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiscordChannel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordChannelMutation) ResetField(name string) error {
	switch name {
	case discordchannel.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case discordchannel.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case discordchannel.FieldChannelID:
		m.ResetChannelID()
		return nil
	case discordchannel.FieldName:
		m.ResetName()
		return nil
	case discordchannel.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, discordchannel.EdgeUsers)
	}
	if m.contracts != nil {
		edges = append(edges, discordchannel.EdgeContracts)
	}
	if m.chains != nil {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discordchannel.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case discordchannel.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.contracts))
		for id := range m.contracts {
			ids = append(ids, id)
		}
		return ids
	case discordchannel.EdgeChains:
		ids := make([]ent.Value, 0, len(m.chains))
		for id := range m.chains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, discordchannel.EdgeUsers)
	}
	if m.removedcontracts != nil {
		edges = append(edges, discordchannel.EdgeContracts)
	}
	if m.removedchains != nil {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discordchannel.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case discordchannel.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.removedcontracts))
		for id := range m.removedcontracts {
			ids = append(ids, id)
		}
		return ids
	case discordchannel.EdgeChains:
		ids := make([]ent.Value, 0, len(m.removedchains))
		for id := range m.removedchains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, discordchannel.EdgeUsers)
	}
	if m.clearedcontracts {
		edges = append(edges, discordchannel.EdgeContracts)
	}
	if m.clearedchains {
		edges = append(edges, discordchannel.EdgeChains)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case discordchannel.EdgeUsers:
		return m.clearedusers
	case discordchannel.EdgeContracts:
		return m.clearedcontracts
	case discordchannel.EdgeChains:
		return m.clearedchains
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordChannelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordChannel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordChannelMutation) ResetEdge(name string) error {
	switch name {
	case discordchannel.EdgeUsers:
		m.ResetUsers()
		return nil
	case discordchannel.EdgeContracts:
		m.ResetContracts()
		return nil
	case discordchannel.EdgeChains:
		m.ResetChains()
		return nil
	}
	return fmt.Errorf("unknown DiscordChannel edge %s", name)
}

// TelegramChatMutation represents an operation that mutates the TelegramChat nodes in the graph.
type TelegramChatMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	chat_id          *int64
	addchat_id       *int64
	name             *string
	is_group         *bool
	clearedFields    map[string]struct{}
	users            map[int]struct{}
	removedusers     map[int]struct{}
	clearedusers     bool
	contracts        map[int]struct{}
	removedcontracts map[int]struct{}
	clearedcontracts bool
	chains           map[int]struct{}
	removedchains    map[int]struct{}
	clearedchains    bool
	done             bool
	oldValue         func(context.Context) (*TelegramChat, error)
	predicates       []predicate.TelegramChat
}

var _ ent.Mutation = (*TelegramChatMutation)(nil)

// telegramchatOption allows management of the mutation configuration using functional options.
type telegramchatOption func(*TelegramChatMutation)

// newTelegramChatMutation creates new mutation for the TelegramChat entity.
func newTelegramChatMutation(c config, op Op, opts ...telegramchatOption) *TelegramChatMutation {
	m := &TelegramChatMutation{
		config:        c,
		op:            op,
		typ:           TypeTelegramChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelegramChatID sets the ID field of the mutation.
func withTelegramChatID(id int) telegramchatOption {
	return func(m *TelegramChatMutation) {
		var (
			err   error
			once  sync.Once
			value *TelegramChat
		)
		m.oldValue = func(ctx context.Context) (*TelegramChat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TelegramChat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelegramChat sets the old TelegramChat of the mutation.
func withTelegramChat(node *TelegramChat) telegramchatOption {
	return func(m *TelegramChatMutation) {
		m.oldValue = func(context.Context) (*TelegramChat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelegramChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelegramChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelegramChatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelegramChatMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TelegramChat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TelegramChatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TelegramChatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TelegramChatMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TelegramChatMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TelegramChatMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TelegramChatMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChatID sets the "chat_id" field.
func (m *TelegramChatMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *TelegramChatMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *TelegramChatMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *TelegramChatMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *TelegramChatMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetName sets the "name" field.
func (m *TelegramChatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TelegramChatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TelegramChatMutation) ResetName() {
	m.name = nil
}

// SetIsGroup sets the "is_group" field.
func (m *TelegramChatMutation) SetIsGroup(b bool) {
	m.is_group = &b
}

// IsGroup returns the value of the "is_group" field in the mutation.
func (m *TelegramChatMutation) IsGroup() (r bool, exists bool) {
	v := m.is_group
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "is_group" field's value of the TelegramChat entity.
// If the TelegramChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChatMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "is_group" field.
func (m *TelegramChatMutation) ResetIsGroup() {
	m.is_group = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *TelegramChatMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *TelegramChatMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *TelegramChatMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *TelegramChatMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *TelegramChatMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *TelegramChatMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *TelegramChatMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddContractIDs adds the "contracts" edge to the Contract entity by ids.
func (m *TelegramChatMutation) AddContractIDs(ids ...int) {
	if m.contracts == nil {
		m.contracts = make(map[int]struct{})
	}
	for i := range ids {
		m.contracts[ids[i]] = struct{}{}
	}
}

// ClearContracts clears the "contracts" edge to the Contract entity.
func (m *TelegramChatMutation) ClearContracts() {
	m.clearedcontracts = true
}

// ContractsCleared reports if the "contracts" edge to the Contract entity was cleared.
func (m *TelegramChatMutation) ContractsCleared() bool {
	return m.clearedcontracts
}

// RemoveContractIDs removes the "contracts" edge to the Contract entity by IDs.
func (m *TelegramChatMutation) RemoveContractIDs(ids ...int) {
	if m.removedcontracts == nil {
		m.removedcontracts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contracts, ids[i])
		m.removedcontracts[ids[i]] = struct{}{}
	}
}

// RemovedContracts returns the removed IDs of the "contracts" edge to the Contract entity.
func (m *TelegramChatMutation) RemovedContractsIDs() (ids []int) {
	for id := range m.removedcontracts {
		ids = append(ids, id)
	}
	return
}

// ContractsIDs returns the "contracts" edge IDs in the mutation.
func (m *TelegramChatMutation) ContractsIDs() (ids []int) {
	for id := range m.contracts {
		ids = append(ids, id)
	}
	return
}

// ResetContracts resets all changes to the "contracts" edge.
func (m *TelegramChatMutation) ResetContracts() {
	m.contracts = nil
	m.clearedcontracts = false
	m.removedcontracts = nil
}

// AddChainIDs adds the "chains" edge to the Chain entity by ids.
func (m *TelegramChatMutation) AddChainIDs(ids ...int) {
	if m.chains == nil {
		m.chains = make(map[int]struct{})
	}
	for i := range ids {
		m.chains[ids[i]] = struct{}{}
	}
}

// ClearChains clears the "chains" edge to the Chain entity.
func (m *TelegramChatMutation) ClearChains() {
	m.clearedchains = true
}

// ChainsCleared reports if the "chains" edge to the Chain entity was cleared.
func (m *TelegramChatMutation) ChainsCleared() bool {
	return m.clearedchains
}

// RemoveChainIDs removes the "chains" edge to the Chain entity by IDs.
func (m *TelegramChatMutation) RemoveChainIDs(ids ...int) {
	if m.removedchains == nil {
		m.removedchains = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chains, ids[i])
		m.removedchains[ids[i]] = struct{}{}
	}
}

// RemovedChains returns the removed IDs of the "chains" edge to the Chain entity.
func (m *TelegramChatMutation) RemovedChainsIDs() (ids []int) {
	for id := range m.removedchains {
		ids = append(ids, id)
	}
	return
}

// ChainsIDs returns the "chains" edge IDs in the mutation.
func (m *TelegramChatMutation) ChainsIDs() (ids []int) {
	for id := range m.chains {
		ids = append(ids, id)
	}
	return
}

// ResetChains resets all changes to the "chains" edge.
func (m *TelegramChatMutation) ResetChains() {
	m.chains = nil
	m.clearedchains = false
	m.removedchains = nil
}

// Where appends a list predicates to the TelegramChatMutation builder.
func (m *TelegramChatMutation) Where(ps ...predicate.TelegramChat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TelegramChatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TelegramChat).
func (m *TelegramChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelegramChatMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, telegramchat.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, telegramchat.FieldUpdateTime)
	}
	if m.chat_id != nil {
		fields = append(fields, telegramchat.FieldChatID)
	}
	if m.name != nil {
		fields = append(fields, telegramchat.FieldName)
	}
	if m.is_group != nil {
		fields = append(fields, telegramchat.FieldIsGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelegramChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telegramchat.FieldCreateTime:
		return m.CreateTime()
	case telegramchat.FieldUpdateTime:
		return m.UpdateTime()
	case telegramchat.FieldChatID:
		return m.ChatID()
	case telegramchat.FieldName:
		return m.Name()
	case telegramchat.FieldIsGroup:
		return m.IsGroup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelegramChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telegramchat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case telegramchat.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case telegramchat.FieldChatID:
		return m.OldChatID(ctx)
	case telegramchat.FieldName:
		return m.OldName(ctx)
	case telegramchat.FieldIsGroup:
		return m.OldIsGroup(ctx)
	}
	return nil, fmt.Errorf("unknown TelegramChat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telegramchat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case telegramchat.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case telegramchat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case telegramchat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case telegramchat.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelegramChatMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, telegramchat.FieldChatID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelegramChatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case telegramchat.FieldChatID:
		return m.AddedChatID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case telegramchat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelegramChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelegramChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelegramChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TelegramChat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelegramChatMutation) ResetField(name string) error {
	switch name {
	case telegramchat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case telegramchat.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case telegramchat.FieldChatID:
		m.ResetChatID()
		return nil
	case telegramchat.FieldName:
		m.ResetName()
		return nil
	case telegramchat.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelegramChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, telegramchat.EdgeUsers)
	}
	if m.contracts != nil {
		edges = append(edges, telegramchat.EdgeContracts)
	}
	if m.chains != nil {
		edges = append(edges, telegramchat.EdgeChains)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelegramChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case telegramchat.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case telegramchat.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.contracts))
		for id := range m.contracts {
			ids = append(ids, id)
		}
		return ids
	case telegramchat.EdgeChains:
		ids := make([]ent.Value, 0, len(m.chains))
		for id := range m.chains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelegramChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, telegramchat.EdgeUsers)
	}
	if m.removedcontracts != nil {
		edges = append(edges, telegramchat.EdgeContracts)
	}
	if m.removedchains != nil {
		edges = append(edges, telegramchat.EdgeChains)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelegramChatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case telegramchat.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case telegramchat.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.removedcontracts))
		for id := range m.removedcontracts {
			ids = append(ids, id)
		}
		return ids
	case telegramchat.EdgeChains:
		ids := make([]ent.Value, 0, len(m.removedchains))
		for id := range m.removedchains {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelegramChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, telegramchat.EdgeUsers)
	}
	if m.clearedcontracts {
		edges = append(edges, telegramchat.EdgeContracts)
	}
	if m.clearedchains {
		edges = append(edges, telegramchat.EdgeChains)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelegramChatMutation) EdgeCleared(name string) bool {
	switch name {
	case telegramchat.EdgeUsers:
		return m.clearedusers
	case telegramchat.EdgeContracts:
		return m.clearedcontracts
	case telegramchat.EdgeChains:
		return m.clearedchains
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelegramChatMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TelegramChat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelegramChatMutation) ResetEdge(name string) error {
	switch name {
	case telegramchat.EdgeUsers:
		m.ResetUsers()
		return nil
	case telegramchat.EdgeContracts:
		m.ResetContracts()
		return nil
	case telegramchat.EdgeChains:
		m.ResetChains()
		return nil
	}
	return fmt.Errorf("unknown TelegramChat edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	user_id                 *int64
	adduser_id              *int64
	name                    *string
	_type                   *user.Type
	role                    *user.Role
	clearedFields           map[string]struct{}
	telegram_chats          map[int]struct{}
	removedtelegram_chats   map[int]struct{}
	clearedtelegram_chats   bool
	discord_channels        map[int]struct{}
	removeddiscord_channels map[int]struct{}
	cleareddiscord_channels bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddTelegramChatIDs adds the "telegram_chats" edge to the TelegramChat entity by ids.
func (m *UserMutation) AddTelegramChatIDs(ids ...int) {
	if m.telegram_chats == nil {
		m.telegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		m.telegram_chats[ids[i]] = struct{}{}
	}
}

// ClearTelegramChats clears the "telegram_chats" edge to the TelegramChat entity.
func (m *UserMutation) ClearTelegramChats() {
	m.clearedtelegram_chats = true
}

// TelegramChatsCleared reports if the "telegram_chats" edge to the TelegramChat entity was cleared.
func (m *UserMutation) TelegramChatsCleared() bool {
	return m.clearedtelegram_chats
}

// RemoveTelegramChatIDs removes the "telegram_chats" edge to the TelegramChat entity by IDs.
func (m *UserMutation) RemoveTelegramChatIDs(ids ...int) {
	if m.removedtelegram_chats == nil {
		m.removedtelegram_chats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telegram_chats, ids[i])
		m.removedtelegram_chats[ids[i]] = struct{}{}
	}
}

// RemovedTelegramChats returns the removed IDs of the "telegram_chats" edge to the TelegramChat entity.
func (m *UserMutation) RemovedTelegramChatsIDs() (ids []int) {
	for id := range m.removedtelegram_chats {
		ids = append(ids, id)
	}
	return
}

// TelegramChatsIDs returns the "telegram_chats" edge IDs in the mutation.
func (m *UserMutation) TelegramChatsIDs() (ids []int) {
	for id := range m.telegram_chats {
		ids = append(ids, id)
	}
	return
}

// ResetTelegramChats resets all changes to the "telegram_chats" edge.
func (m *UserMutation) ResetTelegramChats() {
	m.telegram_chats = nil
	m.clearedtelegram_chats = false
	m.removedtelegram_chats = nil
}

// AddDiscordChannelIDs adds the "discord_channels" edge to the DiscordChannel entity by ids.
func (m *UserMutation) AddDiscordChannelIDs(ids ...int) {
	if m.discord_channels == nil {
		m.discord_channels = make(map[int]struct{})
	}
	for i := range ids {
		m.discord_channels[ids[i]] = struct{}{}
	}
}

// ClearDiscordChannels clears the "discord_channels" edge to the DiscordChannel entity.
func (m *UserMutation) ClearDiscordChannels() {
	m.cleareddiscord_channels = true
}

// DiscordChannelsCleared reports if the "discord_channels" edge to the DiscordChannel entity was cleared.
func (m *UserMutation) DiscordChannelsCleared() bool {
	return m.cleareddiscord_channels
}

// RemoveDiscordChannelIDs removes the "discord_channels" edge to the DiscordChannel entity by IDs.
func (m *UserMutation) RemoveDiscordChannelIDs(ids ...int) {
	if m.removeddiscord_channels == nil {
		m.removeddiscord_channels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.discord_channels, ids[i])
		m.removeddiscord_channels[ids[i]] = struct{}{}
	}
}

// RemovedDiscordChannels returns the removed IDs of the "discord_channels" edge to the DiscordChannel entity.
func (m *UserMutation) RemovedDiscordChannelsIDs() (ids []int) {
	for id := range m.removeddiscord_channels {
		ids = append(ids, id)
	}
	return
}

// DiscordChannelsIDs returns the "discord_channels" edge IDs in the mutation.
func (m *UserMutation) DiscordChannelsIDs() (ids []int) {
	for id := range m.discord_channels {
		ids = append(ids, id)
	}
	return
}

// ResetDiscordChannels resets all changes to the "discord_channels" edge.
func (m *UserMutation) ResetDiscordChannels() {
	m.discord_channels = nil
	m.cleareddiscord_channels = false
	m.removeddiscord_channels = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUserID:
		return m.UserID()
	case user.FieldName:
		return m.Name()
	case user.FieldType:
		return m.GetType()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.telegram_chats != nil {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.discord_channels != nil {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.telegram_chats))
		for id := range m.telegram_chats {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.discord_channels))
		for id := range m.discord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtelegram_chats != nil {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.removeddiscord_channels != nil {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTelegramChats:
		ids := make([]ent.Value, 0, len(m.removedtelegram_chats))
		for id := range m.removedtelegram_chats {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDiscordChannels:
		ids := make([]ent.Value, 0, len(m.removeddiscord_channels))
		for id := range m.removeddiscord_channels {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtelegram_chats {
		edges = append(edges, user.EdgeTelegramChats)
	}
	if m.cleareddiscord_channels {
		edges = append(edges, user.EdgeDiscordChannels)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTelegramChats:
		return m.clearedtelegram_chats
	case user.EdgeDiscordChannels:
		return m.cleareddiscord_channels
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTelegramChats:
		m.ResetTelegramChats()
		return nil
	case user.EdgeDiscordChannels:
		m.ResetDiscordChannels()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
